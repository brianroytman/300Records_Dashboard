{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/rendering_strategies/ui.scheduler.appointmentsPositioning.strategy.base.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _type = require(\"../../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar COLLECTOR_DEFAULT_WIDTH = 24;\nvar COLLECTOR_DEFAULT_OFFSET = 3;\nvar COMPACT_THEME_APPOINTMENT_DEFAULT_OFFSET = 22;\nvar APPOINTMENT_MIN_COUNT = 1;\nvar APPOINTMENT_DEFAULT_WIDTH = 40;\nvar COLLECTOR_WIDTH_IN_PERCENTS = 75;\nvar APPOINTMENT_INCREASED_WIDTH = 50;\n\nvar AppointmentPositioningStrategy = function () {\n  function AppointmentPositioningStrategy(renderingStrategy) {\n    _classCallCheck(this, AppointmentPositioningStrategy);\n\n    this._renderingStrategy = renderingStrategy;\n  }\n\n  _createClass(AppointmentPositioningStrategy, [{\n    key: \"getRenderingStrategy\",\n    value: function value() {\n      return this._renderingStrategy;\n    }\n  }, {\n    key: \"getDropDownAppointmentWidth\",\n    value: function value(intervalCount, isAllDay) {\n      if (isAllDay || !_type2.default.isDefined(isAllDay)) {\n        return COLLECTOR_WIDTH_IN_PERCENTS * this.getRenderingStrategy().getDefaultCellWidth() / 100;\n      } else {\n        return COLLECTOR_DEFAULT_WIDTH;\n      }\n    }\n  }, {\n    key: \"getCollectorTopOffset\",\n    value: function value() {\n      return COLLECTOR_DEFAULT_OFFSET;\n    }\n  }, {\n    key: \"getCollectorLeftOffset\",\n    value: function value() {\n      return COLLECTOR_DEFAULT_OFFSET;\n    }\n  }, {\n    key: \"getAppointmentDefaultOffset\",\n    value: function value() {\n      if (this.getRenderingStrategy()._isCompactTheme()) {\n        return COMPACT_THEME_APPOINTMENT_DEFAULT_OFFSET;\n      }\n\n      return this.getRenderingStrategy().instance.option(\"_appointmentOffset\");\n    }\n  }, {\n    key: \"getDynamicAppointmentCountPerCell\",\n    value: function value() {\n      var renderingStrategy = this.getRenderingStrategy();\n      var cellHeight = renderingStrategy.instance.fire(\"getCellHeight\");\n\n      var allDayCount = Math.floor((cellHeight - renderingStrategy._getAppointmentDefaultOffset()) / renderingStrategy._getAppointmentDefaultHeight()) || this._getAppointmentMinCount();\n\n      if (renderingStrategy.hasAllDayAppointments()) {\n        return {\n          allDay: \"vertical\" === renderingStrategy.instance._groupOrientation ? allDayCount : renderingStrategy.instance.option(\"_appointmentCountPerCell\"),\n          simple: this._calculateDynamicAppointmentCountPerCell() || this._getAppointmentMinCount()\n        };\n      } else {\n        return allDayCount;\n      }\n    }\n  }, {\n    key: \"getDropDownAppointmentHeight\",\n    value: function value() {\n      return;\n    }\n  }, {\n    key: \"_getAppointmentMinCount\",\n    value: function value() {\n      return APPOINTMENT_MIN_COUNT;\n    }\n  }, {\n    key: \"_calculateDynamicAppointmentCountPerCell\",\n    value: function value() {\n      return Math.floor(this.getRenderingStrategy()._getAppointmentMaxWidth() / APPOINTMENT_INCREASED_WIDTH);\n    }\n  }, {\n    key: \"_getAppointmentDefaultWidth\",\n    value: function value() {\n      return APPOINTMENT_DEFAULT_WIDTH;\n    }\n  }]);\n\n  return AppointmentPositioningStrategy;\n}();\n\nmodule.exports = AppointmentPositioningStrategy;","map":null,"metadata":{},"sourceType":"script"}