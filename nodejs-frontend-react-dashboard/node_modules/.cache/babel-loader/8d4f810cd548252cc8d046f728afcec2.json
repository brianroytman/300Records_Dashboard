{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_area.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar _renderer = require(\"../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _common = require(\"../core/utils/common\");\n\nvar _window = require(\"../core/utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _component_registrator = require(\"../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _type = require(\"../core/utils/type\");\n\nvar _utils = require(\"../events/utils\");\n\nvar eventUtils = _interopRequireWildcard(_utils);\n\nvar _pointer = require(\"../events/pointer\");\n\nvar _pointer2 = _interopRequireDefault(_pointer);\n\nvar _uiEventsEmitterGesture = require(\"../ui/scroll_view/ui.events.emitter.gesture.scroll\");\n\nvar _uiEventsEmitterGesture2 = _interopRequireDefault(_uiEventsEmitterGesture);\n\nvar _size = require(\"../core/utils/size\");\n\nvar _size2 = _interopRequireDefault(_size);\n\nvar _utils2 = require(\"./text_box/utils.scroll\");\n\nvar _text_box = require(\"./text_box\");\n\nvar _text_box2 = _interopRequireDefault(_text_box);\n\nfunction _getRequireWildcardCache() {\n  if (\"function\" !== typeof WeakMap) {\n    return null;\n  }\n\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (null === obj || \"object\" !== _typeof(obj) && \"function\" !== typeof obj) {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar TEXTAREA_CLASS = \"dx-textarea\";\nvar TEXTEDITOR_INPUT_CLASS = \"dx-texteditor-input\";\nvar TEXTEDITOR_INPUT_CLASS_AUTO_RESIZE = \"dx-texteditor-input-auto-resize\";\n\nvar TextArea = _text_box2.default.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      spellcheck: true,\n      minHeight: void 0,\n      maxHeight: void 0,\n      autoResizeEnabled: false\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(TEXTAREA_CLASS);\n    this.callBase();\n    this.setAria(\"multiline\", \"true\");\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this._updateInputHeight();\n\n    this.callBase();\n  },\n  _renderInput: function _renderInput() {\n    this.callBase();\n\n    this._renderScrollHandler();\n  },\n  _createInput: function _createInput() {\n    var $input = (0, _renderer2.default)(\"<textarea>\");\n\n    this._applyInputAttributes($input, this.option(\"inputAttr\"));\n\n    this._updateInputAutoResizeAppearance($input);\n\n    return $input;\n  },\n  _applyInputAttributes: function _applyInputAttributes($input, customAttributes) {\n    $input.attr(customAttributes).addClass(TEXTEDITOR_INPUT_CLASS);\n  },\n  _renderScrollHandler: function _renderScrollHandler() {\n    this._eventY = 0;\n\n    var $input = this._input();\n\n    var initScrollData = (0, _utils2.prepareScrollData)($input, true);\n\n    _events_engine2.default.on($input, eventUtils.addNamespace(_uiEventsEmitterGesture2.default.init, this.NAME), initScrollData, _common.noop);\n\n    _events_engine2.default.on($input, eventUtils.addNamespace(_pointer2.default.down, this.NAME), this._pointerDownHandler.bind(this));\n\n    _events_engine2.default.on($input, eventUtils.addNamespace(_pointer2.default.move, this.NAME), this._pointerMoveHandler.bind(this));\n  },\n  _pointerDownHandler: function _pointerDownHandler(e) {\n    this._eventY = eventUtils.eventData(e).y;\n  },\n  _pointerMoveHandler: function _pointerMoveHandler(e) {\n    var currentEventY = eventUtils.eventData(e).y;\n    var delta = this._eventY - currentEventY;\n\n    if ((0, _utils2.allowScroll)(this._input(), delta)) {\n      e.isScrollingEvent = true;\n      e.stopPropagation();\n    }\n\n    this._eventY = currentEventY;\n  },\n  _renderDimensions: function _renderDimensions() {\n    var $element = this.$element();\n    var element = $element.get(0);\n\n    var width = this._getOptionValue(\"width\", element);\n\n    var height = this._getOptionValue(\"height\", element);\n\n    var minHeight = this.option(\"minHeight\");\n    var maxHeight = this.option(\"maxHeight\");\n    $element.css({\n      minHeight: void 0 !== minHeight ? minHeight : \"\",\n      maxHeight: void 0 !== maxHeight ? maxHeight : \"\",\n      width: width,\n      height: height\n    });\n  },\n  _resetDimensions: function _resetDimensions() {\n    this.$element().css({\n      height: \"\",\n      minHeight: \"\",\n      maxHeight: \"\"\n    });\n  },\n  _renderEvents: function _renderEvents() {\n    if (this.option(\"autoResizeEnabled\")) {\n      _events_engine2.default.on(this._input(), eventUtils.addNamespace(\"input paste\", this.NAME), this._updateInputHeight.bind(this));\n    }\n\n    this.callBase();\n  },\n  _refreshEvents: function _refreshEvents() {\n    _events_engine2.default.off(this._input(), eventUtils.addNamespace(\"input paste\", this.NAME));\n\n    this.callBase();\n  },\n  _getHeightDifference: function _getHeightDifference($input) {\n    return _size2.default.getVerticalOffsets(this._$element.get(0), false) + _size2.default.getVerticalOffsets(this._$textEditorContainer.get(0), false) + _size2.default.getVerticalOffsets(this._$textEditorInputContainer.get(0), false) + _size2.default.getElementBoxParams(\"height\", _window2.default.getWindow().getComputedStyle($input.get(0))).margin;\n  },\n  _updateInputHeight: function _updateInputHeight() {\n    var $input = this._input();\n\n    var autoHeightResizing = void 0 === this.option(\"height\") && this.option(\"autoResizeEnabled\");\n\n    if (!autoHeightResizing) {\n      $input.css(\"height\", \"\");\n      return;\n    } else {\n      this._resetDimensions();\n\n      this._$element.css(\"height\", this._$element.outerHeight());\n    }\n\n    $input.css(\"height\", 0);\n\n    var heightDifference = this._getHeightDifference($input);\n\n    this._renderDimensions();\n\n    var minHeight = this._getBoundaryHeight(\"minHeight\");\n\n    var maxHeight = this._getBoundaryHeight(\"maxHeight\");\n\n    var inputHeight = $input[0].scrollHeight;\n\n    if (void 0 !== minHeight) {\n      inputHeight = Math.max(inputHeight, minHeight - heightDifference);\n    }\n\n    if (void 0 !== maxHeight) {\n      var adjustedMaxHeight = maxHeight - heightDifference;\n      var needScroll = inputHeight > adjustedMaxHeight;\n      inputHeight = Math.min(inputHeight, adjustedMaxHeight);\n\n      this._updateInputAutoResizeAppearance($input, !needScroll);\n    }\n\n    $input.css(\"height\", inputHeight);\n\n    if (autoHeightResizing) {\n      this._$element.css(\"height\", \"auto\");\n    }\n  },\n  _getBoundaryHeight: function _getBoundaryHeight(optionName) {\n    var boundaryValue = this.option(optionName);\n\n    if ((0, _type.isDefined)(boundaryValue)) {\n      return \"number\" === typeof boundaryValue ? boundaryValue : _size2.default.parseHeight(boundaryValue, this._$textEditorContainer.get(0));\n    }\n  },\n  _renderInputType: _common.noop,\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._updateInputHeight();\n    }\n  },\n  _updateInputAutoResizeAppearance: function _updateInputAutoResizeAppearance($input, isAutoResizeEnabled) {\n    if ($input) {\n      var autoResizeEnabled = (0, _common.ensureDefined)(isAutoResizeEnabled, this.option(\"autoResizeEnabled\"));\n      $input.toggleClass(TEXTEDITOR_INPUT_CLASS_AUTO_RESIZE, autoResizeEnabled);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"autoResizeEnabled\":\n        this._updateInputAutoResizeAppearance(this._input(), args.value);\n\n        this._refreshEvents();\n\n        this._updateInputHeight();\n\n        break;\n\n      case \"value\":\n      case \"height\":\n        this.callBase(args);\n\n        this._updateInputHeight();\n\n        break;\n\n      case \"minHeight\":\n      case \"maxHeight\":\n        this._renderDimensions();\n\n        this._updateInputHeight();\n\n        break;\n\n      case \"visible\":\n        this.callBase(args);\n        args.value && this._updateInputHeight();\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\n\n(0, _component_registrator2.default)(\"dxTextArea\", TextArea);\nmodule.exports = TextArea;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}