{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.timeline_month.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar registerComponent = require(\"../../../core/component_registrator\");\n\nvar SchedulerTimeline = require(\"./ui.scheduler.timeline\");\n\nvar dateUtils = require(\"../../../core/utils/date\");\n\nvar TIMELINE_CLASS = \"dx-scheduler-timeline-month\";\nvar DAY_IN_MILLISECONDS = 864e5;\nvar toMs = dateUtils.dateToMilliseconds;\nvar SchedulerTimelineMonth = SchedulerTimeline.inherit({\n  _renderView: function _renderView() {\n    this.callBase();\n\n    this._updateScrollable();\n  },\n  _getElementClass: function _getElementClass() {\n    return TIMELINE_CLASS;\n  },\n  _getDateHeaderTemplate: function _getDateHeaderTemplate() {\n    return this.option(\"dateCellTemplate\");\n  },\n  _getHiddenInterval: function _getHiddenInterval() {\n    return 0;\n  },\n  _getIndicationFirstViewDate: function _getIndicationFirstViewDate() {\n    return dateUtils.trimTime(new Date(this._firstViewDate));\n  },\n  getCellDuration: function getCellDuration() {\n    return toMs(\"day\");\n  },\n  calculateEndViewDate: function calculateEndViewDate(dateOfLastViewCell) {\n    return new Date(dateOfLastViewCell.getTime() + this._calculateDayDuration() * toMs(\"hour\"));\n  },\n  _getCellCount: function _getCellCount() {\n    var currentDate = this.option(\"currentDate\");\n    var cellCount = 0;\n\n    if (this._isWorkSpaceWithCount()) {\n      var intervalCount = this.option(\"intervalCount\");\n\n      for (var i = 1; i <= intervalCount; i++) {\n        cellCount += new Date(currentDate.getFullYear(), currentDate.getMonth() + i, 0).getDate();\n      }\n    } else {\n      cellCount = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n    }\n\n    return cellCount;\n  },\n  _setFirstViewDate: function _setFirstViewDate() {\n    this._firstViewDate = dateUtils.getFirstMonthDate(this.option(\"currentDate\"));\n\n    this._setStartDayHour(this._firstViewDate);\n  },\n  _getFormat: function _getFormat() {\n    return this._formatWeekdayAndDay;\n  },\n  _getDateByIndex: function _getDateByIndex(headerIndex) {\n    var resultDate = new Date(this._firstViewDate);\n    resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n    return resultDate;\n  },\n  _getInterval: function _getInterval() {\n    return DAY_IN_MILLISECONDS;\n  },\n  _getIntervalBetween: function _getIntervalBetween(currentDate) {\n    var firstViewDate = this.getStartViewDate();\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n  },\n  calculateEndDate: function calculateEndDate(startDate) {\n    var startDateCopy = new Date(startDate);\n    return new Date(startDateCopy.setHours(this.option(\"endDayHour\")));\n  },\n  _calculateHiddenInterval: function _calculateHiddenInterval() {\n    return 0;\n  },\n  _getDateByCellIndexes: function _getDateByCellIndexes(rowIndex, cellIndex) {\n    var date = this.callBase(rowIndex, cellIndex);\n\n    this._setStartDayHour(date);\n\n    return date;\n  },\n  needUpdateScrollPosition: function needUpdateScrollPosition(hours, minutes, bounds, date) {\n    return this._dateWithinBounds(bounds, date);\n  },\n  getPositionShift: function getPositionShift() {\n    return {\n      top: 0,\n      left: 0,\n      cellPosition: 0\n    };\n  }\n});\nregisterComponent(\"dxSchedulerTimelineMonth\", SchedulerTimelineMonth);\nmodule.exports = SchedulerTimelineMonth;","map":null,"metadata":{},"sourceType":"script"}