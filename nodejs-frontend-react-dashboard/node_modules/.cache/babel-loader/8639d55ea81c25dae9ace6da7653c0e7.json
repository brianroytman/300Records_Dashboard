{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/ui.scheduler.recurrence_editor.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _guid = require(\"../../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _component_registrator = require(\"../../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _utils = require(\"./utils.recurrence\");\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _editor = require(\"../editor/editor\");\n\nvar _editor2 = _interopRequireDefault(_editor);\n\nvar _radio_group = require(\"../radio_group\");\n\nvar _radio_group2 = _interopRequireDefault(_radio_group);\n\nvar _button_group = require(\"../button_group\");\n\nvar _button_group2 = _interopRequireDefault(_button_group);\n\nvar _number_box = require(\"../number_box\");\n\nvar _number_box2 = _interopRequireDefault(_number_box);\n\nvar _select_box = require(\"../select_box\");\n\nvar _select_box2 = _interopRequireDefault(_select_box);\n\nvar _date_box = require(\"../date_box\");\n\nvar _date_box2 = _interopRequireDefault(_date_box);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _date = require(\"../../localization/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _date3 = require(\"../../core/utils/date\");\n\nvar _date4 = _interopRequireDefault(_date3);\n\nvar _uiScheduler = require(\"./ui.scheduler.publisher_mixin\");\n\nvar _uiScheduler2 = _interopRequireDefault(_uiScheduler);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar RECURRENCE_EDITOR = \"dx-recurrence-editor\";\nvar LABEL_POSTFIX = \"-label\";\nvar WRAPPER_POSTFIX = \"-wrapper\";\nvar RECURRENCE_EDITOR_CONTAINER = \"dx-recurrence-editor-container\";\nvar FREQUENCY_EDITOR = \"dx-recurrence-selectbox-freq\";\nvar INTERVAL_EDITOR = \"dx-recurrence-numberbox-interval\";\nvar INTERVAL_EDITOR_FIELD = \"dx-recurrence-interval-field\";\nvar REPEAT_END_EDITOR = \"dx-recurrence-repeat-end\";\nvar REPEAT_END_EDITOR_CONTAINER = \"dx-recurrence-repeat-end-container\";\nvar REPEAT_TYPE_EDITOR = \"dx-recurrence-radiogroup-repeat-type\";\nvar REPEAT_COUNT_EDITOR = \"dx-recurrence-numberbox-repeat-count\";\nvar REPEAT_UNTIL_DATE_EDITOR = \"dx-recurrence-datebox-until-date\";\nvar REPEAT_ON_EDITOR = \"dx-recurrence-repeat-on\";\nvar REPEAT_ON_MONTH_EDITOR = \"dx-recurrence-repeat-on-month\";\nvar DAY_OF_MONTH = \"dx-recurrence-numberbox-day-of-month\";\nvar REPEAT_ON_YEAR_EDITOR = \"dx-recurrence-repeat-on-year\";\nvar MONTH_OF_YEAR = \"dx-recurrence-selectbox-month-of-year\";\nvar FIELD_CLASS = \"dx-field\";\nvar RECURRENCE_FREQ_FIELD = \"dx-recurrence-freq-field\";\nvar FIELD_LABEL_CLASS = \"dx-field-label\";\nvar FIELD_VALUE_CLASS = \"dx-field-value\";\nvar RECURRENCE_BUTTON_GROUP = \"dx-recurrence-button-group\";\nvar defaultRecurrenceTypeIndex = 1;\nvar frequenciesMessages = [{\n  recurrence: \"dxScheduler-recurrenceHourly\",\n  value: \"hourly\"\n}, {\n  recurrence: \"dxScheduler-recurrenceDaily\",\n  value: \"daily\"\n}, {\n  recurrence: \"dxScheduler-recurrenceWeekly\",\n  value: \"weekly\"\n}, {\n  recurrence: \"dxScheduler-recurrenceMonthly\",\n  value: \"monthly\"\n}, {\n  recurrence: \"dxScheduler-recurrenceYearly\",\n  value: \"yearly\"\n}];\nvar frequencies = frequenciesMessages.map(function (item) {\n  return {\n    text: function text() {\n      return _message2.default.format(item.recurrence);\n    },\n    value: item.value\n  };\n});\nvar repeatEndTypes = [{\n  text: function text() {\n    return _message2.default.format(\"dxScheduler-recurrenceNever\");\n  },\n  value: \"never\"\n}, {\n  text: function text() {\n    return _message2.default.format(\"dxScheduler-recurrenceRepeatOnDate\");\n  },\n  value: \"until\"\n}, {\n  text: function text() {\n    return _message2.default.format(\"dxScheduler-recurrenceRepeatCount\");\n  },\n  value: \"count\"\n}];\nvar days = [\"SU\", \"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\"];\nvar DAYS_IN_WEEK = 7;\n\nvar RecurrenceRule = function () {\n  function RecurrenceRule(recurrence) {\n    _classCallCheck(this, RecurrenceRule);\n\n    this._recurrenceRule = _utils2.default.getRecurrenceRule(recurrence).rule;\n  }\n\n  _createClass(RecurrenceRule, [{\n    key: \"makeRules\",\n    value: function value(string) {\n      this._recurrenceRule = _utils2.default.getRecurrenceRule(string).rule;\n    }\n  }, {\n    key: \"makeRule\",\n    value: function value(field, _value) {\n      if (!_value) {\n        delete this._recurrenceRule[field];\n        return;\n      }\n\n      if ((0, _type.isDefined)(field)) {\n        if (\"until\" === field) {\n          delete this._recurrenceRule.count;\n        }\n\n        if (\"count\" === field) {\n          delete this._recurrenceRule.until;\n        }\n\n        this._recurrenceRule[field] = _value;\n      }\n    }\n  }, {\n    key: \"repeatableRule\",\n    value: function value() {\n      var rules = this._recurrenceRule;\n\n      if (\"count\" in rules) {\n        return \"count\";\n      }\n\n      if (\"until\" in rules) {\n        return \"until\";\n      }\n\n      return null;\n    }\n  }, {\n    key: \"recurrenceString\",\n    value: function value() {\n      return _utils2.default.getRecurrenceString(this._recurrenceRule);\n    }\n  }, {\n    key: \"rules\",\n    value: function value() {\n      return this._recurrenceRule;\n    }\n  }, {\n    key: \"daysFromByDayRule\",\n    value: function value() {\n      return _utils2.default.daysFromByDayRule(this._recurrenceRule);\n    }\n  }]);\n\n  return RecurrenceRule;\n}();\n\nvar RecurrenceEditor = _editor2.default.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      value: null,\n      startDate: new Date(),\n      firstDayOfWeek: void 0\n    });\n  },\n  _getFirstDayOfWeek: function _getFirstDayOfWeek() {\n    var firstDayOfWeek = this.option(\"firstDayOfWeek\");\n    return (0, _type.isDefined)(firstDayOfWeek) ? firstDayOfWeek : _date2.default.firstDayOfWeekIndex();\n  },\n  _createComponent: function _createComponent(element, name) {\n    var config = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n\n    this._extendConfig(config, {\n      readOnly: this.option(\"readOnly\")\n    });\n\n    return this.callBase(element, name, config);\n  },\n  _init: function _init() {\n    this.callBase();\n    this._recurrenceRule = new RecurrenceRule(this.option(\"value\"));\n  },\n  _render: function _render() {\n    this.callBase();\n    this.$element().addClass(RECURRENCE_EDITOR);\n    this._$container = (0, _renderer2.default)(\"<div>\").addClass(RECURRENCE_EDITOR_CONTAINER).appendTo(this.$element());\n\n    this._renderEditors();\n  },\n  changeValueByVisibility: function changeValueByVisibility(value) {\n    if (value) {\n      if (!this.option(\"value\")) {\n        this._handleDefaults();\n      }\n    } else {\n      this._recurrenceRule.makeRules(\"\");\n\n      this.option(\"value\", \"\");\n    }\n  },\n  _handleDefaults: function _handleDefaults() {\n    this._recurrenceRule.makeRule(\"freq\", frequenciesMessages[defaultRecurrenceTypeIndex].value);\n\n    this._changeEditorValue();\n  },\n  _changeEditorValue: function _changeEditorValue() {\n    this.option(\"value\", this._recurrenceRule.recurrenceString() || \"\");\n  },\n  _renderEditors: function _renderEditors() {\n    this._renderFreqEditor();\n\n    this._renderIntervalEditor();\n\n    this._renderRepeatOnEditor();\n\n    this._renderRepeatEndEditor();\n  },\n  _renderFreqEditor: function _renderFreqEditor() {\n    var _this = this;\n\n    var freq = (this._recurrenceRule.rules().freq || frequenciesMessages[defaultRecurrenceTypeIndex].value).toLowerCase();\n    var $freqEditor = (0, _renderer2.default)(\"<div>\").addClass(FREQUENCY_EDITOR).addClass(FIELD_VALUE_CLASS);\n    var $freqEditorLabel = (0, _renderer2.default)(\"<div>\").text(_message2.default.format(\"dxScheduler-editorLabelRecurrence\")).addClass(FIELD_LABEL_CLASS);\n    this._freqEditor = this._createComponent($freqEditor, _select_box2.default, {\n      field: \"freq\",\n      items: frequencies,\n      value: freq,\n      valueExpr: \"value\",\n      displayExpr: \"text\",\n      layout: \"horizontal\",\n      onValueChanged: function onValueChanged(args) {\n        _this._valueChangedHandler(args);\n      }\n    });\n    var $field = (0, _renderer2.default)(\"<div>\").addClass(FIELD_CLASS).addClass(RECURRENCE_FREQ_FIELD).append($freqEditorLabel, $freqEditor);\n\n    this._$container.append($field);\n  },\n  _renderIntervalEditor: function _renderIntervalEditor() {\n    var freq = this._recurrenceRule.rules().freq || \"daily\";\n    var $intervalEditor = (0, _renderer2.default)(\"<div>\").addClass(INTERVAL_EDITOR).addClass(FIELD_VALUE_CLASS);\n    var $intervalEditorLabel = (0, _renderer2.default)(\"<div>\").text(_message2.default.format(\"dxScheduler-recurrenceRepeatEvery\")).addClass(INTERVAL_EDITOR + LABEL_POSTFIX).addClass(FIELD_LABEL_CLASS);\n    this._$intervalTypeLabel = (0, _renderer2.default)(\"<div>\").text(_message2.default.format(\"dxScheduler-recurrenceRepeat\".concat(freq.charAt(0).toUpperCase()).concat(freq.substr(1).toLowerCase()))).addClass(REPEAT_TYPE_EDITOR + LABEL_POSTFIX);\n    var interval = this._recurrenceRule.rules().interval || 1;\n    this._intervalEditor = this._createComponent($intervalEditor, _number_box2.default, {\n      field: \"interval\",\n      min: 1,\n      value: interval,\n      showSpinButtons: true,\n      useLargeSpinButtons: false,\n      onValueChanged: this._valueChangedHandler.bind(this)\n    });\n    var $field = (0, _renderer2.default)(\"<div>\").addClass(FIELD_CLASS).addClass(INTERVAL_EDITOR_FIELD).append($intervalEditorLabel, $intervalEditor, this._$intervalTypeLabel);\n\n    this._$container.append($field);\n\n    this._setAriaDescribedBy(this._intervalEditor, $intervalEditorLabel);\n  },\n  _renderRepeatOnEditor: function _renderRepeatOnEditor() {\n    this._clearRepeatOnEditor();\n\n    var freq = (this._recurrenceRule.rules().freq || \"\").toLowerCase();\n\n    if (!(0, _type.isDefined)(this._$repeatOnEditor)) {\n      this._$repeatOnEditor = (0, _renderer2.default)(\"<div>\").addClass(REPEAT_ON_EDITOR).addClass(FIELD_CLASS).appendTo(this._$container);\n    }\n\n    if (!freq || \"daily\" === freq || \"minutely\" === freq || \"hourly\" === freq) {\n      this._clearRepeatOnEditor();\n\n      this._clearRepeatOnLabel();\n\n      return;\n    }\n\n    if (!(0, _type.isDefined)(this._$repeatOnLabel)) {\n      this._renderRepeatOnLabel(this._$repeatOnEditor);\n    }\n\n    if (\"weekly\" === freq && !this._$repeatOnWeek) {\n      this._renderRepeatOnWeekEditor();\n\n      return;\n    }\n\n    if (\"monthly\" === freq && !this._$repeatOnMonth) {\n      this._renderRepeatOnMonthEditor();\n\n      return;\n    }\n\n    if (\"yearly\" === freq && !this._$repeatOnYear) {\n      this._renderRepeatOnYearEditor();\n\n      return;\n    }\n  },\n  _renderRepeatOnLabel: function _renderRepeatOnLabel($element) {\n    this._$repeatOnLabel = (0, _renderer2.default)(\"<div>\").text(_message2.default.format(\"dxScheduler-recurrenceRepeatOn\")).addClass(REPEAT_ON_EDITOR + LABEL_POSTFIX).addClass(FIELD_LABEL_CLASS);\n    $element.append(this._$repeatOnLabel);\n  },\n  _clearRepeatOnEditor: function _clearRepeatOnEditor() {\n    if ((0, _type.isDefined)(this._$repeatOnWeek)) {\n      this._$repeatOnWeek.detach();\n\n      this._$repeatOnWeek.remove();\n\n      delete this._$repeatOnWeek;\n    }\n\n    if ((0, _type.isDefined)(this._$repeatOnMonth)) {\n      this._$repeatOnMonth.detach();\n\n      this._$repeatOnMonth.remove();\n\n      delete this._$repeatOnMonth;\n    }\n\n    if ((0, _type.isDefined)(this._$repeatOnYear)) {\n      this._$repeatOnYear.detach();\n\n      this._$repeatOnYear.remove();\n\n      delete this._$repeatOnYear;\n    }\n  },\n  _clearRepeatOnLabel: function _clearRepeatOnLabel() {\n    if ((0, _type.isDefined)(this._$repeatOnLabel)) {\n      this._$repeatOnLabel.detach();\n\n      this._$repeatOnLabel.remove();\n\n      delete this._$repeatOnLabel;\n    }\n  },\n  _getDayIndex: function _getDayIndex() {\n    var firstDayOfWeek = this._getFirstDayOfWeek();\n\n    return function (index) {\n      return (index + firstDayOfWeek) % DAYS_IN_WEEK;\n    };\n  },\n  _renderRepeatOnWeekEditor: function _renderRepeatOnWeekEditor() {\n    var _this2 = this;\n\n    var firstDayOfWeek = this._getFirstDayOfWeek();\n\n    var byDay = this._recurrenceRule.rules().byday ? this._recurrenceRule.rules().byday.split(\",\") : days[firstDayOfWeek];\n\n    var localDaysNames = _date2.default.getDayNames(\"abbreviated\");\n\n    var dayNames = days.slice(firstDayOfWeek).concat(days.slice(0, firstDayOfWeek));\n    var itemsButtonGroup = localDaysNames.slice(firstDayOfWeek).concat(localDaysNames.slice(0, firstDayOfWeek)).map(function (item, index) {\n      return {\n        text: item,\n        key: dayNames[index]\n      };\n    });\n    this._$repeatOnWeek = (0, _renderer2.default)(\"<div>\").addClass(RECURRENCE_BUTTON_GROUP).appendTo(this._$repeatOnEditor);\n    this._weekEditor = this._createComponent(this._$repeatOnWeek, _button_group2.default, {\n      items: itemsButtonGroup,\n      selectionMode: \"multiple\",\n      selectedItemKeys: byDay,\n      keyExpr: \"key\",\n      onSelectionChanged: function onSelectionChanged(e) {\n        var selectedKeys = e.component.option(\"selectedItemKeys\");\n\n        _this2._recurrenceRule.makeRule(\"byday\", selectedKeys);\n\n        _this2._changeEditorValue();\n      }\n    });\n  },\n  _daysOfWeekByRules: function _daysOfWeekByRules() {\n    var daysByRule = this._recurrenceRule.daysFromByDayRule();\n\n    if (!daysByRule.length) {\n      daysByRule = [days[this.option(\"startDate\").getDay()]];\n    }\n\n    return daysByRule;\n  },\n  _renderRepeatOnMonthEditor: function _renderRepeatOnMonthEditor() {\n    this._$repeatOnMonth = (0, _renderer2.default)(\"<div>\").addClass(REPEAT_ON_MONTH_EDITOR).addClass(FIELD_VALUE_CLASS).appendTo(this._$repeatOnEditor);\n\n    this._renderDayOfMonthEditor(this._$repeatOnMonth);\n  },\n  _renderRepeatOnYearEditor: function _renderRepeatOnYearEditor() {\n    this._$repeatOnYear = (0, _renderer2.default)(\"<div>\").addClass(REPEAT_ON_YEAR_EDITOR).addClass(FIELD_VALUE_CLASS).appendTo(this._$repeatOnEditor);\n    var months = [];\n\n    var monthsNames = _date2.default.getMonthNames(\"wide\");\n\n    for (var i = 0; i < 12; i++) {\n      months[i] = {\n        value: String(i + 1),\n        text: monthsNames[i]\n      };\n    }\n\n    var byMonth = this._monthOfYearByRules();\n\n    var $monthOfYear = (0, _renderer2.default)(\"<div>\").addClass(MONTH_OF_YEAR).appendTo(this._$repeatOnYear);\n\n    var monthChanged = function monthChanged(args) {\n      this._valueChangedHandler.call(this, args);\n\n      var monthValue = parseInt(args.component.option(\"value\"));\n\n      if (this._dayEditor && monthValue) {\n        var maxAllowedDay = new Date(new Date().getFullYear(), parseInt(monthValue), 0).getDate();\n\n        if (2 === monthValue) {\n          maxAllowedDay = 29;\n        }\n\n        this._dayEditor.option(\"max\", maxAllowedDay);\n      }\n    };\n\n    this._monthEditor = this._createComponent($monthOfYear, _select_box2.default, {\n      field: \"bymonth\",\n      items: months,\n      value: byMonth,\n      displayExpr: \"text\",\n      valueExpr: \"value\",\n      onValueChanged: monthChanged.bind(this)\n    });\n\n    this._renderDayOfMonthEditor(this._$repeatOnYear);\n  },\n  _monthOfYearByRules: function _monthOfYearByRules() {\n    var monthByRule = this._recurrenceRule.rules().bymonth;\n\n    if (!monthByRule) {\n      monthByRule = this.option(\"startDate\").getMonth() + 1;\n    }\n\n    return monthByRule;\n  },\n  _renderDayOfMonthEditor: function _renderDayOfMonthEditor($element) {\n    var byMonthDay = this._dayOfMonthByRules();\n\n    var $dayEditor = (0, _renderer2.default)(\"<div>\").addClass(DAY_OF_MONTH);\n    this._dayEditor = this._createComponent($dayEditor, _number_box2.default, {\n      field: \"bymonthday\",\n      min: 1,\n      max: 31,\n      showSpinButtons: true,\n      useLargeSpinButtons: false,\n      value: byMonthDay,\n      onValueChanged: this._valueChangedHandler.bind(this)\n    });\n    $element.append($dayEditor);\n  },\n  _dayOfMonthByRules: function _dayOfMonthByRules() {\n    var dayByRule = this._recurrenceRule.rules().bymonthday;\n\n    if (!dayByRule) {\n      dayByRule = this.option(\"startDate\").getDate();\n    }\n\n    return dayByRule;\n  },\n  _setAriaDescribedBy: function _setAriaDescribedBy(editor, $label) {\n    var labelId = \"label-\".concat(new _guid2.default());\n    editor.setAria(\"describedby\", labelId);\n    editor.setAria(\"id\", labelId, $label);\n  },\n  _handleRepeatEndDefaults: function _handleRepeatEndDefaults() {\n    this._recurrenceRule.makeRule(\"count\", 1);\n\n    this._changeEditorValue();\n  },\n  _renderRepeatEndEditor: function _renderRepeatEndEditor(rule) {\n    rule = (0, _type.isDefined)(rule) ? rule : this._recurrenceRule.repeatableRule();\n\n    if (!rule) {\n      rule = \"count\";\n    }\n\n    if (!(0, _type.isDefined)(this._$repeatEndEditor)) {\n      (0, _renderer2.default)(\"<div>\").text(_message2.default.format(\"dxScheduler-recurrenceEnd\")).addClass(REPEAT_END_EDITOR_CONTAINER + LABEL_POSTFIX).addClass(FIELD_LABEL_CLASS).appendTo(this._$container);\n      this._$repeatEndEditor = (0, _renderer2.default)(\"<div>\").addClass(REPEAT_END_EDITOR_CONTAINER).addClass(FIELD_CLASS).appendTo(this._$container);\n\n      this._renderRepeatEndTypeEditor();\n    }\n  },\n  _renderRepeatEndTypeEditor: function _renderRepeatEndTypeEditor() {\n    var _this3 = this;\n\n    var repeatType = this._recurrenceRule.repeatableRule() || \"never\";\n    this._$repeatTypeEditor = (0, _renderer2.default)(\"<div>\").addClass(REPEAT_TYPE_EDITOR).addClass(FIELD_VALUE_CLASS).appendTo(this._$repeatEndEditor);\n    this._repeatTypeEditor = this._createComponent(this._$repeatTypeEditor, _radio_group2.default, {\n      items: repeatEndTypes,\n      value: repeatType,\n      displayExpr: \"text\",\n      valueExpr: \"value\",\n      itemTemplate: function itemTemplate(itemData) {\n        if (\"count\" === itemData.value) {\n          return _this3._renderRepeatCountEditor();\n        }\n\n        if (\"until\" === itemData.value) {\n          return _this3._renderRepeatUntilEditor();\n        }\n\n        return _this3._renderDefaultRepeatEnd();\n      },\n      layout: \"vertical\",\n      onValueChanged: this._repeatTypeValueChangedHandler.bind(this)\n    });\n\n    this._disableRepeatEndParts(repeatType);\n  },\n  _renderDefaultRepeatEnd: function _renderDefaultRepeatEnd() {\n    var $editorTemplate = (0, _renderer2.default)(\"<div>\").addClass(REPEAT_END_EDITOR + WRAPPER_POSTFIX);\n    (0, _renderer2.default)(\"<div>\").text(_message2.default.format(\"dxScheduler-recurrenceNever\")).addClass(REPEAT_END_EDITOR + LABEL_POSTFIX).appendTo($editorTemplate);\n    return $editorTemplate;\n  },\n  _repeatTypeValueChangedHandler: function _repeatTypeValueChangedHandler(args) {\n    var value = args.value;\n\n    this._disableRepeatEndParts(value);\n\n    if (\"until\" === value) {\n      this._recurrenceRule.makeRule(value, this._getUntilValue());\n    }\n\n    if (\"count\" === value) {\n      this._recurrenceRule.makeRule(value, this._repeatCountEditor.option(\"value\"));\n    }\n\n    if (\"never\" === value) {\n      this._recurrenceRule.makeRule(\"count\", \"\");\n\n      this._recurrenceRule.makeRule(\"until\", \"\");\n    }\n\n    this._changeEditorValue();\n  },\n  _disableRepeatEndParts: function _disableRepeatEndParts(value) {\n    if (\"until\" === value) {\n      this._repeatCountEditor.option(\"disabled\", true);\n\n      this._repeatUntilDate.option(\"disabled\", false);\n    }\n\n    if (\"count\" === value) {\n      this._repeatCountEditor.option(\"disabled\", false);\n\n      this._repeatUntilDate.option(\"disabled\", true);\n    }\n\n    if (\"never\" === value) {\n      this._repeatCountEditor.option(\"disabled\", true);\n\n      this._repeatUntilDate.option(\"disabled\", true);\n    }\n  },\n  _renderRepeatCountEditor: function _renderRepeatCountEditor() {\n    var repeatCount = this._recurrenceRule.rules().count || 1;\n    var $editorTemplate = (0, _renderer2.default)(\"<div>\").addClass(REPEAT_END_EDITOR + WRAPPER_POSTFIX);\n    (0, _renderer2.default)(\"<div>\").text(_message2.default.format(\"dxScheduler-recurrenceAfter\")).addClass(REPEAT_END_EDITOR + LABEL_POSTFIX).appendTo($editorTemplate);\n    this._$repeatCountEditor = (0, _renderer2.default)(\"<div>\").addClass(REPEAT_COUNT_EDITOR).addClass(FIELD_VALUE_CLASS).appendTo($editorTemplate);\n    (0, _renderer2.default)(\"<div>\").text(_message2.default.format(\"dxScheduler-recurrenceRepeatCount\")).addClass(REPEAT_END_EDITOR + LABEL_POSTFIX).appendTo($editorTemplate);\n    this._repeatCountEditor = this._createComponent(this._$repeatCountEditor, _number_box2.default, {\n      field: \"count\",\n      min: 1,\n      showSpinButtons: true,\n      useLargeSpinButtons: false,\n      value: repeatCount,\n      onValueChanged: this._repeatCountValueChangeHandler.bind(this)\n    });\n    return $editorTemplate;\n  },\n  _repeatCountValueChangeHandler: function _repeatCountValueChangeHandler(args) {\n    if (\"count\" !== this._recurrenceRule.repeatableRule()) {\n      return;\n    }\n\n    var value = args.value;\n\n    this._recurrenceRule.makeRule(\"count\", value);\n\n    this._changeEditorValue();\n  },\n  _formatUntilDate: function _formatUntilDate(date) {\n    if (this._recurrenceRule.rules().until && _date4.default.sameDate(this._recurrenceRule.rules().until, date)) {\n      return date;\n    }\n\n    return _date4.default.setToDayEnd(date);\n  },\n  _renderRepeatUntilEditor: function _renderRepeatUntilEditor() {\n    var repeatUntil = this._recurrenceRule.rules().until || this._formatUntilDate(new Date());\n\n    var $editorTemplate = (0, _renderer2.default)(\"<div>\").addClass(REPEAT_END_EDITOR + WRAPPER_POSTFIX);\n    (0, _renderer2.default)(\"<div>\").text(_message2.default.format(\"dxScheduler-recurrenceOn\")).addClass(REPEAT_END_EDITOR + LABEL_POSTFIX).appendTo($editorTemplate);\n    this._$repeatDateEditor = (0, _renderer2.default)(\"<div>\").addClass(REPEAT_UNTIL_DATE_EDITOR).addClass(FIELD_VALUE_CLASS).appendTo($editorTemplate);\n    this._repeatUntilDate = this._createComponent(this._$repeatDateEditor, _date_box2.default, {\n      field: \"until\",\n      value: repeatUntil,\n      type: \"date\",\n      onValueChanged: this._repeatUntilValueChangeHandler.bind(this),\n      calendarOptions: {\n        firstDayOfWeek: this._getFirstDayOfWeek()\n      }\n    });\n    return $editorTemplate;\n  },\n  _repeatUntilValueChangeHandler: function _repeatUntilValueChangeHandler(args) {\n    if (\"until\" !== this._recurrenceRule.repeatableRule()) {\n      return;\n    }\n\n    var untilDate = this._formatUntilDate(new Date(args.value));\n\n    this._repeatUntilDate.option(\"value\", untilDate);\n\n    this._recurrenceRule.makeRule(\"until\", untilDate);\n\n    this._changeEditorValue();\n  },\n  _valueChangedHandler: function _valueChangedHandler(args) {\n    var value = args.component.option(\"value\");\n    var field = args.component.option(\"field\");\n\n    if (!this.option(\"visible\")) {\n      this.option(\"value\", \"\");\n    } else {\n      this._recurrenceRule.makeRule(field, value);\n\n      this._makeRepeatOnRule(field, value);\n\n      this._changeEditorValue();\n    }\n  },\n  _makeRepeatOnRule: function _makeRepeatOnRule(field, value) {\n    if (\"freq\" !== field) {\n      return;\n    }\n\n    if (\"daily\" === value) {\n      this._recurrenceRule.makeRule(\"byday\", \"\");\n\n      this._recurrenceRule.makeRule(\"bymonth\", \"\");\n\n      this._recurrenceRule.makeRule(\"bymonthday\", \"\");\n    }\n\n    if (\"weekly\" === value) {\n      this._recurrenceRule.makeRule(\"byday\", this._daysOfWeekByRules());\n\n      this._recurrenceRule.makeRule(\"bymonth\", \"\");\n\n      this._recurrenceRule.makeRule(\"bymonthday\", \"\");\n    }\n\n    if (\"monthly\" === value) {\n      this._recurrenceRule.makeRule(\"bymonthday\", this._dayOfMonthByRules());\n\n      this._recurrenceRule.makeRule(\"bymonth\", \"\");\n\n      this._recurrenceRule.makeRule(\"byday\", \"\");\n    }\n\n    if (\"yearly\" === value) {\n      this._recurrenceRule.makeRule(\"bymonthday\", this._dayOfMonthByRules());\n\n      this._recurrenceRule.makeRule(\"bymonth\", this._monthOfYearByRules());\n\n      this._recurrenceRule.makeRule(\"byday\", \"\");\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"value\":\n        this._recurrenceRule.makeRules(args.value);\n\n        this._changeRepeatCountValue();\n\n        this._repeatTypeEditor.option(\"value\", this._recurrenceRule.repeatableRule() || \"never\");\n\n        this._renderRepeatEndEditor();\n\n        this._renderRepeatOnEditor();\n\n        this._changeEditorsValues(this._recurrenceRule.rules());\n\n        this.callBase(args);\n        break;\n\n      case \"startDate\":\n        this._renderRepeatOnEditor();\n\n        this._makeRepeatOnRule(\"freq\", this._recurrenceRule.rules().freq);\n\n        if ((0, _type.isDefined)(this._recurrenceRule.recurrenceString())) {\n          this._changeEditorValue();\n        }\n\n        break;\n\n      case \"firstDayOfWeek\":\n        this._renderRepeatOnEditor();\n\n        if (this._$repeatDateEditor) {\n          this._repeatUntilDate.option(\"calendarOptions.firstDayOfWeek\", this._getFirstDayOfWeek());\n        }\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _changeEditorsValues: function _changeEditorsValues(rules) {\n    this._freqEditor.option(\"value\", (rules.freq || frequenciesMessages[defaultRecurrenceTypeIndex].value).toLowerCase());\n\n    this._changeRepeatTypeLabel();\n\n    this._intervalEditor.option(\"value\", rules.interval || 1);\n\n    this._changeRepeatCountValue();\n\n    this._changeRepeatUntilValue();\n\n    this._changeDayOfMonthValue();\n\n    this._changeMonthOfYearValue();\n  },\n  _changeRepeatTypeLabel: function _changeRepeatTypeLabel() {\n    var $labels = this.$element().find(\".\".concat(REPEAT_TYPE_EDITOR).concat(LABEL_POSTFIX));\n\n    if (!$labels.length) {\n      return;\n    }\n\n    var freq = this._recurrenceRule.rules().freq || \"daily\";\n    (0, _iterator.each)($labels, function (_, $label) {\n      (0, _renderer2.default)($label).text(_message2.default.format(\"dxScheduler-recurrenceRepeat\".concat(freq.charAt(0).toUpperCase()).concat(freq.substr(1).toLowerCase())));\n    });\n  },\n  _changeRepeatCountValue: function _changeRepeatCountValue() {\n    if (!this._$repeatCountEditor) {\n      return;\n    }\n\n    var count = this._recurrenceRule.rules().count || 1;\n\n    this._repeatCountEditor.option(\"value\", count);\n  },\n  _changeRepeatUntilValue: function _changeRepeatUntilValue() {\n    if (!this._$repeatDateEditor) {\n      return;\n    }\n\n    this._repeatUntilDate.option(\"value\", this._getUntilValue());\n  },\n  _getUntilValue: function _getUntilValue() {\n    return this._recurrenceRule.rules().until || this._formatUntilDate(new Date());\n  },\n  _changeDayOfMonthValue: function _changeDayOfMonthValue() {\n    if (!this._$repeatOnMonth && !this._$repeatOnYear) {\n      return;\n    }\n\n    var day = this._dayOfMonthByRules() || 1;\n\n    this._dayEditor.option(\"value\", day);\n  },\n  _changeMonthOfYearValue: function _changeMonthOfYearValue() {\n    if (!this._$repeatOnYear) {\n      return;\n    }\n\n    var month = this._monthOfYearByRules() || 1;\n\n    this._monthEditor.option(\"value\", month);\n  },\n  toggle: function toggle() {\n    this._freqEditor.focus();\n  },\n  setAria: function setAria() {\n    if (this._switchEditor) {\n      this._switchEditor.setAria(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1]);\n    }\n  }\n}).include(_uiScheduler2.default);\n\n(0, _component_registrator2.default)(\"dxRecurrenceEditor\", RecurrenceEditor);\nmodule.exports = RecurrenceEditor;","map":null,"metadata":{},"sourceType":"script"}