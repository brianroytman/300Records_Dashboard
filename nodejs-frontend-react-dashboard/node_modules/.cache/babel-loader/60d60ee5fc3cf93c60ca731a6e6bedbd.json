{"ast":null,"code":"var _jsxFileName = \"/Users/brianroytman/Dev/Youtube_300Entertainment_Dashboard/frontend-light-bootstrap-dashboard-react/src/views/UploadRelease.jsx\";\n\n/*!\n\n=========================================================\n* Light Bootstrap Dashboard React - v1.3.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React, { Component } from \"react\";\nimport { Grid, Row, Col, FormGroup, ControlLabel, FormControl } from \"react-bootstrap\";\nimport { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport { Card } from \"components/Card/Card.jsx\";\nimport { FormInputs } from \"components/FormInputs/FormInputs.jsx\";\nimport { UserCard } from \"components/UserCard/UserCard.jsx\";\nimport Radio from \"components/CustomRadio/CustomRadio.jsx\";\nimport Button from \"components/CustomButton/CustomButton.jsx\";\nimport avatar from \"assets/img/faces/face-3.jpg\";\n/*\nfetch('https://localhost:8000/uploadLive/', {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    firstParam: 'yourValue',\n    secondParam: 'yourOtherValue'\n  })\n});\n*/\n\n/*\nconst singleSchema = single.object({\n  partnerName: single.string().required(),\n  releaseDate: single.string().required(),\n  album: single.string().required(),\n  genre: single.string().required(),\n  upc: single.string().required(),\n  publisher: single.string().required(),\n  publishingYear: single.string().required(),\n  customId: single.string().required(),\n})\n*/\n\nfunction stringifyFormData(fd) {\n  const data = {};\n\n  for (let key of fd.keys()) {\n    data[key] = fd.get(key);\n  }\n\n  return JSON.stringify(data, null, 2);\n}\n\nconst inputParsers = {\n  date(input) {\n    const split = input.split('/');\n    const day = split[1];\n    const month = split[0];\n    const year = split[2];\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n  },\n\n  uppercase(input) {\n    return input.toUpperCase();\n  },\n\n  number(input) {\n    return parseFloat(input);\n  }\n\n};\n\nclass ShakingError extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      key: 0\n    };\n  }\n\n  componentWillReceiveProps() {\n    // update key to remount the component to rerun the animation\n    this.setState({\n      key: ++this.state.key\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: this.state.key,\n      className: \"bounce\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, this.props.text);\n  }\n\n}\n\nclass UploadRelease extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    console.log(\"TEST\"); //setName(e.target.value);\n  }\n\n  handleSubmit(e) {\n    console.log(e);\n    e.preventDefault();\n    console.log(\"SUBMIT BUTTON WAS PRESSED\");\n    const form = e.target;\n    const data = new FormData(form);\n\n    for (let name of data.keys()) {\n      const input = form.elements[name];\n      const parserName = input.dataset.parse;\n      console.log('parser name is', parserName);\n\n      if (parserName) {\n        const parsedValue = inputParsers[parserName](data.get(name));\n        data.set(name, parsedValue);\n      }\n    }\n\n    this.setState({\n      res: stringifyFormData(data),\n      invalid: false,\n      displayErrors: false\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          res = _this$state.res,\n          invalid = _this$state.invalid,\n          displayErrors = _this$state.displayErrors;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      title: \"Edit Release\",\n      content: /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        noValidate: true,\n        className: displayErrors ? 'displayErrors' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"component-outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 23\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(OutlinedInput, {\n        id: \"component-outlined\",\n        value: \"partnerName\",\n        onChange: this.handleChange,\n        label: \"Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(FormControl, {\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"component-outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 22\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(OutlinedInput, {\n        id: \"component-outlined\",\n        value: \"releaseDate\",\n        onChange: this.handleChange,\n        label: \"Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 22\n        }\n      })), /*#__PURE__*/React.createElement(FormControl, {\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 18\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"component-outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(OutlinedInput, {\n        id: \"component-outlined\",\n        value: \"publisher\",\n        onChange: this.handleChange,\n        label: \"Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        bsStyle: \"info\",\n        pullRight: true,\n        fill: true,\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 17\n        }\n      }, \"Upload Release\"))\n      /*\n        <FormInputs\n          ncols={[\"col-md-6\"]}\n          properties={[\n            {\n              label: \"Partner Name\",\n              name:\"partnerName\",\n              type: \"text\",\n              bsClass: \"form-control\",\n              placeholder: \"Partner Name\",\n              defaultValue: \"300 Entertainment\",\n              disabled: true\n            }\n          ]}\n        />\n        <FormInputs\n          ncols={[\"col-md-6\"]}\n          inputProps={{\n            placeholder: \"TEST TEST\"\n          }}\n          properties={[\n            {\n              label: \"Release Date\",\n              type: \"text\",\n              bsClass: \"form-control\",\n              //placeholder: \"MM/DD/YYYY\",\n              defaultValue: \"\",\n              dataparse: \"date\",\n              pattern: \"\\d{2}\\/\\d{2}/\\d{4}\",\n              required: true,\n             }\n          ]}\n        />\n        <FormInputs\n          ncols={[\"col-md-6\"]}\n          onChange={this.handleChange}\n          properties={[\n            {\n              label: \"Album\",\n              type: \"text\",\n              bsClass: \"form-control\",\n              placeholder: \"Album Name\",\n              defaultValue: \"\",\n            }\n          ]}\n        />\n        <FormInputs\n          ncols={[\"col-md-6\"]}\n          properties={[\n            {\n              label: \"Genre\",\n              type: \"text\",\n              bsClass: \"form-control\",\n              placeholder: \"Genre\",\n              defaultValue: \"\"\n            }\n          ]}\n        />\n        <FormInputs\n          ncols={[\"col-md-6\"]}\n          properties={[\n            {\n              label: \"UPC\",\n              type: \"text\",\n              bsClass: \"form-control\",\n              placeholder: \"UPC\",\n              defaultValue: \"\"\n            }\n         ]}\n         />\n         <FormInputs\n           ncols={[\"col-md-6\"]}\n           onChange={alert(\"CHANGE\")}\n           properties={[\n            {\n              label: \"Publisher\",\n              type: \"text\",\n              //onChange: {this.handleChange},\n              bsClass: \"form-control\",\n              placeholder: \"Publisher\",\n              defaultValue: \"\"\n            }\n          ]}\n        />\n        <FormInputs\n          ncols={[\"col-md-6\"]}\n          properties={[\n            {\n              label: \"Publishing Year\",\n              type: \"text\",\n              bsClass: \"form-control\",\n              placeholder: \"Publishing Year\",\n              defaultValue: \"\"\n            }\n          ]}\n       />\n       <FormInputs\n         ncols={[\"col-md-6\"]}\n         properties={[\n            {\n              label: \"Custom ID\",\n              type: \"text\",\n              bsClass: \"form-control\",\n              placeholder: \"Custom ID\",\n              defaultValue: \"\"\n            }\n          ]}\n        />\n        <Button bsStyle=\"info\" pullRight fill type=\"submit\">\n          Upload Release\n        </Button>\n        <div className=\"clearfix\" />\n      </form>\n      */\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"res-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }\n    }, invalid && /*#__PURE__*/React.createElement(ShakingError, {\n      text: \"Form is not valid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }\n    }), !invalid && res && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 15\n      }\n    }, \"Transformed data to be sent:\"), /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 15\n      }\n    }, \"FormData \", res))));\n  }\n\n}\n\nexport default UploadRelease;","map":{"version":3,"sources":["/Users/brianroytman/Dev/Youtube_300Entertainment_Dashboard/frontend-light-bootstrap-dashboard-react/src/views/UploadRelease.jsx"],"names":["React","Component","Grid","Row","Col","FormGroup","ControlLabel","FormControl","TextField","makeStyles","FilledInput","FormHelperText","Input","InputLabel","OutlinedInput","Card","FormInputs","UserCard","Radio","Button","avatar","stringifyFormData","fd","data","key","keys","get","JSON","stringify","inputParsers","date","input","split","day","month","year","uppercase","toUpperCase","number","parseFloat","ShakingError","constructor","state","componentWillReceiveProps","setState","render","props","text","UploadRelease","handleSubmit","bind","handleChange","e","console","log","preventDefault","form","target","FormData","name","elements","parserName","dataset","parse","parsedValue","set","res","invalid","displayErrors"],"mappings":"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","sourcesContent":["/*!\n\n=========================================================\n* Light Bootstrap Dashboard React - v1.3.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React, { Component } from \"react\";\nimport {\n  Grid,\n  Row,\n  Col,\n  FormGroup,\n  ControlLabel,\n  FormControl\n} from \"react-bootstrap\";\n\nimport { TextField } from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nimport { Card } from \"components/Card/Card.jsx\";\nimport { FormInputs } from \"components/FormInputs/FormInputs.jsx\";\nimport { UserCard } from \"components/UserCard/UserCard.jsx\";\nimport Radio from  \"components/CustomRadio/CustomRadio.jsx\";\nimport Button from \"components/CustomButton/CustomButton.jsx\";\n\nimport avatar from \"assets/img/faces/face-3.jpg\";\n\n/*\nfetch('https://localhost:8000/uploadLive/', {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    firstParam: 'yourValue',\n    secondParam: 'yourOtherValue'\n  })\n});\n*/\n\n\n\n/*\nconst singleSchema = single.object({\n  partnerName: single.string().required(),\n  releaseDate: single.string().required(),\n  album: single.string().required(),\n  genre: single.string().required(),\n  upc: single.string().required(),\n  publisher: single.string().required(),\n  publishingYear: single.string().required(),\n  customId: single.string().required(),\n})\n*/\n\nfunction stringifyFormData(fd) {\n  const data = {};\n\tfor (let key of fd.keys()) {\n  \tdata[key] = fd.get(key);\n  }\n  return JSON.stringify(data, null, 2);\n}\n\n\n\nconst inputParsers = {\n  date(input) {\n    const split = input.split('/');\n    const day = split[1]\n    const month = split[0];\n    const year = split[2];\n    return `${year}-${month}-${day}`;\n  },\n  uppercase(input) {\n    return input.toUpperCase();\n  },\n  number(input) {\n    return parseFloat(input);\n  },\n};\n\n\nclass ShakingError extends React.Component {\n\tconstructor() {\n    super();\n    this.state = { key: 0 };\n  }\n\n\tcomponentWillReceiveProps() {\n    // update key to remount the component to rerun the animation\n  \tthis.setState({ key: ++this.state.key });\n  }\n\n  render() {\n  \treturn <div key={this.state.key} className=\"bounce\">{this.props.text}</div>;\n  }\n}\n\nclass UploadRelease extends Component {\n\n\n  constructor(props) {\n      super(props);\n      this.state = {};\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    console.log(\"TEST\");\n    //setName(e.target.value);\n  }\n\n  handleSubmit (e) {\n    console.log(e);\n    e.preventDefault();\n    console.log(\"SUBMIT BUTTON WAS PRESSED\");\n\n    const form = e.target;\n    const data = new FormData(form);\n\n    for (let name of data.keys()) {\n      const input = form.elements[name];\n      const parserName = input.dataset.parse;\n      console.log('parser name is', parserName);\n      if (parserName) {\n        const parsedValue = inputParsers[parserName](data.get(name))\n        data.set(name, parsedValue);\n      }\n    }\n\n    this.setState({\n    \tres: stringifyFormData(data),\n      invalid: false,\n      displayErrors: false,\n    });\n\n  }\n\n  render() {\n    const { res, invalid, displayErrors } = this.state;\n    return (\n      <div className=\"content\">\n        <Grid fluid>\n          <Row>\n            <Col md={8}>\n              <Card\n                title=\"Edit Release\"\n                content={\n                  <form\n                    onSubmit={this.handleSubmit}\n                    noValidate\n                    className={displayErrors ? 'displayErrors' : ''}\n                   >\n                   <FormControl variant=\"outlined\">\n                      <InputLabel htmlFor=\"component-outlined\">Name</InputLabel>\n                      <OutlinedInput\n                        id=\"component-outlined\"\n                        value=\"partnerName\"\n                        onChange={this.handleChange}\n                        label=\"Name\"\n                      />\n                  </FormControl>\n                  <FormControl variant=\"outlined\">\n                     <InputLabel htmlFor=\"component-outlined\">Name</InputLabel>\n                     <OutlinedInput\n                       id=\"component-outlined\"\n                       value=\"releaseDate\"\n                       onChange={this.handleChange}\n                       label=\"Name\"\n                     />\n                 </FormControl>\n                 <FormControl variant=\"outlined\">\n                    <InputLabel htmlFor=\"component-outlined\">Name</InputLabel>\n                    <OutlinedInput\n                      id=\"component-outlined\"\n                      value=\"publisher\"\n                      onChange={this.handleChange}\n                      label=\"Name\"\n                    />\n                </FormControl>\n                <Button bsStyle=\"info\" pullRight fill type=\"submit\">\n                  Upload Release\n                </Button>\n              </form>\n                  /*\n                    <FormInputs\n                      ncols={[\"col-md-6\"]}\n                      properties={[\n                        {\n                          label: \"Partner Name\",\n                          name:\"partnerName\",\n                          type: \"text\",\n                          bsClass: \"form-control\",\n                          placeholder: \"Partner Name\",\n                          defaultValue: \"300 Entertainment\",\n                          disabled: true\n                        }\n                      ]}\n                    />\n                    <FormInputs\n                      ncols={[\"col-md-6\"]}\n                      inputProps={{\n                        placeholder: \"TEST TEST\"\n                      }}\n                      properties={[\n                        {\n                          label: \"Release Date\",\n                          type: \"text\",\n                          bsClass: \"form-control\",\n                          //placeholder: \"MM/DD/YYYY\",\n                          defaultValue: \"\",\n                          dataparse: \"date\",\n                          pattern: \"\\d{2}\\/\\d{2}/\\d{4}\",\n                          required: true,\n\n                        }\n                      ]}\n                    />\n                    <FormInputs\n                      ncols={[\"col-md-6\"]}\n                      onChange={this.handleChange}\n                      properties={[\n                        {\n                          label: \"Album\",\n                          type: \"text\",\n                          bsClass: \"form-control\",\n                          placeholder: \"Album Name\",\n                          defaultValue: \"\",\n                        }\n                      ]}\n                    />\n                    <FormInputs\n                      ncols={[\"col-md-6\"]}\n                      properties={[\n                        {\n                          label: \"Genre\",\n                          type: \"text\",\n                          bsClass: \"form-control\",\n                          placeholder: \"Genre\",\n                          defaultValue: \"\"\n                        }\n                      ]}\n                    />\n                    <FormInputs\n                      ncols={[\"col-md-6\"]}\n                      properties={[\n                        {\n                          label: \"UPC\",\n                          type: \"text\",\n                          bsClass: \"form-control\",\n                          placeholder: \"UPC\",\n                          defaultValue: \"\"\n                        }\n                     ]}\n                     />\n                     <FormInputs\n                       ncols={[\"col-md-6\"]}\n                       onChange={alert(\"CHANGE\")}\n                       properties={[\n                        {\n                          label: \"Publisher\",\n                          type: \"text\",\n                          //onChange: {this.handleChange},\n                          bsClass: \"form-control\",\n                          placeholder: \"Publisher\",\n                          defaultValue: \"\"\n                        }\n                      ]}\n                    />\n                    <FormInputs\n                      ncols={[\"col-md-6\"]}\n                      properties={[\n                        {\n                          label: \"Publishing Year\",\n                          type: \"text\",\n                          bsClass: \"form-control\",\n                          placeholder: \"Publishing Year\",\n                          defaultValue: \"\"\n                        }\n                      ]}\n                   />\n                   <FormInputs\n                     ncols={[\"col-md-6\"]}\n                     properties={[\n                        {\n                          label: \"Custom ID\",\n                          type: \"text\",\n                          bsClass: \"form-control\",\n                          placeholder: \"Custom ID\",\n                          defaultValue: \"\"\n                        }\n                      ]}\n                    />\n                    <Button bsStyle=\"info\" pullRight fill type=\"submit\">\n                      Upload Release\n                    </Button>\n                    <div className=\"clearfix\" />\n                  </form>\n                  */\n                }\n              />\n            </Col>\n          </Row>\n        </Grid>\n        <div className=\"res-block\">\n          {invalid && (\n            <ShakingError text=\"Form is not valid\"/>\n          )}\n          {!invalid && res && (\n            <div>\n              <h3>Transformed data to be sent:</h3>\n              <pre>FormData {res}</pre>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default UploadRelease;\n"]},"metadata":{},"sourceType":"module"}