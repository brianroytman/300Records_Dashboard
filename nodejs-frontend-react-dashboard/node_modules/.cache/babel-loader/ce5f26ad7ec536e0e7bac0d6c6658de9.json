{"ast":null,"code":"/**\r\n * DevExtreme (ui/date_box/ui.date_box.base.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar windowUtils = require(\"../../core/utils/window\");\n\nvar window = windowUtils.getWindow();\n\nvar registerComponent = require(\"../../core/component_registrator\");\n\nvar typeUtils = require(\"../../core/utils/type\");\n\nvar dom = require(\"../../core/utils/dom\");\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar compareVersions = require(\"../../core/utils/version\").compare;\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar support = require(\"../../core/utils/support\");\n\nvar devices = require(\"../../core/devices\");\n\nvar config = require(\"../../core/config\");\n\nvar dateUtils = require(\"../../core/utils/date\");\n\nvar uiDateUtils = require(\"./ui.date_utils\");\n\nvar dateSerialization = require(\"../../core/utils/date_serialization\");\n\nvar DropDownEditor = require(\"../drop_down_editor/ui.drop_down_editor\");\n\nvar dateLocalization = require(\"../../localization/date\");\n\nvar messageLocalization = require(\"../../localization/message\");\n\nvar DATEBOX_CLASS = \"dx-datebox\";\nvar DX_AUTO_WIDTH_CLASS = \"dx-auto-width\";\nvar DX_INVALID_BADGE_CLASS = \"dx-show-invalid-badge\";\nvar DX_CLEAR_BUTTON_CLASS = \"dx-clear-button-area\";\nvar DATEBOX_WRAPPER_CLASS = \"dx-datebox-wrapper\";\nvar PICKER_TYPE = {\n  calendar: \"calendar\",\n  rollers: \"rollers\",\n  list: \"list\",\n  \"native\": \"native\"\n};\nvar TYPE = {\n  date: \"date\",\n  datetime: \"datetime\",\n  time: \"time\"\n};\nvar STRATEGY_NAME = {\n  calendar: \"Calendar\",\n  dateView: \"DateView\",\n  \"native\": \"Native\",\n  calendarWithTime: \"CalendarWithTime\",\n  list: \"List\"\n};\nvar STRATEGY_CLASSES = {\n  Calendar: require(\"./ui.date_box.strategy.calendar\"),\n  DateView: require(\"./ui.date_box.strategy.date_view\"),\n  Native: require(\"./ui.date_box.strategy.native\"),\n  CalendarWithTime: require(\"./ui.date_box.strategy.calendar_with_time\"),\n  List: require(\"./ui.date_box.strategy.list\")\n};\nvar DateBox = DropDownEditor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    return extend(this.callBase(), this._strategy.supportedKeys());\n  },\n  _setDeprecatedOptions: function _setDeprecatedOptions() {\n    this.callBase();\n    extend(this._deprecatedOptions, {\n      maxZoomLevel: {\n        since: \"18.1\",\n        alias: \"calendarOptions.maxZoomLevel\"\n      },\n      minZoomLevel: {\n        since: \"18.1\",\n        alias: \"calendarOptions.minZoomLevel\"\n      }\n    });\n  },\n  _renderButtonContainers: function _renderButtonContainers() {\n    this.callBase.apply(this, arguments);\n\n    this._strategy.customizeButtons();\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      type: \"date\",\n      showAnalogClock: true,\n      value: null,\n      dateSerializationFormat: void 0,\n      min: void 0,\n      max: void 0,\n      displayFormat: null,\n      interval: 30,\n      disabledDates: null,\n      maxZoomLevel: \"month\",\n      minZoomLevel: \"century\",\n      pickerType: PICKER_TYPE.calendar,\n      invalidDateMessage: messageLocalization.format(\"dxDateBox-validation-datetime\"),\n      dateOutOfRangeMessage: messageLocalization.format(\"validation-range\"),\n      applyButtonText: messageLocalization.format(\"OK\"),\n      adaptivityEnabled: false,\n      calendarOptions: {},\n      useHiddenSubmitElement: true\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: {\n        platform: \"ios\"\n      },\n      options: {\n        \"dropDownOptions.showTitle\": true\n      }\n    }, {\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        buttonsLocation: \"bottom after\"\n      }\n    }, {\n      device: function device() {\n        var realDevice = devices.real();\n        var platform = realDevice.platform;\n        return \"ios\" === platform || \"android\" === platform;\n      },\n      options: {\n        pickerType: PICKER_TYPE.native\n      }\n    }, {\n      device: function device(currentDevice) {\n        var realDevice = devices.real();\n        var platform = realDevice.platform;\n        var version = realDevice.version;\n        return \"generic\" === platform && \"desktop\" !== currentDevice.deviceType || \"android\" === platform && compareVersions(version, [4, 4]) < 0;\n      },\n      options: {\n        pickerType: PICKER_TYPE.rollers\n      }\n    }, {\n      device: {\n        platform: \"generic\",\n        deviceType: \"desktop\"\n      },\n      options: {\n        buttonsLocation: \"bottom after\"\n      }\n    }]);\n  },\n  _initOptions: function _initOptions(options) {\n    this._userOptions = extend({}, options);\n    this.callBase(options);\n\n    this._updatePickerOptions();\n  },\n  _updatePickerOptions: function _updatePickerOptions() {\n    var pickerType = this.option(\"pickerType\");\n    var type = this.option(\"type\");\n\n    if (pickerType === PICKER_TYPE.list && (type === TYPE.datetime || type === TYPE.date)) {\n      pickerType = PICKER_TYPE.calendar;\n    }\n\n    if (type === TYPE.time && pickerType === PICKER_TYPE.calendar) {\n      pickerType = PICKER_TYPE.list;\n    }\n\n    this.option(\"showDropDownButton\", \"generic\" !== devices.real().platform || pickerType !== PICKER_TYPE.native);\n    this._pickerType = pickerType;\n  },\n  _init: function _init() {\n    this._initStrategy();\n\n    this.option(extend({}, this._strategy.getDefaultOptions(), this._userOptions));\n    delete this._userOptions;\n    this.callBase();\n  },\n  _toLowerCaseFirstLetter: function _toLowerCaseFirstLetter(string) {\n    return string.charAt(0).toLowerCase() + string.substr(1);\n  },\n  _initStrategy: function _initStrategy() {\n    var strategyName = this._getStrategyName(this._getFormatType());\n\n    var strategy = STRATEGY_CLASSES[strategyName];\n\n    if (!(this._strategy && this._strategy.NAME === strategyName)) {\n      this._strategy = new strategy(this);\n    }\n  },\n  _getFormatType: function _getFormatType() {\n    var currentType = this.option(\"type\");\n    var isTime = /h|m|s/g.test(currentType);\n    var isDate = /d|M|Y/g.test(currentType);\n    var type = \"\";\n\n    if (isDate) {\n      type += TYPE.date;\n    }\n\n    if (isTime) {\n      type += TYPE.time;\n    }\n\n    return type;\n  },\n  _getStrategyName: function _getStrategyName(type) {\n    var pickerType = this._pickerType;\n\n    if (pickerType === PICKER_TYPE.rollers) {\n      return STRATEGY_NAME.dateView;\n    } else {\n      if (pickerType === PICKER_TYPE.native) {\n        return STRATEGY_NAME.native;\n      }\n    }\n\n    if (type === TYPE.date) {\n      return STRATEGY_NAME.calendar;\n    }\n\n    if (type === TYPE.datetime) {\n      return STRATEGY_NAME.calendarWithTime;\n    }\n\n    return STRATEGY_NAME.list;\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(DATEBOX_CLASS);\n    this.callBase();\n\n    this._refreshFormatClass();\n\n    this._refreshPickerTypeClass();\n\n    this._strategy.renderInputMinMax(this._input());\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._formatValidationIcon();\n  },\n  _renderDimensions: function _renderDimensions() {\n    var _this$_strategy;\n\n    this.callBase();\n    this.$element().toggleClass(DX_AUTO_WIDTH_CLASS, !this.option(\"width\"));\n    null === (_this$_strategy = this._strategy) || void 0 === _this$_strategy ? void 0 : _this$_strategy._dimensionChanged();\n  },\n  _refreshFormatClass: function _refreshFormatClass() {\n    var $element = this.$element();\n    each(TYPE, function (_, item) {\n      $element.removeClass(DATEBOX_CLASS + \"-\" + item);\n    });\n    $element.addClass(DATEBOX_CLASS + \"-\" + this.option(\"type\"));\n  },\n  _refreshPickerTypeClass: function _refreshPickerTypeClass() {\n    var $element = this.$element();\n    each(PICKER_TYPE, function (_, item) {\n      $element.removeClass(DATEBOX_CLASS + \"-\" + item);\n    });\n    $element.addClass(DATEBOX_CLASS + \"-\" + this._pickerType);\n  },\n  _formatValidationIcon: function _formatValidationIcon() {\n    if (!windowUtils.hasWindow()) {\n      return;\n    }\n\n    var inputElement = this._input().get(0);\n\n    var isRtlEnabled = this.option(\"rtlEnabled\");\n\n    var clearButtonWidth = this._getClearButtonWidth();\n\n    var longestElementDimensions = this._getLongestElementDimensions();\n\n    var curWidth = parseFloat(window.getComputedStyle(inputElement).width) - clearButtonWidth;\n    var shouldHideValidationIcon = longestElementDimensions.width > curWidth;\n    var style = inputElement.style;\n    this.$element().toggleClass(DX_INVALID_BADGE_CLASS, !shouldHideValidationIcon);\n\n    if (shouldHideValidationIcon) {\n      if (void 0 === this._storedPadding) {\n        this._storedPadding = isRtlEnabled ? longestElementDimensions.leftPadding : longestElementDimensions.rightPadding;\n      }\n\n      isRtlEnabled ? style.paddingLeft = 0 : style.paddingRight = 0;\n    } else {\n      isRtlEnabled ? style.paddingLeft = this._storedPadding + \"px\" : style.paddingRight = this._storedPadding + \"px\";\n    }\n  },\n  _getClearButtonWidth: function _getClearButtonWidth() {\n    var clearButtonWidth = 0;\n\n    if (this._isClearButtonVisible() && \"\" === this._input().val()) {\n      var clearButtonElement = this.$element().find(\".\" + DX_CLEAR_BUTTON_CLASS).get(0);\n      clearButtonWidth = parseFloat(window.getComputedStyle(clearButtonElement).width);\n    }\n\n    return clearButtonWidth;\n  },\n  _getLongestElementDimensions: function _getLongestElementDimensions() {\n    var format = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n\n    var longestValue = dateLocalization.format(uiDateUtils.getLongestDate(format, dateLocalization.getMonthNames(), dateLocalization.getDayNames()), format);\n\n    var $input = this._input();\n\n    var inputElement = $input.get(0);\n    var $longestValueElement = dom.createTextElementHiddenCopy($input, longestValue);\n    var isPaddingStored = void 0 !== this._storedPadding;\n    var storedPadding = !isPaddingStored ? 0 : this._storedPadding;\n    $longestValueElement.appendTo(this.$element());\n    var elementWidth = parseFloat(window.getComputedStyle($longestValueElement.get(0)).width);\n    var rightPadding = parseFloat(window.getComputedStyle(inputElement).paddingRight);\n    var leftPadding = parseFloat(window.getComputedStyle(inputElement).paddingLeft);\n    var necessaryWidth = elementWidth + leftPadding + rightPadding + storedPadding;\n    $longestValueElement.remove();\n    return {\n      width: necessaryWidth,\n      leftPadding: leftPadding,\n      rightPadding: rightPadding\n    };\n  },\n  _getKeyboardListeners: function _getKeyboardListeners() {\n    return this.callBase().concat([this._strategy && this._strategy.getKeyboardListener()]);\n  },\n  _renderPopup: function _renderPopup() {\n    this.callBase();\n\n    this._popup._wrapper().addClass(DATEBOX_WRAPPER_CLASS);\n\n    this._renderPopupWrapper();\n  },\n  _popupConfig: function _popupConfig() {\n    var popupConfig = this.callBase();\n    return extend(this._strategy.popupConfig(popupConfig), {\n      title: this._getPopupTitle(),\n      dragEnabled: false\n    });\n  },\n  _renderPopupWrapper: function _renderPopupWrapper() {\n    if (!this._popup) {\n      return;\n    }\n\n    var $element = this.$element();\n    var classPostfixes = extend({}, TYPE, PICKER_TYPE);\n    each(classPostfixes, function (_, item) {\n      $element.removeClass(DATEBOX_WRAPPER_CLASS + \"-\" + item);\n    }.bind(this));\n\n    this._popup._wrapper().addClass(DATEBOX_WRAPPER_CLASS + \"-\" + this.option(\"type\")).addClass(DATEBOX_WRAPPER_CLASS + \"-\" + this._pickerType);\n  },\n  _renderPopupContent: function _renderPopupContent() {\n    this.callBase();\n\n    this._strategy.renderPopupContent();\n  },\n  _getFirstPopupElement: function _getFirstPopupElement() {\n    return this._strategy.getFirstPopupElement() || this.callBase();\n  },\n  _getLastPopupElement: function _getLastPopupElement() {\n    return this._strategy.getLastPopupElement() || this.callBase();\n  },\n  _popupShowingHandler: function _popupShowingHandler() {\n    this.callBase();\n\n    this._strategy.popupShowingHandler();\n  },\n  _popupHiddenHandler: function _popupHiddenHandler() {\n    this.callBase();\n\n    this._strategy.popupHiddenHandler();\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._formatValidationIcon();\n    }\n  },\n  _clearValueHandler: function _clearValueHandler(e) {\n    this.option(\"text\", \"\");\n    this.callBase(e);\n  },\n  _readOnlyPropValue: function _readOnlyPropValue() {\n    if (this._pickerType === PICKER_TYPE.rollers) {\n      return true;\n    }\n\n    var platform = devices.real().platform;\n    var isCustomValueDisabled = this._isNativeType() && (\"ios\" === platform || \"android\" === platform);\n\n    if (isCustomValueDisabled) {\n      return this.option(\"readOnly\");\n    }\n\n    return this.callBase();\n  },\n  _isClearButtonVisible: function _isClearButtonVisible() {\n    return this.callBase() && !this._isNativeType();\n  },\n  _renderValue: function _renderValue() {\n    var value = this.dateOption(\"value\");\n    this.option(\"text\", this._getDisplayedText(value));\n\n    this._strategy.renderValue();\n\n    return this.callBase();\n  },\n  _setSubmitValue: function _setSubmitValue() {\n    var value = this.dateOption(\"value\");\n    var dateSerializationFormat = this.option(\"dateSerializationFormat\");\n    var submitFormat = uiDateUtils.SUBMIT_FORMATS_MAP[this.option(\"type\")];\n    var submitValue = dateSerializationFormat ? dateSerialization.serializeDate(value, dateSerializationFormat) : uiDateUtils.toStandardDateFormat(value, submitFormat);\n\n    this._getSubmitElement().val(submitValue);\n  },\n  _getDisplayedText: function _getDisplayedText(value) {\n    var mode = this.option(\"mode\");\n    var displayedText;\n\n    if (\"text\" === mode) {\n      var displayFormat = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n\n      displayedText = dateLocalization.format(value, displayFormat);\n    } else {\n      var format = this._getFormatByMode(mode);\n\n      if (format) {\n        displayedText = dateLocalization.format(value, format);\n      } else {\n        displayedText = uiDateUtils.toStandardDateFormat(value, mode);\n      }\n    }\n\n    return displayedText;\n  },\n  _getFormatByMode: function _getFormatByMode(mode) {\n    return support.inputType(mode) ? null : uiDateUtils.FORMATS_MAP[mode];\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e) {\n    var text = this.option(\"text\");\n    var currentValue = this.dateOption(\"value\");\n\n    if (text === this._getDisplayedText(currentValue)) {\n      this._applyInternalValidation(currentValue);\n\n      return;\n    }\n\n    var parsedDate = this._getParsedDate(text);\n\n    var value = currentValue || this._getDateByDefault();\n\n    var type = this.option(\"type\");\n    var newValue = uiDateUtils.mergeDates(value, parsedDate, type);\n    var date = parsedDate && \"time\" === type ? newValue : parsedDate;\n\n    if (this._applyInternalValidation(date)) {\n      var displayedText = this._getDisplayedText(newValue);\n\n      if (value && newValue && value.getTime() === newValue.getTime() && displayedText !== text) {\n        this._renderValue();\n      } else {\n        this.dateValue(newValue, e);\n      }\n    }\n  },\n  _getDateByDefault: function _getDateByDefault() {\n    return this._strategy.useCurrentDateByDefault() && this._strategy.getDefaultDate();\n  },\n  _getParsedDate: function _getParsedDate(text) {\n    var displayFormat = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n\n    var parsedText = this._strategy.getParsedText(text, displayFormat);\n\n    return typeUtils.isDefined(parsedText) ? parsedText : void 0;\n  },\n  _applyInternalValidation: function _applyInternalValidation(value) {\n    var text = this.option(\"text\");\n    var hasText = !!text && null !== value;\n    var isDate = !!value && typeUtils.isDate(value) && !isNaN(value.getTime());\n    var isDateInRange = isDate && dateUtils.dateInRange(value, this.dateOption(\"min\"), this.dateOption(\"max\"), this.option(\"type\"));\n    var isValid = !hasText && !value || isDateInRange;\n    var validationMessage = \"\";\n\n    if (!isDate) {\n      validationMessage = this.option(\"invalidDateMessage\");\n    } else {\n      if (!isDateInRange) {\n        validationMessage = this.option(\"dateOutOfRangeMessage\");\n      }\n    }\n\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: validationMessage\n      }\n    });\n    return isValid;\n  },\n  _applyCustomValidation: function _applyCustomValidation(value) {\n    this.validationRequest.fire({\n      editor: this,\n      value: this._serializeDate(value)\n    });\n  },\n  _isValueChanged: function _isValueChanged(newValue) {\n    var oldValue = this.dateOption(\"value\");\n    var oldTime = oldValue && oldValue.getTime();\n    var newTime = newValue && newValue.getTime();\n    return oldTime !== newTime;\n  },\n  _isTextChanged: function _isTextChanged(newValue) {\n    var oldText = this.option(\"text\");\n    var newText = newValue && this._getDisplayedText(newValue) || \"\";\n    return oldText !== newText;\n  },\n  _renderProps: function _renderProps() {\n    this.callBase();\n\n    this._input().attr(\"autocomplete\", \"off\");\n  },\n  _renderOpenedState: function _renderOpenedState() {\n    if (!this._isNativeType()) {\n      this.callBase();\n    }\n\n    if (this._strategy.isAdaptivityChanged()) {\n      this._refreshStrategy();\n    }\n\n    this._strategy.renderOpenedState();\n  },\n  _getPopupTitle: function _getPopupTitle() {\n    var placeholder = this.option(\"placeholder\");\n\n    if (placeholder) {\n      return placeholder;\n    }\n\n    var type = this.option(\"type\");\n\n    if (type === TYPE.time) {\n      return messageLocalization.format(\"dxDateBox-simulatedDataPickerTitleTime\");\n    }\n\n    if (type === TYPE.date || type === TYPE.datetime) {\n      return messageLocalization.format(\"dxDateBox-simulatedDataPickerTitleDate\");\n    }\n\n    return \"\";\n  },\n  _renderPlaceholder: function _renderPlaceholder() {\n    this._popup && this._popup.option(\"title\", this._getPopupTitle());\n    this.callBase();\n  },\n  _refreshStrategy: function _refreshStrategy() {\n    this._strategy.dispose();\n\n    this._initStrategy();\n\n    this.option(this._strategy.getDefaultOptions());\n\n    this._refresh();\n  },\n  _applyButtonHandler: function _applyButtonHandler(e) {\n    var value = this._strategy.getValue();\n\n    if (this._applyInternalValidation(value)) {\n      this.dateValue(value, e.event);\n    }\n\n    this.callBase();\n  },\n  _dispose: function _dispose() {\n    this._strategy && this._strategy.dispose();\n    this.callBase();\n  },\n  _isNativeType: function _isNativeType() {\n    return this._pickerType === PICKER_TYPE.native;\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"showClearButton\":\n      case \"buttons\":\n        this.callBase.apply(this, arguments);\n\n        this._formatValidationIcon();\n\n        break;\n\n      case \"pickerType\":\n        this._updatePickerOptions({\n          pickerType: args.value\n        });\n\n        this._refreshStrategy();\n\n        this._refreshPickerTypeClass();\n\n        this._invalidate();\n\n        break;\n\n      case \"type\":\n        this._updatePickerOptions({\n          format: args.value\n        });\n\n        this._refreshStrategy();\n\n        this._refreshFormatClass();\n\n        this._renderPopupWrapper();\n\n        this._formatValidationIcon();\n\n        this._updateValue();\n\n        break;\n\n      case \"placeholder\":\n        this._renderPlaceholder();\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        var isValid = this.option(\"isValid\");\n\n        this._applyInternalValidation(this.dateOption(\"value\"));\n\n        if (!isValid) {\n          this._applyCustomValidation(this.dateOption(\"value\"));\n        }\n\n        this._invalidate();\n\n        break;\n\n      case \"dateSerializationFormat\":\n      case \"interval\":\n      case \"disabledDates\":\n      case \"calendarOptions\":\n      case \"minZoomLevel\":\n      case \"maxZoomLevel\":\n        this._invalidate();\n\n        break;\n\n      case \"displayFormat\":\n        this.option(\"text\", this._getDisplayedText(this.dateOption(\"value\")));\n\n        this._renderInputValue();\n\n        break;\n\n      case \"text\":\n        this._strategy.textChangedHandler(args.value);\n\n        this.callBase.apply(this, arguments);\n        break;\n\n      case \"isValid\":\n        this.callBase.apply(this, arguments);\n\n        this._formatValidationIcon();\n\n        break;\n\n      case \"showDropDownButton\":\n        this._formatValidationIcon();\n\n        this.callBase.apply(this, arguments);\n        break;\n\n      case \"readOnly\":\n        this.callBase.apply(this, arguments);\n\n        this._formatValidationIcon();\n\n        break;\n\n      case \"invalidDateMessage\":\n      case \"dateOutOfRangeMessage\":\n      case \"adaptivityEnabled\":\n      case \"showAnalogClock\":\n        break;\n\n      default:\n        this.callBase.apply(this, arguments);\n    }\n  },\n  _getSerializationFormat: function _getSerializationFormat() {\n    var value = this.option(\"value\");\n\n    if (this.option(\"dateSerializationFormat\") && config().forceIsoDateParsing) {\n      return this.option(\"dateSerializationFormat\");\n    }\n\n    if (typeUtils.isNumeric(value)) {\n      return \"number\";\n    }\n\n    if (!typeUtils.isString(value)) {\n      return;\n    }\n\n    return dateSerialization.getDateSerializationFormat(value);\n  },\n  _updateValue: function _updateValue(value) {\n    this.callBase();\n\n    this._applyInternalValidation(value || this.dateOption(\"value\"));\n  },\n  dateValue: function dateValue(value, dxEvent) {\n    var isValueChanged = this._isValueChanged(value);\n\n    if (isValueChanged && dxEvent) {\n      this._saveValueChangeEvent(dxEvent);\n    }\n\n    if (!isValueChanged) {\n      if (this._isTextChanged(value)) {\n        this._updateValue(value);\n      } else {\n        if (\"\" === this.option(\"text\")) {\n          this._applyCustomValidation(value);\n        }\n      }\n    }\n\n    return this.dateOption(\"value\", value);\n  },\n  dateOption: function dateOption(optionName, value) {\n    if (1 === arguments.length) {\n      return dateSerialization.deserializeDate(this.option(optionName));\n    }\n\n    this.option(optionName, this._serializeDate(value));\n  },\n  _serializeDate: function _serializeDate(date) {\n    var serializationFormat = this._getSerializationFormat();\n\n    return dateSerialization.serializeDate(date, serializationFormat);\n  },\n  reset: function reset() {\n    this.callBase();\n\n    this._updateValue(this.dateOption(\"value\"));\n  }\n});\nregisterComponent(\"dxDateBox\", DateBox);\nmodule.exports = DateBox;","map":null,"metadata":{},"sourceType":"script"}