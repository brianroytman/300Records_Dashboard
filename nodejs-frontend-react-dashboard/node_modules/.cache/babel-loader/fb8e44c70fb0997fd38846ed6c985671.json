{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/appointmentDragBehavior.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _draggable = require(\"../draggable\");\n\nvar _draggable2 = _interopRequireDefault(_draggable);\n\nvar _translator = require(\"../../animation/translator\");\n\nvar _translator2 = _interopRequireDefault(_translator);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _position = require(\"../../core/utils/position\");\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar FIXED_CONTAINER_PROP_NAME = \"fixedContainer\";\nvar APPOINTMENT_ITEM_CLASS = \"dx-scheduler-appointment\";\n\nvar AppointmentDragBehavior = function () {\n  function AppointmentDragBehavior(scheduler) {\n    _classCallCheck(this, AppointmentDragBehavior);\n\n    this.scheduler = scheduler;\n    this.appointments = scheduler._appointments;\n    this.initialPosition = {\n      left: 0,\n      top: 0\n    };\n    this.currentAppointment = null;\n  }\n\n  _createClass(AppointmentDragBehavior, [{\n    key: \"isAllDay\",\n    value: function value(appointment) {\n      return appointment.data(\"dxAppointmentSettings\").allDay;\n    }\n  }, {\n    key: \"getContainerShift\",\n    value: function value(isAllDay) {\n      var appointmentContainer = this.appointments._getAppointmentContainer(isAllDay);\n\n      var dragAndDropContainer = this.appointments.option(FIXED_CONTAINER_PROP_NAME);\n      var appointmentContainerRect = (0, _position.getBoundingRect)(appointmentContainer[0]);\n      var dragAndDropContainerRect = (0, _position.getBoundingRect)(dragAndDropContainer[0]);\n      return {\n        left: appointmentContainerRect.left - dragAndDropContainerRect.left,\n        top: appointmentContainerRect.top - dragAndDropContainerRect.top\n      };\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function value(e) {\n      this.initialPosition = _translator2.default.locate((0, _renderer2.default)(e.itemElement));\n      this.appointments.notifyObserver(\"hideAppointmentTooltip\");\n    }\n  }, {\n    key: \"onDragMove\",\n    value: function value(e) {\n      if (e.fromComponent !== e.toComponent) {\n        this.appointments.notifyObserver(\"removeDroppableCellClass\");\n      }\n    }\n  }, {\n    key: \"getAppointmentElement\",\n    value: function value(e) {\n      var itemElement = e.event.data && e.event.data.itemElement || e.itemElement;\n      return (0, _renderer2.default)(itemElement);\n    }\n  }, {\n    key: \"onDragEnd\",\n    value: function value(e) {\n      var $appointment = this.getAppointmentElement(e);\n\n      var container = this.appointments._getAppointmentContainer(this.isAllDay($appointment));\n\n      container.append($appointment);\n      this.currentAppointment = $appointment;\n      this.appointments.notifyObserver(\"updateAppointmentAfterDrag\", {\n        event: e,\n        data: this.appointments._getItemData($appointment),\n        $appointment: $appointment,\n        coordinates: this.initialPosition\n      });\n    }\n  }, {\n    key: \"getItemData\",\n    value: function value(appointment) {\n      var itemData = (0, _renderer2.default)(appointment).data(_constants.LIST_ITEM_DATA_KEY);\n      return itemData && itemData.data || this.appointments._getItemData(appointment);\n    }\n  }, {\n    key: \"getItemSettings\",\n    value: function value(appointment) {\n      var itemData = (0, _renderer2.default)(appointment).data(_constants.LIST_ITEM_DATA_KEY);\n      return itemData && itemData.settings || [];\n    }\n  }, {\n    key: \"createDragStartHandler\",\n    value: function value(options, appointmentDragging) {\n      var _this = this;\n\n      return function (e) {\n        e.itemData = _this.getItemData(e.itemElement);\n        e.itemSettings = _this.getItemSettings(e.itemElement);\n        appointmentDragging.onDragStart && appointmentDragging.onDragStart(e);\n\n        if (!e.cancel) {\n          options.onDragStart(e);\n        }\n      };\n    }\n  }, {\n    key: \"createDragMoveHandler\",\n    value: function value(options, appointmentDragging) {\n      return function (e) {\n        appointmentDragging.onDragMove && appointmentDragging.onDragMove(e);\n\n        if (!e.cancel) {\n          options.onDragMove(e);\n        }\n      };\n    }\n  }, {\n    key: \"createDragEndHandler\",\n    value: function value(options, appointmentDragging) {\n      return function (e) {\n        appointmentDragging.onDragEnd && appointmentDragging.onDragEnd(e);\n\n        if (!e.cancel) {\n          options.onDragEnd(e);\n\n          if (e.fromComponent !== e.toComponent) {\n            appointmentDragging.onRemove && appointmentDragging.onRemove(e);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"createDropHandler\",\n    value: function value(appointmentDragging) {\n      var _this2 = this;\n\n      return function (e) {\n        e.itemData = (0, _extend.extend)({}, e.itemData, _this2.appointments.invoke(\"getUpdatedData\", {\n          data: e.itemData\n        }));\n\n        if (e.fromComponent !== e.toComponent) {\n          appointmentDragging.onAdd && appointmentDragging.onAdd(e);\n        }\n      };\n    }\n  }, {\n    key: \"addTo\",\n    value: function value(container, config) {\n      var appointmentDragging = this.scheduler.option(\"appointmentDragging\") || {};\n      var options = (0, _extend.extend)({\n        component: this.scheduler,\n        contentTemplate: null,\n        filter: \".\".concat(APPOINTMENT_ITEM_CLASS),\n        immediate: false,\n        onDragStart: this.onDragStart.bind(this),\n        onDragMove: this.onDragMove.bind(this),\n        onDragEnd: this.onDragEnd.bind(this)\n      }, config);\n\n      this.appointments._createComponent(container, _draggable2.default, (0, _extend.extend)({}, options, appointmentDragging, {\n        onDragStart: this.createDragStartHandler(options, appointmentDragging),\n        onDragMove: this.createDragMoveHandler(options, appointmentDragging),\n        onDragEnd: this.createDragEndHandler(options, appointmentDragging),\n        onDrop: this.createDropHandler(appointmentDragging)\n      }));\n    }\n  }, {\n    key: \"moveBack\",\n    value: function value() {\n      if (this.currentAppointment && void 0 !== this.initialPosition.left && void 0 !== this.initialPosition.top) {\n        _translator2.default.move(this.currentAppointment, this.initialPosition);\n      }\n    }\n  }]);\n\n  return AppointmentDragBehavior;\n}();\n\nexports.default = AppointmentDragBehavior;\nmodule.exports = AppointmentDragBehavior;","map":null,"metadata":{},"sourceType":"script"}