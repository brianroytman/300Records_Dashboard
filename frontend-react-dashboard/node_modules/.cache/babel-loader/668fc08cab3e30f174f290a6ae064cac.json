{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/appointmentPopup.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _popup = require(\"../popup\");\n\nvar _popup2 = _interopRequireDefault(_popup);\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _devices = require(\"../../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _dom = require(\"../../core/utils/dom\");\n\nvar _dom2 = _interopRequireDefault(_dom);\n\nvar _object = require(\"../../core/utils/object\");\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _date = require(\"../../core/utils/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _uiScheduler = require(\"./ui.scheduler.appointment_form\");\n\nvar _ui = require(\"./ui.loading\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar toMs = _date2.default.dateToMilliseconds;\nvar WIDGET_CLASS = \"dx-scheduler\";\nvar APPOINTMENT_POPUP_CLASS = \"\".concat(WIDGET_CLASS, \"-appointment-popup\");\nvar APPOINTMENT_POPUP_WIDTH = 485;\nvar APPOINTMENT_POPUP_WIDTH_WITH_RECURRENCE = 970;\nvar APPOINTMENT_POPUP_FULLSCREEN_WINDOW_WIDTH = 1e3;\nvar APPOINTMENT_POPUP_FULLSCREEN_WINDOW_WIDTH_MOBILE = 500;\nvar APPOINTMENT_POPUP_WIDTH_MOBILE = 350;\nvar TOOLBAR_ITEM_AFTER_LOCATION = \"after\";\nvar TOOLBAR_ITEM_BEFORE_LOCATION = \"before\";\n\nvar AppointmentPopup = function () {\n  function AppointmentPopup(scheduler) {\n    _classCallCheck(this, AppointmentPopup);\n\n    this.scheduler = scheduler;\n    this._popup = null;\n    this._appointmentForm = null;\n    this.state = {\n      lastEditData: null,\n      saveChangesLocker: false,\n      appointment: {\n        data: null,\n        processTimeZone: false,\n        isEmptyText: false,\n        isEmptyDescription: false\n      }\n    };\n  }\n\n  _createClass(AppointmentPopup, [{\n    key: \"show\",\n    value: function value() {\n      var data = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      var isDoneButtonVisible = arguments.length > 1 ? arguments[1] : void 0;\n      var processTimeZone = arguments.length > 2 ? arguments[2] : void 0;\n      this.state.appointment.data = data;\n      this.state.appointment.processTimeZone = processTimeZone;\n\n      if (!this._popup) {\n        var popupConfig = this._createPopupConfig();\n\n        this._popup = this._createPopup(popupConfig);\n      } else {\n        this._updateForm();\n      }\n\n      this._popup.option(\"toolbarItems\", this._createPopupToolbarItems(isDoneButtonVisible));\n\n      this._popup.show();\n    }\n  }, {\n    key: \"hide\",\n    value: function value() {\n      this._popup.hide();\n    }\n  }, {\n    key: \"isVisible\",\n    value: function value() {\n      return this._popup ? this._popup.option(\"visible\") : false;\n    }\n  }, {\n    key: \"dispose\",\n    value: function value() {\n      if (this._$popup) {\n        this._popup.$element().remove();\n\n        this._$popup = null;\n      }\n    }\n  }, {\n    key: \"_createPopup\",\n    value: function value(options) {\n      var popupElement = (0, _renderer2.default)(\"<div>\").addClass(APPOINTMENT_POPUP_CLASS).appendTo(this.scheduler.$element());\n      return this.scheduler._createComponent(popupElement, _popup2.default, options);\n    }\n  }, {\n    key: \"_createPopupConfig\",\n    value: function value() {\n      var _this = this;\n\n      return {\n        height: \"auto\",\n        maxHeight: \"100%\",\n        showCloseButton: false,\n        showTitle: false,\n        onHiding: function onHiding() {\n          _this.scheduler.focus();\n        },\n        contentTemplate: function contentTemplate() {\n          return _this._createPopupContent();\n        },\n        onShowing: this._onShowing.bind(this),\n        defaultOptionsRules: [{\n          device: function device() {\n            return _devices2.default.current().android;\n          },\n          options: {\n            showTitle: false\n          }\n        }]\n      };\n    }\n  }, {\n    key: \"_onShowing\",\n    value: function value(e) {\n      var _this2 = this;\n\n      var arg = {\n        form: this._appointmentForm,\n        popup: this._popup,\n        appointmentData: this.state.appointment.data,\n        cancel: false\n      };\n\n      this.scheduler._actions.onAppointmentFormOpening(arg);\n\n      this.scheduler._processActionResult(arg, function (canceled) {\n        if (canceled) {\n          e.cancel = true;\n        } else {\n          _this2.updatePopupFullScreenMode();\n        }\n      });\n    }\n  }, {\n    key: \"_createPopupContent\",\n    value: function value() {\n      var formElement = (0, _renderer2.default)(\"<div>\");\n      this._appointmentForm = this._createForm(formElement);\n\n      this._updateForm();\n\n      return formElement;\n    }\n  }, {\n    key: \"_createAppointmentFormData\",\n    value: function value(appointmentData) {\n      var recurrenceRule = this.scheduler.fire(\"getField\", \"recurrenceRule\", appointmentData);\n      var result = (0, _extend.extend)(true, {\n        repeat: !!recurrenceRule\n      }, appointmentData);\n      (0, _iterator.each)(this.scheduler._resourcesManager.getResourcesFromItem(result, true) || {}, function (name, value) {\n        return result[name] = value;\n      });\n      return result;\n    }\n  }, {\n    key: \"_createForm\",\n    value: function value(element) {\n      var expr = this.scheduler._dataAccessors.expr;\n      var resources = this.scheduler.option(\"resources\");\n\n      var allowTimeZoneEditing = this._getAllowTimeZoneEditing();\n\n      var appointmentData = this.state.appointment.data;\n\n      var formData = this._createAppointmentFormData(appointmentData);\n\n      var readOnly = this._isReadOnly(appointmentData);\n\n      _uiScheduler.AppointmentForm.prepareAppointmentFormEditors(expr, this.scheduler, this.triggerResize.bind(this), this.changeSize.bind(this), formData, allowTimeZoneEditing, readOnly);\n\n      if (resources && resources.length) {\n        _uiScheduler.AppointmentForm.concatResources(this.scheduler._resourcesManager.getEditors());\n      }\n\n      return _uiScheduler.AppointmentForm.create(this.scheduler._createComponent.bind(this.scheduler), element, readOnly, formData);\n    }\n  }, {\n    key: \"_getAllowTimeZoneEditing\",\n    value: function value() {\n      var scheduler = this.scheduler;\n      return scheduler.option(\"editing.allowTimeZoneEditing\") || scheduler.option(\"editing.allowEditingTimeZones\");\n    }\n  }, {\n    key: \"_isReadOnly\",\n    value: function value(data) {\n      if (data && data.disabled) {\n        return true;\n      }\n\n      return this.scheduler._editAppointmentData ? !this.scheduler._editing.allowUpdating : false;\n    }\n  }, {\n    key: \"_updateForm\",\n    value: function value() {\n      var _this$state$appointme = this.state.appointment,\n          data = _this$state$appointme.data,\n          processTimeZone = _this$state$appointme.processTimeZone;\n      var allDay = this.scheduler.fire(\"getField\", \"allDay\", data);\n      var startDate = this.scheduler.fire(\"getField\", \"startDate\", data);\n      var endDate = this.scheduler.fire(\"getField\", \"endDate\", data);\n      this.state.appointment.isEmptyText = void 0 === data || void 0 === data.text;\n      this.state.appointment.isEmptyDescription = void 0 === data || void 0 === data.description;\n      var formData = (0, _extend.extend)({}, {\n        text: \"\",\n        description: \"\",\n        recurrenceRule: \"\"\n      }, this._createAppointmentFormData(data));\n\n      if (processTimeZone) {\n        if (startDate) {\n          startDate = this.scheduler.fire(\"convertDateByTimezone\", startDate);\n          this.scheduler.fire(\"setField\", \"startDate\", formData, startDate);\n        }\n\n        if (endDate) {\n          endDate = this.scheduler.fire(\"convertDateByTimezone\", endDate);\n          this.scheduler.fire(\"setField\", \"endDate\", formData, endDate);\n        }\n      }\n\n      var _this$scheduler$_data = this.scheduler._dataAccessors.expr,\n          startDateExpr = _this$scheduler$_data.startDateExpr,\n          endDateExpr = _this$scheduler$_data.endDateExpr,\n          recurrenceRuleExpr = _this$scheduler$_data.recurrenceRuleExpr;\n\n      var recurrenceEditorOptions = this._getEditorOptions(recurrenceRuleExpr, _uiScheduler.APPOINTMENT_FORM_GROUP_NAMES.Recurrence);\n\n      this._setEditorOptions(recurrenceRuleExpr, _uiScheduler.APPOINTMENT_FORM_GROUP_NAMES.Recurrence, (0, _extend.extend)({}, recurrenceEditorOptions, {\n        startDate: startDate\n      }));\n\n      this._appointmentForm.option(\"readOnly\", this._isReadOnly(data));\n\n      _uiScheduler.AppointmentForm.updateFormData(this._appointmentForm, formData);\n\n      _uiScheduler.AppointmentForm.setEditorsType(this._appointmentForm, startDateExpr, endDateExpr, allDay);\n    }\n  }, {\n    key: \"_getEditorOptions\",\n    value: function value(name, groupName) {\n      var editor = this._appointmentForm.itemOption(\"\".concat(groupName, \".\").concat(name));\n\n      return editor ? editor.editorOptions : {};\n    }\n  }, {\n    key: \"_setEditorOptions\",\n    value: function value(name, groupName, options) {\n      var editorPath = \"\".concat(groupName, \".\").concat(name);\n\n      var editor = this._appointmentForm.itemOption(editorPath);\n\n      editor && this._appointmentForm.itemOption(editorPath, \"editorOptions\", options);\n    }\n  }, {\n    key: \"_isDeviceMobile\",\n    value: function value() {\n      return \"desktop\" !== _devices2.default.current().deviceType;\n    }\n  }, {\n    key: \"_isPopupFullScreenNeeded\",\n    value: function value() {\n      var width = this._tryGetWindowWidth();\n\n      if (width) {\n        return this._isDeviceMobile() ? width < APPOINTMENT_POPUP_FULLSCREEN_WINDOW_WIDTH_MOBILE : width < APPOINTMENT_POPUP_FULLSCREEN_WINDOW_WIDTH;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_tryGetWindowWidth\",\n    value: function value() {\n      if (_window2.default.hasWindow()) {\n        var window = _window2.default.getWindow();\n\n        return (0, _renderer2.default)(window).width();\n      }\n    }\n  }, {\n    key: \"triggerResize\",\n    value: function value() {\n      this._popup && _dom2.default.triggerResizeEvent(this._popup.$element());\n    }\n  }, {\n    key: \"_getMaxWidth\",\n    value: function value(isRecurrence) {\n      if (this._isDeviceMobile()) {\n        return APPOINTMENT_POPUP_WIDTH_MOBILE;\n      }\n\n      return isRecurrence ? APPOINTMENT_POPUP_WIDTH_WITH_RECURRENCE : APPOINTMENT_POPUP_WIDTH;\n    }\n  }, {\n    key: \"changeSize\",\n    value: function value(isRecurrence) {\n      var isFullScreen = this._isPopupFullScreenNeeded();\n\n      this._popup.option({\n        maxWidth: isFullScreen ? \"100%\" : this._getMaxWidth(isRecurrence),\n        fullScreen: isFullScreen\n      });\n    }\n  }, {\n    key: \"updatePopupFullScreenMode\",\n    value: function value() {\n      if (!this._appointmentForm) {\n        return;\n      }\n\n      var isRecurrence = _uiScheduler.AppointmentForm.getRecurrenceRule(this._appointmentForm.option(\"formData\"), this.scheduler._dataAccessors.expr);\n\n      if (this.isVisible()) {\n        this.changeSize(isRecurrence);\n      }\n    }\n  }, {\n    key: \"_createPopupToolbarItems\",\n    value: function value(isDoneButtonVisible) {\n      var _this3 = this;\n\n      var result = [];\n\n      var isIOs = \"ios\" === _devices2.default.current().platform;\n\n      if (isDoneButtonVisible) {\n        result.push({\n          shortcut: \"done\",\n          options: {\n            text: _message2.default.format(\"Done\")\n          },\n          location: TOOLBAR_ITEM_AFTER_LOCATION,\n          onClick: function onClick(e) {\n            return _this3._doneButtonClickHandler(e);\n          }\n        });\n      }\n\n      result.push({\n        shortcut: \"cancel\",\n        location: isIOs ? TOOLBAR_ITEM_BEFORE_LOCATION : TOOLBAR_ITEM_AFTER_LOCATION\n      });\n      return result;\n    }\n  }, {\n    key: \"saveChanges\",\n    value: function value(showLoadPanel) {\n      var _this4 = this;\n\n      var deferred = new _deferred.Deferred();\n\n      var validation = this._appointmentForm.validate();\n\n      var state = this.state.appointment;\n\n      var convert = function convert(obj, dateFieldName) {\n        var date = new Date(_this4.scheduler.fire(\"getField\", dateFieldName, obj));\n\n        var tzDiff = _this4.scheduler._getTimezoneOffsetByOption() * toMs(\"hour\") + _this4.scheduler.fire(\"getClientTimezoneOffset\", date);\n\n        return new Date(date.getTime() + tzDiff);\n      };\n\n      showLoadPanel && this._showLoadPanel();\n      (0, _deferred.when)(validation && validation.complete || validation).done(function (validation) {\n        if (validation && !validation.isValid) {\n          _this4._hideLoadPanel();\n\n          deferred.resolve(false);\n          return;\n        }\n\n        var formData = _object2.default.deepExtendArraySafe({}, _this4._getFormData(), true);\n\n        var oldData = _this4.scheduler._editAppointmentData;\n        var recData = _this4.scheduler._updatedRecAppointment;\n\n        if (state.isEmptyText && \"\" === formData.text) {\n          delete formData.text;\n        }\n\n        if (state.isEmptyDescription && \"\" === formData.description) {\n          delete formData.description;\n        }\n\n        if (void 0 === state.data.recurrenceRule && \"\" === formData.recurrenceRule) {\n          delete formData.recurrenceRule;\n        }\n\n        if ((0, _type.isDefined)(formData.repeat)) {\n          delete formData.repeat;\n        }\n\n        if (oldData) {\n          _this4.scheduler._convertDatesByTimezoneBack(false, formData);\n        }\n\n        if (oldData && !recData) {\n          _this4.scheduler.updateAppointment(oldData, formData).done(deferred.resolve);\n        } else {\n          if (recData) {\n            _this4.scheduler.updateAppointment(oldData, recData);\n\n            delete _this4.scheduler._updatedRecAppointment;\n\n            if (\"number\" === typeof _this4.scheduler._getTimezoneOffsetByOption()) {\n              _this4.scheduler.fire(\"setField\", \"startDate\", formData, convert.call(_this4, formData, \"startDate\"));\n\n              _this4.scheduler.fire(\"setField\", \"endDate\", formData, convert.call(_this4, formData, \"endDate\"));\n            }\n          }\n\n          _this4.scheduler.addAppointment(formData).done(deferred.resolve);\n        }\n\n        deferred.done(function () {\n          _this4._hideLoadPanel();\n\n          _this4.state.lastEditData = formData;\n        });\n      });\n      return deferred.promise();\n    }\n  }, {\n    key: \"_getFormData\",\n    value: function value() {\n      var formData = this._appointmentForm.option(\"formData\");\n\n      var startDate = this.scheduler.fire(\"getField\", \"startDate\", formData);\n      var endDate = this.scheduler.fire(\"getField\", \"endDate\", formData);\n      this.scheduler.fire(\"setField\", \"startDate\", formData, startDate);\n      this.scheduler.fire(\"setField\", \"endDate\", formData, endDate);\n      return formData;\n    }\n  }, {\n    key: \"_doneButtonClickHandler\",\n    value: function value(e) {\n      e.cancel = true;\n      this.saveEditData();\n    }\n  }, {\n    key: \"saveEditData\",\n    value: function value() {\n      var _this5 = this;\n\n      var deferred = new _deferred.Deferred();\n\n      if (this._tryLockSaveChanges()) {\n        (0, _deferred.when)(this.saveChanges(true)).done(function () {\n          if (_this5.state.lastEditData) {\n            var startDate = _this5.scheduler.fire(\"getField\", \"startDate\", _this5.state.lastEditData);\n\n            _this5.scheduler._workSpace.updateScrollPosition(startDate);\n\n            _this5.state.lastEditData = null;\n          }\n\n          _this5._unlockSaveChanges();\n\n          deferred.resolve();\n        });\n      }\n\n      return deferred.promise();\n    }\n  }, {\n    key: \"_hideLoadPanel\",\n    value: function value() {\n      _ui2.default.hide();\n    }\n  }, {\n    key: \"_showLoadPanel\",\n    value: function value() {\n      var $overlayContent = this._popup.overlayContent();\n\n      _ui2.default.show({\n        container: $overlayContent,\n        position: {\n          of: $overlayContent\n        }\n      });\n    }\n  }, {\n    key: \"_tryLockSaveChanges\",\n    value: function value() {\n      if (false === this.state.saveChangesLocker) {\n        this.state.saveChangesLocker = true;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_unlockSaveChanges\",\n    value: function value() {\n      this.state.saveChangesLocker = false;\n    }\n  }]);\n\n  return AppointmentPopup;\n}();\n\nexports.default = AppointmentPopup;","map":null,"metadata":{},"sourceType":"script"}