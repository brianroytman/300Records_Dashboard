{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _position = require(\"../../../core/utils/position\");\n\nvar _uiScheduler = require(\"../shaders/ui.scheduler.current_time_shader\");\n\nvar _uiScheduler2 = _interopRequireDefault(_uiScheduler);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar HorizontalCurrentTimeShader = function (_CurrentTimeShader) {\n  _inherits(HorizontalCurrentTimeShader, _CurrentTimeShader);\n\n  var _super = _createSuper(HorizontalCurrentTimeShader);\n\n  function HorizontalCurrentTimeShader() {\n    _classCallCheck(this, HorizontalCurrentTimeShader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HorizontalCurrentTimeShader, [{\n    key: \"renderShader\",\n    value: function value() {\n      var groupCount = this._workSpace._isHorizontalGroupedWorkSpace() ? this._workSpace._getGroupCount() : 1;\n\n      for (var i = 0; i < groupCount; i++) {\n        var isFirstShader = 0 === i;\n        var $shader = isFirstShader ? this._$shader : this.createShader();\n        this.applyShaderMargin($shader);\n\n        if (this._workSpace.isGroupedByDate()) {\n          this._customizeGroupedByDateShader($shader, i);\n        } else {\n          this._customizeShader($shader, i);\n        }\n\n        !isFirstShader && this._shader.push($shader);\n      }\n    }\n  }, {\n    key: \"_customizeShader\",\n    value: function value($shader, groupIndex) {\n      var shaderWidth = this._workSpace.getIndicationWidth();\n\n      this._applyShaderWidth($shader, shaderWidth);\n\n      if (groupIndex >= 1) {\n        var workSpace = this._workSpace;\n        var indicationWidth = workSpace._getCellCount() * workSpace.getCellWidth();\n        $shader.css(\"left\", indicationWidth);\n      } else {\n        $shader.css(\"left\", 0);\n      }\n    }\n  }, {\n    key: \"_applyShaderWidth\",\n    value: function value($shader, width) {\n      var maxWidth = (0, _position.getBoundingRect)(this._$container.get(0)).width;\n\n      if (width > maxWidth) {\n        width = maxWidth;\n      }\n\n      if (width > 0) {\n        $shader.width(width);\n      }\n    }\n  }, {\n    key: \"_customizeGroupedByDateShader\",\n    value: function value($shader, groupIndex) {\n      var cellCount = this._workSpace.getIndicationCellCount();\n\n      var integerPart = Math.floor(cellCount);\n      var fractionPart = cellCount - integerPart;\n      var isFirstShaderPart = 0 === groupIndex;\n      var workSpace = this._workSpace;\n      var shaderWidth = isFirstShaderPart ? workSpace.getIndicationWidth() : fractionPart * workSpace.getCellWidth();\n      var shaderLeft;\n\n      this._applyShaderWidth($shader, shaderWidth);\n\n      if (isFirstShaderPart) {\n        shaderLeft = workSpace._getCellCount() * workSpace.getCellWidth() * groupIndex;\n      } else {\n        shaderLeft = workSpace.getCellWidth() * integerPart * workSpace._getGroupCount() + groupIndex * workSpace.getCellWidth();\n      }\n\n      $shader.css(\"left\", shaderLeft);\n    }\n  }]);\n\n  return HorizontalCurrentTimeShader;\n}(_uiScheduler2.default);\n\nmodule.exports = HorizontalCurrentTimeShader;","map":null,"metadata":{},"sourceType":"script"}