{"ast":null,"code":"/**\r\n * DevExtreme (ui/selection/selection.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Class = require(\"../../core/class\");\n\nvar deferredStrategy = require(\"./selection.strategy.deferred\");\n\nvar standardStrategy = require(\"./selection.strategy.standard\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar noop = require(\"../../core/utils/common\").noop;\n\nvar isDefined = require(\"../../core/utils/type\").isDefined;\n\nvar Deferred = require(\"../../core/utils/deferred\").Deferred;\n\nmodule.exports = Class.inherit({\n  ctor: function ctor(options) {\n    this.options = extend(this._getDefaultOptions(), options, {\n      selectedItemKeys: options.selectedKeys || []\n    });\n    this._selectionStrategy = this.options.deferred ? new deferredStrategy(this.options) : new standardStrategy(this.options);\n    this._focusedItemIndex = -1;\n\n    if (!this.options.equalByReference) {\n      this._selectionStrategy.updateSelectedItemKeyHash(this.options.selectedItemKeys);\n    }\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return {\n      allowNullValue: false,\n      deferred: false,\n      equalByReference: false,\n      mode: \"multiple\",\n      selectedItems: [],\n      selectionFilter: [],\n      maxFilterLengthInRequest: 0,\n      onSelectionChanged: noop,\n      key: noop,\n      keyOf: function keyOf(item) {\n        return item;\n      },\n      load: function load() {\n        return new Deferred().resolve([]);\n      },\n      totalCount: function totalCount() {\n        return -1;\n      },\n      isSelectableItem: function isSelectableItem() {\n        return true;\n      },\n      isItemSelected: function isItemSelected() {\n        return false;\n      },\n      getItemData: function getItemData(item) {\n        return item;\n      },\n      dataFields: noop,\n      filter: noop\n    };\n  },\n  validate: function validate() {\n    this._selectionStrategy.validate();\n  },\n  getSelectedItemKeys: function getSelectedItemKeys() {\n    return this._selectionStrategy.getSelectedItemKeys();\n  },\n  getSelectedItems: function getSelectedItems() {\n    return this._selectionStrategy.getSelectedItems();\n  },\n  selectionFilter: function selectionFilter(value) {\n    if (void 0 === value) {\n      return this.options.selectionFilter;\n    }\n\n    var filterIsChanged = this.options.selectionFilter !== value && JSON.stringify(this.options.selectionFilter) !== JSON.stringify(value);\n    this.options.selectionFilter = value;\n    filterIsChanged && this.onSelectionChanged();\n  },\n  setSelection: function setSelection(keys) {\n    return this.selectedItemKeys(keys);\n  },\n  select: function select(keys) {\n    return this.selectedItemKeys(keys, true);\n  },\n  deselect: function deselect(keys) {\n    return this.selectedItemKeys(keys, true, true);\n  },\n  selectedItemKeys: function selectedItemKeys(keys, preserve, isDeselect, isSelectAll) {\n    var that = this;\n    keys = keys || [];\n    keys = Array.isArray(keys) ? keys : [keys];\n    that.validate();\n    return this._selectionStrategy.selectedItemKeys(keys, preserve, isDeselect, isSelectAll);\n  },\n  clearSelection: function clearSelection() {\n    return this.selectedItemKeys([]);\n  },\n  _addSelectedItem: function _addSelectedItem(itemData, key) {\n    this._selectionStrategy.addSelectedItem(key, itemData);\n  },\n  _removeSelectedItem: function _removeSelectedItem(key) {\n    this._selectionStrategy.removeSelectedItem(key);\n  },\n  _setSelectedItems: function _setSelectedItems(keys, items) {\n    this._selectionStrategy.setSelectedItems(keys, items);\n  },\n  onSelectionChanged: function onSelectionChanged() {\n    this._selectionStrategy.onSelectionChanged();\n  },\n  changeItemSelection: function changeItemSelection(itemIndex, keys) {\n    var isSelectedItemsChanged;\n    var items = this.options.plainItems();\n    var item = items[itemIndex];\n\n    if (!this.isSelectable() || !this.isDataItem(item)) {\n      return false;\n    }\n\n    var itemData = this.options.getItemData(item);\n    var itemKey = this.options.keyOf(itemData);\n    keys = keys || {};\n\n    if (keys.shift && \"multiple\" === this.options.mode && this._focusedItemIndex >= 0) {\n      isSelectedItemsChanged = this.changeItemSelectionWhenShiftKeyPressed(itemIndex, items);\n    } else {\n      if (keys.control) {\n        this._resetItemSelectionWhenShiftKeyPressed();\n\n        var isSelected = this._selectionStrategy.isItemDataSelected(itemData);\n\n        if (\"single\" === this.options.mode) {\n          this.clearSelectedItems();\n        }\n\n        if (isSelected) {\n          this._removeSelectedItem(itemKey);\n        } else {\n          this._addSelectedItem(itemData, itemKey);\n        }\n\n        isSelectedItemsChanged = true;\n      } else {\n        this._resetItemSelectionWhenShiftKeyPressed();\n\n        var isKeysEqual = this._selectionStrategy.equalKeys(this.options.selectedItemKeys[0], itemKey);\n\n        if (1 !== this.options.selectedItemKeys.length || !isKeysEqual) {\n          this._setSelectedItems([itemKey], [itemData]);\n\n          isSelectedItemsChanged = true;\n        }\n      }\n    }\n\n    if (isSelectedItemsChanged) {\n      this._focusedItemIndex = itemIndex;\n      this.onSelectionChanged();\n      return true;\n    }\n  },\n  isDataItem: function isDataItem(item) {\n    return this.options.isSelectableItem(item);\n  },\n  isSelectable: function isSelectable() {\n    return \"single\" === this.options.mode || \"multiple\" === this.options.mode;\n  },\n  isItemDataSelected: function isItemDataSelected(data) {\n    return this._selectionStrategy.isItemDataSelected(data);\n  },\n  isItemSelected: function isItemSelected(arg) {\n    return this._selectionStrategy.isItemKeySelected(arg);\n  },\n  _resetItemSelectionWhenShiftKeyPressed: function _resetItemSelectionWhenShiftKeyPressed() {\n    delete this._shiftFocusedItemIndex;\n  },\n  _resetFocusedItemIndex: function _resetFocusedItemIndex() {\n    this._focusedItemIndex = -1;\n  },\n  changeItemSelectionWhenShiftKeyPressed: function changeItemSelectionWhenShiftKeyPressed(itemIndex, items) {\n    var isSelectedItemsChanged = false;\n    var itemIndexStep;\n    var index;\n    var keyOf = this.options.keyOf;\n    var focusedItem = items[this._focusedItemIndex];\n    var focusedData = this.options.getItemData(focusedItem);\n    var focusedKey = keyOf(focusedData);\n    var isFocusedItemSelected = focusedItem && this.isItemDataSelected(focusedData);\n\n    if (!isDefined(this._shiftFocusedItemIndex)) {\n      this._shiftFocusedItemIndex = this._focusedItemIndex;\n    }\n\n    var data;\n    var itemKey;\n\n    if (this._shiftFocusedItemIndex !== this._focusedItemIndex) {\n      itemIndexStep = this._focusedItemIndex < this._shiftFocusedItemIndex ? 1 : -1;\n\n      for (index = this._focusedItemIndex; index !== this._shiftFocusedItemIndex; index += itemIndexStep) {\n        if (this.isDataItem(items[index])) {\n          itemKey = keyOf(this.options.getItemData(items[index]));\n\n          this._removeSelectedItem(itemKey);\n\n          isSelectedItemsChanged = true;\n        }\n      }\n    }\n\n    if (itemIndex !== this._shiftFocusedItemIndex) {\n      itemIndexStep = itemIndex < this._shiftFocusedItemIndex ? 1 : -1;\n\n      for (index = itemIndex; index !== this._shiftFocusedItemIndex; index += itemIndexStep) {\n        if (this.isDataItem(items[index])) {\n          data = this.options.getItemData(items[index]);\n          itemKey = keyOf(data);\n\n          this._addSelectedItem(data, itemKey);\n\n          isSelectedItemsChanged = true;\n        }\n      }\n    }\n\n    if (this.isDataItem(focusedItem) && !isFocusedItemSelected) {\n      this._addSelectedItem(focusedData, focusedKey);\n\n      isSelectedItemsChanged = true;\n    }\n\n    return isSelectedItemsChanged;\n  },\n  clearSelectedItems: function clearSelectedItems() {\n    this._setSelectedItems([], []);\n  },\n  selectAll: function selectAll(isOnePage) {\n    this._resetFocusedItemIndex();\n\n    if (isOnePage) {\n      return this._onePageSelectAll(false);\n    } else {\n      return this.selectedItemKeys([], true, false, true);\n    }\n  },\n  deselectAll: function deselectAll(isOnePage) {\n    this._resetFocusedItemIndex();\n\n    if (isOnePage) {\n      return this._onePageSelectAll(true);\n    } else {\n      return this.selectedItemKeys([], true, true, true);\n    }\n  },\n  _onePageSelectAll: function _onePageSelectAll(isDeselect) {\n    var items = this._selectionStrategy.getSelectableItems(this.options.plainItems());\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n\n      if (this.isDataItem(item)) {\n        var itemData = this.options.getItemData(item);\n        var itemKey = this.options.keyOf(itemData);\n        var isSelected = this.isItemSelected(itemKey);\n\n        if (!isSelected && !isDeselect) {\n          this._addSelectedItem(itemData, itemKey);\n        }\n\n        if (isSelected && isDeselect) {\n          this._removeSelectedItem(itemKey);\n        }\n      }\n    }\n\n    this.onSelectionChanged();\n    return new Deferred().resolve();\n  },\n  getSelectAllState: function getSelectAllState(visibleOnly) {\n    return this._selectionStrategy.getSelectAllState(visibleOnly);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}