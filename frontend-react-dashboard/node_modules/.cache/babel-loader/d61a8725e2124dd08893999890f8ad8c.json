{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/tooltip_strategies/desktopTooltipStrategy.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DesktopTooltipStrategy = void 0;\n\nvar _tooltipStrategyBase = require(\"./tooltipStrategyBase\");\n\nvar _tooltip = require(\"../../tooltip\");\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nvar _support = require(\"../../../core/utils/support\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar APPOINTMENT_TOOLTIP_WRAPPER_CLASS = \"dx-scheduler-appointment-tooltip-wrapper\";\nvar MAX_TOOLTIP_HEIGHT = 200;\n\nvar DesktopTooltipStrategy = exports.DesktopTooltipStrategy = function (_TooltipStrategyBase) {\n  _inherits(DesktopTooltipStrategy, _TooltipStrategyBase);\n\n  var _super = _createSuper(DesktopTooltipStrategy);\n\n  function DesktopTooltipStrategy() {\n    _classCallCheck(this, DesktopTooltipStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DesktopTooltipStrategy, [{\n    key: \"_prepareBeforeVisibleChanged\",\n    value: function value(dataList) {\n      this._tooltip.option(\"position\", {\n        my: \"bottom\",\n        at: \"top\",\n        boundary: this._getBoundary(dataList),\n        offset: this._extraOptions.offset,\n        collision: \"fit flipfit\"\n      });\n    }\n  }, {\n    key: \"_getBoundary\",\n    value: function value(dataList) {\n      return this._options.isAppointmentInAllDayPanel(dataList[0].data) ? this._options.container : this._options.getScrollableContainer();\n    }\n  }, {\n    key: \"_onShown\",\n    value: function value() {\n      _get(_getPrototypeOf(DesktopTooltipStrategy.prototype), \"_onShown\", this).call(this);\n\n      if (this._extraOptions.isButtonClick) {\n        this._list.focus();\n\n        this._list.option(\"focusedElement\", null);\n      }\n    }\n  }, {\n    key: \"_createListOption\",\n    value: function value(target, dataList) {\n      var result = _get(_getPrototypeOf(DesktopTooltipStrategy.prototype), \"_createListOption\", this).call(this, target, dataList);\n\n      result.showScrollbar = _support.touch ? \"always\" : \"onHover\";\n      return result;\n    }\n  }, {\n    key: \"_createTooltip\",\n    value: function value(target, dataList) {\n      var tooltip = this._createTooltipElement(APPOINTMENT_TOOLTIP_WRAPPER_CLASS);\n\n      return this._options.createComponent(tooltip, _tooltip2.default, {\n        target: target,\n        maxHeight: MAX_TOOLTIP_HEIGHT,\n        rtlEnabled: this._extraOptions.rtlEnabled,\n        onShown: this._onShown.bind(this),\n        contentTemplate: this._getContentTemplate(dataList)\n      });\n    }\n  }, {\n    key: \"_onListRender\",\n    value: function value(e) {\n      return this._extraOptions.dragBehavior && this._extraOptions.dragBehavior(e);\n    }\n  }]);\n\n  return DesktopTooltipStrategy;\n}(_tooltipStrategyBase.TooltipStrategyBase);","map":null,"metadata":{},"sourceType":"script"}