{"ast":null,"code":"/**\r\n * DevExtreme (core/options/option_manager.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionManager = void 0;\n\nvar _data = require(\"../utils/data\");\n\nvar _common = require(\"../utils/common\");\n\nvar _comparator = require(\"../utils/comparator\");\n\nvar _extend = require(\"../utils/extend\");\n\nvar _type = require(\"../utils/type\");\n\nvar _utils = require(\"./utils\");\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar cachedGetters = {};\nvar cachedSetters = {};\n\nvar OptionManager = exports.OptionManager = function () {\n  function OptionManager(options, optionsByReference) {\n    _classCallCheck(this, OptionManager);\n\n    this._options = options;\n    this._optionsByReference = optionsByReference;\n    this._changingCallback;\n    this._changedCallback;\n    this._namePreparedCallbacks;\n  }\n\n  _createClass(OptionManager, [{\n    key: \"_setByReference\",\n    value: function value(options, rulesOptions) {\n      (0, _extend.extend)(true, options, rulesOptions);\n\n      for (var fieldName in this._optionsByReference) {\n        if (Object.prototype.hasOwnProperty.call(rulesOptions, fieldName)) {\n          options[fieldName] = rulesOptions[fieldName];\n        }\n      }\n    }\n  }, {\n    key: \"_setPreparedValue\",\n    value: function value(name, _value, merge, silent) {\n      var previousValue = this.get(this._options, name, false);\n\n      if (!(0, _comparator.equals)(previousValue, _value)) {\n        var path = name.split(/[.[]/);\n        !silent && this._changingCallback(name, previousValue, _value);\n        cachedSetters[name] = cachedSetters[name] || (0, _data.compileSetter)(name);\n        cachedSetters[name](this._options, _value, {\n          functionsAsIs: true,\n          merge: (0, _type.isDefined)(merge) ? merge : !this._optionsByReference[name],\n          unwrapObservables: path.length > 1 && !!this._optionsByReference[path[0]]\n        });\n        !silent && this._changedCallback(name, _value, previousValue);\n      }\n    }\n  }, {\n    key: \"_prepareRelevantNames\",\n    value: function value(options, name, _value2, silent) {\n      if ((0, _type.isPlainObject)(_value2)) {\n        for (var valueName in _value2) {\n          this._prepareRelevantNames(options, \"\".concat(name, \".\").concat(valueName), _value2[valueName]);\n        }\n      }\n\n      this._namePreparedCallbacks(options, name, _value2, silent);\n    }\n  }, {\n    key: \"get\",\n    value: function value() {\n      var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._options;\n      var name = arguments.length > 1 ? arguments[1] : void 0;\n      var unwrapObservables = arguments.length > 2 ? arguments[2] : void 0;\n      cachedGetters[name] = cachedGetters[name] || (0, _data.compileGetter)(name);\n      return cachedGetters[name](options, {\n        functionsAsIs: true,\n        unwrapObservables: unwrapObservables\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function value(options, _value3, merge, silent) {\n      options = (0, _utils.normalizeOptions)(options, _value3);\n\n      for (var name in options) {\n        this._prepareRelevantNames(options, name, options[name], silent);\n      }\n\n      for (var _name in options) {\n        this._setPreparedValue(_name, options[_name], merge, silent);\n      }\n    }\n  }, {\n    key: \"onRelevantNamesPrepared\",\n    value: function value(callBack) {\n      this._namePreparedCallbacks = callBack;\n    }\n  }, {\n    key: \"onChanging\",\n    value: function value(callBack) {\n      this._changingCallback = callBack;\n    }\n  }, {\n    key: \"onChanged\",\n    value: function value(callBack) {\n      this._changedCallback = callBack;\n    }\n  }, {\n    key: \"dispose\",\n    value: function value() {\n      this._changingCallback = _common.noop;\n      this._changedCallback = _common.noop;\n    }\n  }]);\n\n  return OptionManager;\n}();","map":null,"metadata":{},"sourceType":"script"}