{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.agenda.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../../core/renderer\");\n\nvar domAdapter = require(\"../../../core/dom_adapter\");\n\nvar noop = require(\"../../../core/utils/common\").noop;\n\nvar each = require(\"../../../core/utils/iterator\").each;\n\nvar getPublicElement = require(\"../../../core/utils/dom\").getPublicElement;\n\nvar registerComponent = require(\"../../../core/component_registrator\");\n\nvar SchedulerWorkSpace = require(\"./ui.scheduler.work_space\");\n\nvar extend = require(\"../../../core/utils/extend\").extend;\n\nvar dateLocalization = require(\"../../../localization/date\");\n\nvar tableCreator = require(\"../ui.scheduler.table_creator\");\n\nvar AGENDA_CLASS = \"dx-scheduler-agenda\";\nvar AGENDA_DATE_CLASS = \"dx-scheduler-agenda-date\";\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\nvar AGENDA_GROUPED_ATTR = \"dx-group-column-count\";\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\nvar NODATA_CONTAINER_CLASS = \"dx-scheduler-agenda-nodata\";\nvar LAST_ROW_CLASS = \"dx-scheduler-date-table-last-row\";\nvar INNER_CELL_MARGIN = 5;\nvar OUTER_CELL_MARGIN = 20;\nvar SchedulerAgenda = SchedulerWorkSpace.inherit({\n  _activeStateUnit: void 0,\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      agendaDuration: 7,\n      rowHeight: 60,\n      noDataText: \"\"\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name;\n    var value = args.value;\n\n    switch (name) {\n      case \"agendaDuration\":\n        break;\n\n      case \"noDataText\":\n      case \"rowHeight\":\n        this._recalculateAgenda(this._rows);\n\n        break;\n\n      case \"groups\":\n        if (!value || !value.length) {\n          if (this._$groupTable) {\n            this._$groupTable.remove();\n\n            this._$groupTable = null;\n\n            this._detachGroupCountAttr();\n          }\n        } else {\n          if (!this._$groupTable) {\n            this._initGroupTable();\n\n            this._dateTableScrollable.$content().prepend(this._$groupTable);\n          }\n        }\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _renderFocusState: noop,\n  _renderFocusTarget: noop,\n  _cleanFocusState: noop,\n  supportAllDayRow: function supportAllDayRow() {\n    return false;\n  },\n  _isVerticalGroupedWorkSpace: function _isVerticalGroupedWorkSpace() {\n    return false;\n  },\n  _getElementClass: function _getElementClass() {\n    return AGENDA_CLASS;\n  },\n  _setFirstViewDate: function _setFirstViewDate() {\n    this._firstViewDate = new Date(this.option(\"currentDate\"));\n\n    this._setStartDayHour(this._firstViewDate);\n  },\n  _getRowCount: function _getRowCount() {\n    return this.option(\"agendaDuration\");\n  },\n  _getCellCount: function _getCellCount() {\n    return 1;\n  },\n  _getTimePanelRowCount: function _getTimePanelRowCount() {\n    return this.option(\"agendaDuration\");\n  },\n  _getDateByIndex: noop,\n  _getFormat: function _getFormat() {\n    return \"d ddd\";\n  },\n  _renderAllDayPanel: noop,\n  _toggleAllDayVisibility: noop,\n  _initWorkSpaceUnits: function _initWorkSpaceUnits() {\n    this._initGroupTable();\n\n    this._$timePanel = $(\"<table>\").addClass(this._getTimePanelClass());\n    this._$dateTable = $(\"<table>\").addClass(this._getDateTableClass());\n  },\n  _initGroupTable: function _initGroupTable() {\n    var groups = this.option(\"groups\");\n\n    if (groups && groups.length) {\n      this._$groupTable = $(\"<table>\").addClass(GROUP_TABLE_CLASS);\n    }\n  },\n  _renderView: function _renderView() {\n    this._setFirstViewDate();\n\n    this._rows = [];\n    this.invoke(\"getAgendaRows\", {\n      agendaDuration: this.option(\"agendaDuration\"),\n      currentDate: new Date(this.option(\"currentDate\"))\n    }).done(function (rows) {\n      this._recalculateAgenda(rows);\n    }.bind(this));\n  },\n  _recalculateAgenda: function _recalculateAgenda(rows) {\n    var cellTemplates = [];\n\n    this._cleanView();\n\n    if (this._rowsIsEmpty(rows)) {\n      this._renderNoData();\n\n      return;\n    }\n\n    this._rows = rows;\n\n    if (this._$groupTable) {\n      cellTemplates = this._renderGroupHeader();\n\n      this._setGroupHeaderCellsHeight();\n    }\n\n    this._renderTimePanel();\n\n    this._renderDateTable();\n\n    this.invoke(\"onAgendaReady\", rows);\n\n    this._applyCellTemplates(cellTemplates);\n\n    this._dateTableScrollable.update();\n  },\n  _renderNoData: function _renderNoData() {\n    this._$noDataContainer = $(\"<div>\").addClass(NODATA_CONTAINER_CLASS).html(this.option(\"noDataText\"));\n\n    this._dateTableScrollable.$content().append(this._$noDataContainer);\n  },\n  _setTableSizes: noop,\n  _toggleHorizontalScrollClass: noop,\n  _createCrossScrollingConfig: noop,\n  _setGroupHeaderCellsHeight: function _setGroupHeaderCellsHeight() {\n    var $cells = this._getGroupHeaderCells().filter(function (_, element) {\n      return !element.getAttribute(\"rowSpan\");\n    });\n\n    var rows = this._removeEmptyRows(this._rows);\n\n    if (!rows.length) {\n      return;\n    }\n\n    for (var i = 0; i < $cells.length; i++) {\n      var $cellContent = $cells.eq(i).find(\".dx-scheduler-group-header-content\");\n      $cellContent.outerHeight(this._getGroupRowHeight(rows[i]));\n    }\n  },\n  _rowsIsEmpty: function _rowsIsEmpty(rows) {\n    var result = true;\n\n    for (var i = 0; i < rows.length; i++) {\n      var groupRow = rows[i];\n\n      for (var j = 0; j < groupRow.length; j++) {\n        if (groupRow[j]) {\n          result = false;\n          break;\n        }\n      }\n    }\n\n    return result;\n  },\n  _detachGroupCountAttr: function _detachGroupCountAttr() {\n    this.$element().removeAttr(AGENDA_GROUPED_ATTR);\n  },\n  _attachGroupCountAttr: function _attachGroupCountAttr() {\n    this.$element().attr(AGENDA_GROUPED_ATTR, this.option(\"groups\").length);\n  },\n  _removeEmptyRows: function _removeEmptyRows(rows) {\n    var result = [];\n\n    var isEmpty = function isEmpty(data) {\n      return !data.some(function (value) {\n        return value > 0;\n      });\n    };\n\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].length && !isEmpty(rows[i])) {\n        result.push(rows[i]);\n      }\n    }\n\n    return result;\n  },\n  _getGroupHeaderContainer: function _getGroupHeaderContainer() {\n    return this._$groupTable;\n  },\n  _makeGroupRows: function _makeGroupRows() {\n    var tree = this.invoke(\"createReducedResourcesTree\");\n    var cellTemplate = this.option(\"resourceCellTemplate\");\n\n    var getGroupHeaderContentClass = this._getGroupHeaderContentClass();\n\n    var cellTemplates = [];\n    var table = tableCreator.makeGroupedTableFromJSON(tableCreator.VERTICAL, tree, {\n      cellTag: \"th\",\n      groupTableClass: GROUP_TABLE_CLASS,\n      groupRowClass: this._getGroupRowClass(),\n      groupCellClass: this._getGroupHeaderClass(),\n      groupCellCustomContent: function groupCellCustomContent(cell, cellText, index, data) {\n        var container = domAdapter.createElement(\"div\");\n        var contentWrapper = domAdapter.createElement(\"div\");\n        container.className = getGroupHeaderContentClass;\n        contentWrapper.appendChild(cellText);\n        container.appendChild(contentWrapper);\n        container.className = getGroupHeaderContentClass;\n\n        if (cellTemplate && cellTemplate.render) {\n          cellTemplates.push(cellTemplate.render.bind(cellTemplate, {\n            model: {\n              data: data.data,\n              id: data.value,\n              color: data.color,\n              text: cellText.textContent\n            },\n            container: getPublicElement($(container)),\n            index: index\n          }));\n        } else {\n          contentWrapper.appendChild(cellText);\n          container.appendChild(contentWrapper);\n        }\n\n        cell.appendChild(container);\n      },\n      cellTemplate: cellTemplate\n    });\n    return {\n      elements: $(table).find(\".\" + this._getGroupRowClass()),\n      cellTemplates: cellTemplates\n    };\n  },\n  _cleanView: function _cleanView() {\n    this._$dateTable.empty();\n\n    this._$timePanel.empty();\n\n    if (this._$groupTable) {\n      this._$groupTable.empty();\n    }\n\n    if (this._$noDataContainer) {\n      this._$noDataContainer.empty();\n\n      this._$noDataContainer.remove();\n\n      delete this._$noDataContainer;\n    }\n  },\n  _createWorkSpaceElements: function _createWorkSpaceElements() {\n    this._createWorkSpaceStaticElements();\n  },\n  _createWorkSpaceStaticElements: function _createWorkSpaceStaticElements() {\n    if (this._$groupTable) {\n      this._dateTableScrollable.$content().prepend(this._$groupTable);\n    }\n\n    this._dateTableScrollable.$content().append(this._$timePanel, this._$dateTable);\n\n    this.$element().append(this._dateTableScrollable.$element());\n  },\n  _renderDateTable: function _renderDateTable() {\n    this._renderTableBody({\n      container: getPublicElement(this._$dateTable),\n      rowClass: this._getDateTableRowClass(),\n      cellClass: this._getDateTableCellClass()\n    });\n  },\n  _attachTablesEvents: noop,\n  _attachEvents: noop,\n  _cleanCellDataCache: noop,\n  needRenderDateTimeIndication: function needRenderDateTimeIndication() {\n    return false;\n  },\n  _prepareCellTemplateOptions: function _prepareCellTemplateOptions(text, date, rowIndex, $cell) {\n    var groupsOpt = this.option(\"groups\");\n    var groups = {};\n    var path = groupsOpt.length && this._getPathToLeaf(rowIndex) || [];\n    path.forEach(function (resourceValue, resourceIndex) {\n      var resourceName = groupsOpt[resourceIndex].name;\n      groups[resourceName] = resourceValue;\n    });\n    return {\n      model: {\n        text: text,\n        date: date,\n        groups: groups\n      },\n      container: getPublicElement($cell),\n      index: rowIndex\n    };\n  },\n  _renderTableBody: function _renderTableBody(options) {\n    var cellTemplates = [];\n    var cellTemplateOpt = options.cellTemplate;\n    this._$rows = [];\n    var i;\n\n    var fillTableBody = function (rowIndex, rowSize) {\n      if (rowSize) {\n        var date;\n        var cellDateNumber;\n        var cellDayName;\n        var $row = $(\"<tr>\");\n        var $td = $(\"<td>\").height(this._getRowHeight(rowSize));\n\n        if (options.getStartDate) {\n          date = options.getStartDate && options.getStartDate(rowIndex);\n          cellDateNumber = dateLocalization.format(date, \"d\");\n          cellDayName = dateLocalization.format(date, this._formatWeekday);\n        }\n\n        if (cellTemplateOpt && cellTemplateOpt.render) {\n          var templateOptions = this._prepareCellTemplateOptions(cellDateNumber + \" \" + cellDayName, date, i, $td);\n\n          cellTemplates.push(cellTemplateOpt.render.bind(cellTemplateOpt, templateOptions));\n        } else {\n          if (cellDateNumber && cellDayName) {\n            $td.addClass(AGENDA_DATE_CLASS).text(cellDateNumber + \" \" + cellDayName);\n          }\n        }\n\n        if (options.rowClass) {\n          $row.addClass(options.rowClass);\n        }\n\n        if (options.cellClass) {\n          $td.addClass(options.cellClass);\n        }\n\n        $row.append($td);\n\n        this._$rows.push($row);\n      }\n    }.bind(this);\n\n    for (i = 0; i < this._rows.length; i++) {\n      each(this._rows[i], fillTableBody);\n\n      this._setLastRowClass();\n    }\n\n    $(options.container).append($(\"<tbody>\").append(this._$rows));\n\n    this._applyCellTemplates(cellTemplates);\n  },\n  _setLastRowClass: function _setLastRowClass() {\n    if (this._rows.length > 1 && this._$rows.length) {\n      var $lastRow = this._$rows[this._$rows.length - 1];\n      $lastRow.addClass(LAST_ROW_CLASS);\n    }\n  },\n  _renderTimePanel: function _renderTimePanel() {\n    this._renderTableBody({\n      container: getPublicElement(this._$timePanel),\n      rowCount: this._getTimePanelRowCount(),\n      cellCount: 1,\n      rowClass: TIME_PANEL_ROW_CLASS,\n      cellClass: TIME_PANEL_CELL_CLASS,\n      cellTemplate: this.option(\"dateCellTemplate\"),\n      getStartDate: this._getTimePanelStartDate.bind(this)\n    });\n  },\n  _getTimePanelStartDate: function _getTimePanelStartDate(rowIndex) {\n    var current = new Date(this.option(\"currentDate\"));\n    var cellDate = new Date(current.setDate(current.getDate() + rowIndex));\n    return cellDate;\n  },\n  _getRowHeight: function _getRowHeight(rowSize) {\n    var baseHeight = this.option(\"rowHeight\");\n    var innerOffset = (rowSize - 1) * INNER_CELL_MARGIN;\n    return rowSize ? baseHeight * rowSize + innerOffset + OUTER_CELL_MARGIN : 0;\n  },\n  _getGroupRowHeight: function _getGroupRowHeight(groupRows) {\n    if (!groupRows) {\n      return;\n    }\n\n    var result = 0;\n\n    for (var i = 0; i < groupRows.length; i++) {\n      result += this._getRowHeight(groupRows[i]);\n    }\n\n    return result;\n  },\n  getAgendaVerticalStepHeight: function getAgendaVerticalStepHeight() {\n    return this.option(\"rowHeight\");\n  },\n  getEndViewDate: function getEndViewDate() {\n    var currentDate = new Date(this.option(\"currentDate\"));\n    var agendaDuration = this.option(\"agendaDuration\");\n    currentDate.setHours(this.option(\"endDayHour\"));\n    var result = currentDate.setDate(currentDate.getDate() + agendaDuration - 1) - 6e4;\n    return new Date(result);\n  },\n  getEndViewDateByEndDayHour: function getEndViewDateByEndDayHour() {\n    return this.getEndViewDate();\n  },\n  getCoordinatesByDate: function getCoordinatesByDate() {\n    return {\n      top: 0,\n      left: 0,\n      max: 0,\n      groupIndex: 0\n    };\n  },\n  getCellDataByCoordinates: function getCellDataByCoordinates() {\n    return {\n      startDate: null,\n      endDate: null\n    };\n  }\n});\nregisterComponent(\"dxSchedulerAgenda\", SchedulerAgenda);\nmodule.exports = SchedulerAgenda;","map":null,"metadata":{},"sourceType":"script"}