{"ast":null,"code":"/**\r\n * DevExtreme (ui/multi_view.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _fx = require(\"../animation/fx\");\n\nvar _fx2 = _interopRequireDefault(_fx);\n\nvar _translator2 = require(\"../animation/translator\");\n\nvar _translator3 = _interopRequireDefault(_translator2);\n\nvar _math = require(\"../core/utils/math\");\n\nvar _math2 = _interopRequireDefault(_math);\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _common = require(\"../core/utils/common\");\n\nvar _dom = require(\"../core/utils/dom\");\n\nvar _type = require(\"../core/utils/type\");\n\nvar _devices = require(\"../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _component_registrator = require(\"../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _uiCollection_widget = require(\"./collection/ui.collection_widget.live_update\");\n\nvar _uiCollection_widget2 = _interopRequireDefault(_uiCollection_widget);\n\nvar _swipeable = require(\"../events/gesture/swipeable\");\n\nvar _swipeable2 = _interopRequireDefault(_swipeable);\n\nvar _deferred = require(\"../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar MULTIVIEW_CLASS = \"dx-multiview\";\nvar MULTIVIEW_WRAPPER_CLASS = \"dx-multiview-wrapper\";\nvar MULTIVIEW_ITEM_CONTAINER_CLASS = \"dx-multiview-item-container\";\nvar MULTIVIEW_ITEM_CLASS = \"dx-multiview-item\";\nvar MULTIVIEW_ITEM_HIDDEN_CLASS = \"dx-multiview-item-hidden\";\nvar MULTIVIEW_ITEM_DATA_KEY = \"dxMultiViewItemData\";\nvar MULTIVIEW_ANIMATION_DURATION = 200;\n\nvar toNumber = function toNumber(value) {\n  return +value;\n};\n\nvar position = function position($element) {\n  return _translator3.default.locate($element).left;\n};\n\nvar _translator = {\n  move: function move($element, position) {\n    _translator3.default.move($element, {\n      left: position\n    });\n  }\n};\nvar animation = {\n  moveTo: function moveTo($element, position, duration, completeAction) {\n    _fx2.default.animate($element, {\n      type: \"slide\",\n      to: {\n        left: position\n      },\n      duration: duration,\n      complete: completeAction\n    });\n  },\n  complete: function complete($element) {\n    _fx2.default.stop($element, true);\n  }\n};\n\nvar MultiView = _uiCollection_widget2.default.inherit({\n  _activeStateUnit: \".\" + MULTIVIEW_ITEM_CLASS,\n  _supportedKeys: function _supportedKeys() {\n    return (0, _extend.extend)(this.callBase(), {\n      pageUp: _common.noop,\n      pageDown: _common.noop\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      selectedIndex: 0,\n      swipeEnabled: true,\n      animationEnabled: true,\n      loop: false,\n      deferRendering: true,\n      _itemAttributes: {\n        role: \"tabpanel\"\n      },\n      loopItemFocus: false,\n      selectOnFocus: true,\n      selectionMode: \"single\",\n      selectionRequired: true,\n      selectionByClick: false\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === _devices2.default.real().deviceType && !_devices2.default.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _itemClass: function _itemClass() {\n    return MULTIVIEW_ITEM_CLASS;\n  },\n  _itemDataKey: function _itemDataKey() {\n    return MULTIVIEW_ITEM_DATA_KEY;\n  },\n  _itemContainer: function _itemContainer() {\n    return this._$itemContainer;\n  },\n  _itemElements: function _itemElements() {\n    return this._itemContainer().children(this._itemSelector());\n  },\n  _itemWidth: function _itemWidth() {\n    if (!this._itemWidthValue) {\n      this._itemWidthValue = this._$wrapper.width();\n    }\n\n    return this._itemWidthValue;\n  },\n  _clearItemWidthCache: function _clearItemWidthCache() {\n    delete this._itemWidthValue;\n  },\n  _itemsCount: function _itemsCount() {\n    return this.option(\"items\").length;\n  },\n  _normalizeIndex: function _normalizeIndex(index) {\n    var count = this._itemsCount();\n\n    if (index < 0) {\n      index += count;\n    }\n\n    if (index >= count) {\n      index -= count;\n    }\n\n    return index;\n  },\n  _getRTLSignCorrection: function _getRTLSignCorrection() {\n    return this.option(\"rtlEnabled\") ? -1 : 1;\n  },\n  _init: function _init() {\n    this.callBase.apply(this, arguments);\n    var $element = this.$element();\n    $element.addClass(MULTIVIEW_CLASS);\n    this._$wrapper = (0, _renderer2.default)(\"<div>\").addClass(MULTIVIEW_WRAPPER_CLASS);\n\n    this._$wrapper.appendTo($element);\n\n    this._$itemContainer = (0, _renderer2.default)(\"<div>\").addClass(MULTIVIEW_ITEM_CONTAINER_CLASS);\n\n    this._$itemContainer.appendTo(this._$wrapper);\n\n    this.option(\"loopItemFocus\", this.option(\"loop\"));\n\n    this._initSwipeable();\n  },\n  _initMarkup: function _initMarkup() {\n    this._deferredItems = [];\n    this.callBase();\n\n    var selectedItemIndices = this._getSelectedItemIndices();\n\n    this._updateItemsVisibility(selectedItemIndices[0]);\n  },\n  _afterItemElementDeleted: function _afterItemElementDeleted($item, deletedActionArgs) {\n    this.callBase($item, deletedActionArgs);\n\n    if (this._deferredItems) {\n      this._deferredItems.splice(deletedActionArgs.itemIndex, 1);\n    }\n  },\n  _beforeItemElementInserted: function _beforeItemElementInserted(change) {\n    this.callBase.apply(this, arguments);\n\n    if (this._deferredItems) {\n      this._deferredItems.splice(change.index, 0, null);\n    }\n  },\n  _executeItemRenderAction: function _executeItemRenderAction(index, itemData, itemElement) {\n    index = (this.option(\"items\") || []).indexOf(itemData);\n    this.callBase(index, itemData, itemElement);\n  },\n  _renderItemContent: function _renderItemContent(args) {\n    var renderContentDeferred = new _deferred.Deferred();\n    var that = this;\n    var callBase = this.callBase;\n    var deferred = new _deferred.Deferred();\n    deferred.done(function () {\n      var $itemContent = callBase.call(that, args);\n      renderContentDeferred.resolve($itemContent);\n    });\n    this._deferredItems[args.index] = deferred;\n    this.option(\"deferRendering\") || deferred.resolve();\n    return renderContentDeferred.promise();\n  },\n  _render: function _render() {\n    var _this = this;\n\n    this.callBase();\n    (0, _common.deferRender)(function () {\n      var selectedItemIndices = _this._getSelectedItemIndices();\n\n      _this._updateItems(selectedItemIndices[0]);\n    });\n  },\n  _updateItems: function _updateItems(selectedIndex, newIndex) {\n    this._updateItemsPosition(selectedIndex, newIndex);\n\n    this._updateItemsVisibility(selectedIndex, newIndex);\n  },\n  _modifyByChanges: function _modifyByChanges() {\n    this.callBase.apply(this, arguments);\n\n    var selectedItemIndices = this._getSelectedItemIndices();\n\n    this._updateItemsVisibility(selectedItemIndices[0]);\n  },\n  _updateItemsPosition: function _updateItemsPosition(selectedIndex, newIndex) {\n    var $itemElements = this._itemElements();\n\n    var positionSign = (0, _type.isDefined)(newIndex) ? -this._animationDirection(newIndex, selectedIndex) : void 0;\n    var $selectedItem = $itemElements.eq(selectedIndex);\n\n    _translator.move($selectedItem, 0);\n\n    if ((0, _type.isDefined)(newIndex)) {\n      _translator.move($itemElements.eq(newIndex), 100 * positionSign + \"%\");\n    }\n  },\n  _updateItemsVisibility: function _updateItemsVisibility(selectedIndex, newIndex) {\n    var $itemElements = this._itemElements();\n\n    $itemElements.each(function (itemIndex, item) {\n      var $item = (0, _renderer2.default)(item);\n      var isHidden = itemIndex !== selectedIndex && itemIndex !== newIndex;\n\n      if (!isHidden) {\n        this._renderSpecificItem(itemIndex);\n      }\n\n      $item.toggleClass(MULTIVIEW_ITEM_HIDDEN_CLASS, isHidden);\n      this.setAria(\"hidden\", isHidden || void 0, $item);\n    }.bind(this));\n  },\n  _renderSpecificItem: function _renderSpecificItem(index) {\n    var $item = this._itemElements().eq(index);\n\n    var hasItemContent = $item.find(this._itemContentClass()).length > 0;\n\n    if ((0, _type.isDefined)(index) && !hasItemContent) {\n      this._deferredItems[index].resolve();\n\n      (0, _dom.triggerResizeEvent)($item);\n    }\n  },\n  _refreshItem: function _refreshItem($item, item) {\n    this.callBase($item, item);\n\n    this._updateItemsVisibility(this.option(\"selectedIndex\"));\n  },\n  _setAriaSelected: _common.noop,\n  _updateSelection: function _updateSelection(addedSelection, removedSelection) {\n    var newIndex = addedSelection[0];\n    var prevIndex = removedSelection[0];\n    animation.complete(this._$itemContainer);\n\n    this._updateItems(prevIndex, newIndex);\n\n    var animationDirection = this._animationDirection(newIndex, prevIndex);\n\n    this._animateItemContainer(animationDirection * this._itemWidth(), function () {\n      _translator.move(this._$itemContainer, 0);\n\n      this._updateItems(newIndex);\n\n      this._$itemContainer.width();\n    }.bind(this));\n  },\n  _animateItemContainer: function _animateItemContainer(position, completeCallback) {\n    var duration = this.option(\"animationEnabled\") ? MULTIVIEW_ANIMATION_DURATION : 0;\n    animation.moveTo(this._$itemContainer, position, duration, completeCallback);\n  },\n  _animationDirection: function _animationDirection(newIndex, prevIndex) {\n    var containerPosition = position(this._$itemContainer);\n\n    var indexDifference = (prevIndex - newIndex) * this._getRTLSignCorrection() * this._getItemFocusLoopSignCorrection();\n\n    var isSwipePresent = 0 !== containerPosition;\n    var directionSignVariable = isSwipePresent ? containerPosition : indexDifference;\n    return _math2.default.sign(directionSignVariable);\n  },\n  _getSwipeDisabledState: function _getSwipeDisabledState() {\n    return !this.option(\"swipeEnabled\") || this._itemsCount() <= 1;\n  },\n  _initSwipeable: function _initSwipeable() {\n    var _this2 = this;\n\n    this._createComponent(this.$element(), _swipeable2.default, {\n      disabled: this._getSwipeDisabledState(),\n      elastic: false,\n      itemSizeFunc: this._itemWidth.bind(this),\n      onStart: function onStart(args) {\n        return _this2._swipeStartHandler(args.event);\n      },\n      onUpdated: function onUpdated(args) {\n        return _this2._swipeUpdateHandler(args.event);\n      },\n      onEnd: function onEnd(args) {\n        return _this2._swipeEndHandler(args.event);\n      }\n    });\n  },\n  _swipeStartHandler: function _swipeStartHandler(e) {\n    animation.complete(this._$itemContainer);\n    var selectedIndex = this.option(\"selectedIndex\");\n    var loop = this.option(\"loop\");\n    var lastIndex = this._itemsCount() - 1;\n    var rtl = this.option(\"rtlEnabled\");\n    e.maxLeftOffset = toNumber(loop || (rtl ? selectedIndex > 0 : selectedIndex < lastIndex));\n    e.maxRightOffset = toNumber(loop || (rtl ? selectedIndex < lastIndex : selectedIndex > 0));\n    this._swipeDirection = null;\n  },\n  _swipeUpdateHandler: function _swipeUpdateHandler(e) {\n    var offset = e.offset;\n\n    var swipeDirection = _math2.default.sign(offset) * this._getRTLSignCorrection();\n\n    _translator.move(this._$itemContainer, offset * this._itemWidth());\n\n    if (swipeDirection !== this._swipeDirection) {\n      this._swipeDirection = swipeDirection;\n      var selectedIndex = this.option(\"selectedIndex\");\n\n      var newIndex = this._normalizeIndex(selectedIndex - swipeDirection);\n\n      this._updateItems(selectedIndex, newIndex);\n    }\n  },\n  _swipeEndHandler: function _swipeEndHandler(e) {\n    var targetOffset = e.targetOffset * this._getRTLSignCorrection();\n\n    if (targetOffset) {\n      this.option(\"selectedIndex\", this._normalizeIndex(this.option(\"selectedIndex\") - targetOffset));\n      var $selectedElement = this.itemElements().filter(\".dx-item-selected\");\n      this.option(\"focusStateEnabled\") && this.option(\"focusedElement\", (0, _dom.getPublicElement)($selectedElement));\n    } else {\n      this._animateItemContainer(0, _common.noop);\n    }\n  },\n  _getItemFocusLoopSignCorrection: function _getItemFocusLoopSignCorrection() {\n    return this._itemFocusLooped ? -1 : 1;\n  },\n  _moveFocus: function _moveFocus() {\n    this.callBase.apply(this, arguments);\n    this._itemFocusLooped = false;\n  },\n  _prevItem: function _prevItem($items) {\n    var $result = this.callBase.apply(this, arguments);\n    this._itemFocusLooped = $result.is($items.last());\n    return $result;\n  },\n  _nextItem: function _nextItem($items) {\n    var $result = this.callBase.apply(this, arguments);\n    this._itemFocusLooped = $result.is($items.first());\n    return $result;\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this._clearItemWidthCache();\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._dimensionChanged();\n    }\n  },\n  _updateSwipeDisabledState: function _updateSwipeDisabledState() {\n    var disabled = this._getSwipeDisabledState();\n\n    _swipeable2.default.getInstance(this.$element()).option(\"disabled\", disabled);\n  },\n  _optionChanged: function _optionChanged(args) {\n    var value = args.value;\n\n    switch (args.name) {\n      case \"loop\":\n        this.option(\"loopItemFocus\", value);\n        break;\n\n      case \"animationEnabled\":\n        break;\n\n      case \"swipeEnabled\":\n        this._updateSwipeDisabledState();\n\n        break;\n\n      case \"deferRendering\":\n        this._invalidate();\n\n        break;\n\n      case \"items\":\n        this._updateSwipeDisabledState();\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\n\n(0, _component_registrator2.default)(\"dxMultiView\", MultiView);\nmodule.exports = MultiView;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}