{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../../core/renderer\");\n\nvar noop = require(\"../../../core/utils/common\").noop;\n\nvar registerComponent = require(\"../../../core/component_registrator\");\n\nvar SchedulerWorkSpace = require(\"./ui.scheduler.work_space.indicator\");\n\nvar dateUtils = require(\"../../../core/utils/date\");\n\nvar getBoundingRect = require(\"../../../core/utils/position\").getBoundingRect;\n\nvar dateLocalization = require(\"../../../localization/date\");\n\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\nvar DATE_TABLE_SCROLLABLE_FIXED_CLASS = \"dx-scheduler-scrollable-fixed-content\";\nvar DAYS_IN_WEEK = 7;\nvar DAY_IN_MILLISECONDS = 864e5;\nvar toMs = dateUtils.dateToMilliseconds;\nvar SchedulerWorkSpaceMonth = SchedulerWorkSpace.inherit({\n  _toggleFixedScrollableClass: function _toggleFixedScrollableClass() {\n    this._dateTableScrollable.$content().toggleClass(DATE_TABLE_SCROLLABLE_FIXED_CLASS, !this._isWorkSpaceWithCount() && !this._isVerticalGroupedWorkSpace());\n  },\n  _getElementClass: function _getElementClass() {\n    return MONTH_CLASS;\n  },\n  _getRowCount: function _getRowCount() {\n    return this._isWorkSpaceWithCount() ? 4 * this.option(\"intervalCount\") + 2 : 6;\n  },\n  _getCellCount: function _getCellCount() {\n    return DAYS_IN_WEEK;\n  },\n  _getDateByIndex: function _getDateByIndex(headerIndex) {\n    var resultDate = new Date(this._firstViewDate);\n    resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n    return resultDate;\n  },\n  _getFormat: function _getFormat() {\n    return this._formatWeekday;\n  },\n  _calculateCellIndex: function _calculateCellIndex(rowIndex, cellIndex) {\n    if (this._isVerticalGroupedWorkSpace()) {\n      rowIndex %= this._getRowCount();\n    } else {\n      cellIndex %= this._getCellCount();\n    }\n\n    return rowIndex * this._getCellCount() + cellIndex;\n  },\n  _getInterval: function _getInterval() {\n    return DAY_IN_MILLISECONDS;\n  },\n  _getIntervalBetween: function _getIntervalBetween(currentDate) {\n    var firstViewDate = this.getStartViewDate();\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n  },\n  _getDateByCellIndexes: function _getDateByCellIndexes(rowIndex, cellIndex) {\n    var date = this.callBase(rowIndex, cellIndex);\n\n    this._setStartDayHour(date);\n\n    return date;\n  },\n  getCellWidth: function getCellWidth() {\n    var DAYS_IN_WEEK = 7;\n    var averageWidth = 0;\n\n    this._getCells().slice(0, DAYS_IN_WEEK).each(function (index, element) {\n      return averageWidth += getBoundingRect(element).width;\n    });\n\n    return averageWidth / DAYS_IN_WEEK;\n  },\n  _calculateHiddenInterval: function _calculateHiddenInterval() {\n    return 0;\n  },\n  _insertAllDayRowsIntoDateTable: function _insertAllDayRowsIntoDateTable() {\n    return false;\n  },\n  _getCellCoordinatesByIndex: function _getCellCoordinatesByIndex(index) {\n    var rowIndex = Math.floor(index / this._getCellCount());\n    var cellIndex = index - this._getCellCount() * rowIndex;\n    return {\n      rowIndex: rowIndex,\n      cellIndex: cellIndex\n    };\n  },\n  _createWorkSpaceElements: function _createWorkSpaceElements() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._createWorkSpaceScrollableElements();\n    } else {\n      this.callBase();\n    }\n  },\n  _needCreateCrossScrolling: function _needCreateCrossScrolling() {\n    return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace();\n  },\n  _renderTimePanel: noop,\n  _renderAllDayPanel: noop,\n  _getTableAllDay: noop,\n  _toggleAllDayVisibility: noop,\n  _changeAllDayVisibility: noop,\n  _setFirstViewDate: function _setFirstViewDate() {\n    var firstMonthDate = dateUtils.getFirstMonthDate(this._getViewStartByOptions());\n    this._firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, this.option(\"firstDayOfWeek\") || dateLocalization.firstDayOfWeekIndex());\n\n    this._setStartDayHour(this._firstViewDate);\n\n    var date = this._getViewStartByOptions();\n\n    this._minVisibleDate = new Date(date.setDate(1));\n    this._maxVisibleDate = new Date(new Date(date.setMonth(date.getMonth() + this.option(\"intervalCount\"))).setDate(0));\n  },\n  _getViewStartByOptions: function _getViewStartByOptions() {\n    if (!this.option(\"startDate\")) {\n      return new Date(this.option(\"currentDate\").getTime());\n    } else {\n      var startDate = this._getStartViewDate();\n\n      var currentDate = this.option(\"currentDate\");\n      var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\n      var endDate = new Date(new Date(this._getStartViewDate().setMonth(this._getStartViewDate().getMonth() + diff * this.option(\"intervalCount\"))));\n\n      while (!this._dateInRange(currentDate, startDate, endDate, diff)) {\n        startDate = new Date(endDate);\n\n        if (diff > 0) {\n          startDate.setDate(1);\n        }\n\n        endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * this.option(\"intervalCount\"))));\n      }\n\n      return diff > 0 ? startDate : endDate;\n    }\n  },\n  _getStartViewDate: function _getStartViewDate() {\n    var firstMonthDate = dateUtils.getFirstMonthDate(this.option(\"startDate\"));\n    return firstMonthDate;\n  },\n  _renderTableBody: function _renderTableBody(options) {\n    options.getCellText = this._getCellText.bind(this);\n    this.callBase(options);\n  },\n  _getCellText: function _getCellText(rowIndex, cellIndex) {\n    if (this.isGroupedByDate()) {\n      cellIndex = Math.floor(cellIndex / this._getGroupCount());\n    } else {\n      cellIndex %= this._getCellCount();\n    }\n\n    var date = this._getDate(rowIndex, cellIndex);\n\n    if (this._isWorkSpaceWithCount() && this._isFirstDayOfMonth(date)) {\n      return this._formatMonthAndDay(date);\n    }\n\n    return dateLocalization.format(date, \"dd\");\n  },\n  _formatMonthAndDay: function _formatMonthAndDay(date) {\n    var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\n    return [monthName, dateLocalization.format(date, \"day\")].join(\" \");\n  },\n  _getDate: function _getDate(week, day) {\n    var result = new Date(this._firstViewDate);\n\n    var lastRowInDay = this._getRowCount();\n\n    result.setDate(result.getDate() + week % lastRowInDay * DAYS_IN_WEEK + day);\n    return result;\n  },\n  _updateIndex: function _updateIndex(index) {\n    return index;\n  },\n  _prepareCellData: function _prepareCellData(rowIndex, cellIndex, cell) {\n    var data = this.callBase(rowIndex, cellIndex, cell);\n    var $cell = $(cell);\n    $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, this._isCurrentDate(data.startDate)).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, this._isFirstDayOfMonth(data.startDate)).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, this._isOtherMonth(data.startDate));\n    return data;\n  },\n  _isCurrentDate: function _isCurrentDate(cellDate) {\n    var today = new Date();\n    return dateUtils.sameDate(cellDate, today);\n  },\n  _isFirstDayOfMonth: function _isFirstDayOfMonth(cellDate) {\n    return this._isWorkSpaceWithCount() && 1 === cellDate.getDate();\n  },\n  _isOtherMonth: function _isOtherMonth(cellDate) {\n    return !dateUtils.dateInRange(cellDate, this._minVisibleDate, this._maxVisibleDate, \"date\");\n  },\n  needRenderDateTimeIndication: function needRenderDateTimeIndication() {\n    return false;\n  },\n  getCellDuration: function getCellDuration() {\n    return 36e5 * this._calculateDayDuration();\n  },\n  getIntervalDuration: function getIntervalDuration() {\n    return toMs(\"day\");\n  },\n  getTimePanelWidth: function getTimePanelWidth() {\n    return 0;\n  },\n  getPositionShift: function getPositionShift(timeShift) {\n    return {\n      cellPosition: timeShift * this.getCellWidth(),\n      top: 0,\n      left: 0\n    };\n  },\n  getCellCountToLastViewDate: function getCellCountToLastViewDate(date) {\n    var firstDateTime = date.getTime();\n    var lastDateTime = this.getEndViewDate().getTime();\n    var dayDurationInMs = this.getCellDuration();\n    return Math.ceil((lastDateTime - firstDateTime) / dayDurationInMs);\n  },\n  supportAllDayRow: function supportAllDayRow() {\n    return false;\n  },\n  keepOriginalHours: function keepOriginalHours() {\n    return true;\n  },\n  calculateEndDate: function calculateEndDate(startDate) {\n    var startDateCopy = new Date(startDate);\n    return new Date(startDateCopy.setHours(this.option(\"endDayHour\")));\n  },\n  getWorkSpaceLeftOffset: function getWorkSpaceLeftOffset() {\n    return 0;\n  },\n  needApplyCollectorOffset: function needApplyCollectorOffset() {\n    return true;\n  },\n  _getDateTableBorderOffset: function _getDateTableBorderOffset() {\n    return this._getDateTableBorder();\n  },\n  _getCellPositionByIndex: function _getCellPositionByIndex(index, groupIndex) {\n    var position = this.callBase(index, groupIndex);\n\n    var rowIndex = this._getCellCoordinatesByIndex(index).rowIndex;\n\n    var calculatedTopOffset;\n\n    if (!this._isVerticalGroupedWorkSpace()) {\n      calculatedTopOffset = this.getCellHeight() * rowIndex;\n    } else {\n      calculatedTopOffset = this.getCellHeight() * (rowIndex + groupIndex * this._getRowCount());\n    }\n\n    if (calculatedTopOffset) {\n      position.top = calculatedTopOffset;\n    }\n\n    return position;\n  },\n  _getHeaderDate: function _getHeaderDate() {\n    return this._getViewStartByOptions();\n  },\n  _supportCompactDropDownAppointments: function _supportCompactDropDownAppointments() {\n    return false;\n  },\n  scrollToTime: noop,\n  _getRowCountWithAllDayRows: function _getRowCountWithAllDayRows() {\n    return this._getRowCount();\n  }\n});\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\nmodule.exports = SchedulerWorkSpaceMonth;","map":null,"metadata":{},"sourceType":"script"}