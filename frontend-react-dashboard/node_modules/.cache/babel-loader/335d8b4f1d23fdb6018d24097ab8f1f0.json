{"ast":null,"code":"/**\r\n * DevExtreme (ui/widget/ui.search_box_mixin.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _text_box = require(\"../text_box\");\n\nvar _text_box2 = _interopRequireDefault(_text_box);\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = {\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      searchMode: \"\",\n      searchExpr: null,\n      searchValue: \"\",\n      searchEnabled: false,\n      searchEditorOptions: {}\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderSearch();\n\n    this.callBase();\n  },\n  _renderSearch: function _renderSearch() {\n    var $element = this.$element();\n    var searchEnabled = this.option(\"searchEnabled\");\n\n    var searchBoxClassName = this._addWidgetPrefix(\"search\");\n\n    var rootElementClassName = this._addWidgetPrefix(\"with-search\");\n\n    if (!searchEnabled) {\n      $element.removeClass(rootElementClassName);\n\n      this._removeSearchBox();\n\n      return;\n    }\n\n    var editorOptions = this._getSearchEditorOptions();\n\n    if (this._searchEditor) {\n      this._searchEditor.option(editorOptions);\n    } else {\n      $element.addClass(rootElementClassName);\n      this._$searchEditorElement = (0, _renderer2.default)(\"<div>\").addClass(searchBoxClassName).prependTo($element);\n      this._searchEditor = this._createComponent(this._$searchEditorElement, _text_box2.default, editorOptions);\n    }\n  },\n  _removeSearchBox: function _removeSearchBox() {\n    this._$searchEditorElement && this._$searchEditorElement.remove();\n    delete this._$searchEditorElement;\n    delete this._searchEditor;\n  },\n  _getSearchEditorOptions: function _getSearchEditorOptions() {\n    var that = this;\n    var userEditorOptions = that.option(\"searchEditorOptions\");\n\n    var searchText = _message2.default.format(\"Search\");\n\n    return (0, _extend.extend)({\n      mode: \"search\",\n      placeholder: searchText,\n      tabIndex: that.option(\"tabIndex\"),\n      value: that.option(\"searchValue\"),\n      valueChangeEvent: \"input\",\n      inputAttr: {\n        \"aria-label\": searchText\n      },\n      onValueChanged: function onValueChanged(e) {\n        var searchTimeout = that.option(\"searchTimeout\");\n        that._valueChangeDeferred = new _deferred.Deferred();\n        clearTimeout(that._valueChangeTimeout);\n\n        that._valueChangeDeferred.done(function () {\n          this.option(\"searchValue\", e.value);\n        }.bind(that));\n\n        if (e.event && \"input\" === e.event.type && searchTimeout) {\n          that._valueChangeTimeout = setTimeout(function () {\n            that._valueChangeDeferred.resolve();\n          }, searchTimeout);\n        } else {\n          that._valueChangeDeferred.resolve();\n        }\n      }\n    }, userEditorOptions);\n  },\n  _getAriaTarget: function _getAriaTarget() {\n    if (this.option(\"searchEnabled\")) {\n      return this._itemContainer(true);\n    }\n\n    return this.$element();\n  },\n  _focusTarget: function _focusTarget() {\n    if (this.option(\"searchEnabled\")) {\n      return this._itemContainer(true);\n    }\n\n    return this.callBase();\n  },\n  _updateFocusState: function _updateFocusState(e, isFocused) {\n    if (this.option(\"searchEnabled\")) {\n      this._toggleFocusClass(isFocused, this.$element());\n    }\n\n    this.callBase(e, isFocused);\n  },\n  getOperationBySearchMode: function getOperationBySearchMode(searchMode) {\n    return \"equals\" === searchMode ? \"=\" : searchMode;\n  },\n  _cleanAria: function _cleanAria($target) {\n    this.setAria({\n      role: null,\n      activedescendant: null\n    }, $target);\n    $target.attr(\"tabIndex\", null);\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"searchEnabled\":\n      case \"searchEditorOptions\":\n        this._cleanAria(this.option(\"searchEnabled\") ? this.$element() : this._itemContainer());\n\n        this._invalidate();\n\n        break;\n\n      case \"searchExpr\":\n      case \"searchMode\":\n      case \"searchValue\":\n        if (!this._dataSource) {\n          _ui2.default.log(\"W1009\");\n\n          return;\n        }\n\n        if (\"searchMode\" === args.name) {\n          this._dataSource.searchOperation(this.getOperationBySearchMode(args.value));\n        } else {\n          this._dataSource[args.name](args.value);\n        }\n\n        this._dataSource.load();\n\n        break;\n\n      case \"searchTimeout\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  focus: function focus() {\n    if (!this.option(\"focusedElement\") && this.option(\"searchEnabled\")) {\n      this._searchEditor && this._searchEditor.focus();\n      return;\n    }\n\n    this.callBase();\n  },\n  _refresh: function _refresh() {\n    if (this._valueChangeDeferred) {\n      this._valueChangeDeferred.resolve();\n    }\n\n    this.callBase();\n  }\n};","map":null,"metadata":{},"sourceType":"script"}