{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/timezones/ui.scheduler.timezones.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar query = require(\"../../../data/query\");\n\nvar errors = require(\"../../../core/errors\");\n\nvar tzData = require(\"./ui.scheduler.timezones_data\");\n\nvar SchedulerTimezones = {\n  _displayNames: tzData.displayNames,\n  _list: tzData.timezones,\n  getTimezones: function getTimezones() {\n    return this._list;\n  },\n  getDisplayNames: function getDisplayNames() {\n    return this._displayNames;\n  },\n  queryableTimezones: function queryableTimezones() {\n    return query(this.getTimezones());\n  },\n  getTimezoneById: function getTimezoneById(id) {\n    var result;\n    var i = 0;\n    var tzList = this.getTimezones();\n\n    if (id) {\n      while (!result) {\n        if (!tzList[i]) {\n          errors.log(\"W0009\", id);\n          return;\n        }\n\n        var currentId = tzList[i].id;\n\n        if (currentId === id) {\n          result = tzList[i];\n        }\n\n        i++;\n      }\n    }\n\n    return result;\n  },\n  getTimezoneOffsetById: function getTimezoneOffsetById(id, dateTimeStamp) {\n    var tz = this.getTimezoneById(id);\n    var offsets;\n    var offsetIndices;\n    var untils;\n    var result;\n\n    if (tz) {\n      if (tz.link) {\n        var rootTz = this.getTimezones()[tz.link];\n        offsets = rootTz.offsets;\n        untils = rootTz.untils;\n        offsetIndices = rootTz.offsetIndices;\n      } else {\n        offsets = tz.offsets;\n        untils = tz.untils;\n        offsetIndices = tz.offsetIndices;\n      }\n\n      result = this.getUtcOffset(offsets, offsetIndices, untils, dateTimeStamp);\n    }\n\n    return result;\n  },\n  getUtcOffset: function getUtcOffset(offsets, offsetIndices, untils, dateTimeStamp) {\n    var index = 0;\n    var offsetIndicesList = offsetIndices.split(\"\");\n    var untilsList = untils.split(\"|\").map(function (until) {\n      if (\"Infinity\" === until) {\n        return null;\n      }\n\n      return 1e3 * parseInt(until, 36);\n    });\n    var currentUntil = 0;\n\n    for (var i = 0, listLength = untilsList.length; i < listLength; i++) {\n      currentUntil += untilsList[i];\n\n      if (dateTimeStamp >= currentUntil) {\n        index = i;\n        continue;\n      } else {\n        break;\n      }\n    }\n\n    if (untilsList[index + 1]) {\n      index++;\n    }\n\n    return offsets[Number(offsetIndicesList[index])];\n  },\n  getTimezoneShortDisplayNameById: function getTimezoneShortDisplayNameById(id) {\n    var tz = this.getTimezoneById(id);\n    var result;\n\n    if (tz) {\n      result = tz.DisplayName.substring(0, 11);\n    }\n\n    return result;\n  },\n  getTimezonesDisplayName: function getTimezonesDisplayName() {\n    return query(this.getDisplayNames()).sortBy().toArray();\n  },\n  getTimezoneDisplayNameById: function getTimezoneDisplayNameById(id) {\n    var tz = this.getTimezoneById(id);\n    return tz ? this.getDisplayNames()[tz.winIndex] : \"\";\n  },\n  getSimilarTimezones: function getSimilarTimezones(id) {\n    if (!id) {\n      return [];\n    }\n\n    var tz = this.getTimezoneById(id);\n    return this.getTimezonesIdsByWinIndex(tz.winIndex);\n  },\n  getTimezonesIdsByWinIndex: function getTimezonesIdsByWinIndex(winIndex) {\n    return this.queryableTimezones().filter([\"winIndex\", winIndex]).sortBy(\"title\").toArray().map(function (item) {\n      return {\n        id: item.id,\n        displayName: item.title\n      };\n    });\n  },\n  getTimezonesIdsByDisplayName: function getTimezonesIdsByDisplayName(displayName) {\n    var displayNameIndex = this.getDisplayNames().indexOf(displayName);\n    return this.getTimezonesIdsByWinIndex(displayNameIndex);\n  },\n  getClientTimezoneOffset: function getClientTimezoneOffset(date) {\n    return 6e4 * date.getTimezoneOffset();\n  },\n  processDateDependOnTimezone: function processDateDependOnTimezone(date, tzOffset) {\n    var result = new Date(date);\n\n    if (tzOffset) {\n      var tzDiff = tzOffset + this.getClientTimezoneOffset(date) / 36e5;\n      result = new Date(result.setHours(result.getHours() + tzDiff));\n    }\n\n    return result;\n  }\n};\nmodule.exports = SchedulerTimezones;","map":null,"metadata":{},"sourceType":"script"}