{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/ui.scheduler.header.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar typeUtils = require(\"../../core/utils/type\");\n\nvar noop = require(\"../../core/utils/common\").noop;\n\nvar isDefined = require(\"../../core/utils/type\").isDefined;\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar inArray = require(\"../../core/utils/array\").inArray;\n\nvar camelize = require(\"../../core/utils/inflector\").camelize;\n\nvar registerComponent = require(\"../../core/component_registrator\");\n\nvar Widget = require(\"../widget/ui.widget\");\n\nvar publisherMixin = require(\"./ui.scheduler.publisher_mixin\");\n\nvar SchedulerNavigator = require(\"./ui.scheduler.navigator\");\n\nvar DropDownMenu = require(\"../drop_down_menu\");\n\nvar Tabs = require(\"../tabs\");\n\nvar errors = require(\"../../core/errors\");\n\nvar messageLocalization = require(\"../../localization/message\");\n\nvar COMPONENT_CLASS = \"dx-scheduler-header\";\nvar VIEW_SWITCHER_CLASS = \"dx-scheduler-view-switcher\";\nvar VIEW_SWITCHER_LABEL_CLASS = \"dx-scheduler-view-switcher-label\";\nvar STEP_MAP = {\n  day: \"day\",\n  week: \"week\",\n  workWeek: \"workWeek\",\n  month: \"month\",\n  timelineDay: \"day\",\n  timelineWeek: \"week\",\n  timelineWorkWeek: \"workWeek\",\n  timelineMonth: \"month\",\n  agenda: \"agenda\"\n};\nvar VIEWS = [\"day\", \"week\", \"workWeek\", \"month\", \"timelineDay\", \"timelineWeek\", \"timelineWorkWeek\", \"timelineMonth\", \"agenda\"];\nvar SchedulerHeader = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      views: [],\n      isAdaptive: false,\n      intervalCount: 1,\n      currentView: \"day\",\n      firstDayOfWeek: void 0,\n      currentDate: new Date(),\n      min: void 0,\n      max: void 0,\n      useDropDownViewSwitcher: false,\n      _dropDownButtonIcon: \"overlay\"\n    });\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      currentView: true\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    var value = args.value;\n\n    switch (args.name) {\n      case \"views\":\n        this._validateViews();\n\n        this._viewSwitcher.option({\n          items: value,\n          selectedItem: this.option(\"currentView\")\n        });\n\n        break;\n\n      case \"customizeDateNavigatorText\":\n        this._navigator.option(args.name, value);\n\n        break;\n\n      case \"currentView\":\n        this._viewSwitcher.option(\"selectedItem\", value);\n\n        this._navigator.option(\"step\", STEP_MAP[this._getCurrentViewType()]);\n\n        this._changeViewSwitcherLabelText();\n\n        break;\n\n      case \"currentDate\":\n        this._navigator.option(\"date\", value);\n\n        break;\n\n      case \"displayedDate\":\n        this._navigator.option(\"displayedDate\", value);\n\n        break;\n\n      case \"min\":\n      case \"max\":\n      case \"firstDayOfWeek\":\n      case \"intervalCount\":\n        this._navigator.option(args.name, value);\n\n        break;\n\n      case \"tabIndex\":\n      case \"focusStateEnabled\":\n        this._viewSwitcher.option(args.name, value);\n\n        this._navigator.option(args.name, value);\n\n        this.callBase(args);\n        break;\n\n      case \"useDropDownViewSwitcher\":\n        this._refreshViewSwitcher();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _init: function _init() {\n    this.callBase();\n    this.$element().addClass(COMPONENT_CLASS);\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n\n    this._renderNavigator();\n\n    this._renderViewSwitcher();\n  },\n  _renderNavigator: function _renderNavigator() {\n    this._navigator = this._createComponent(\"<div>\", SchedulerNavigator, {\n      min: this.option(\"min\"),\n      max: this.option(\"max\"),\n      intervalCount: this.option(\"intervalCount\"),\n      date: this.option(\"currentDate\"),\n      step: STEP_MAP[this._getCurrentViewType()],\n      firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n      tabIndex: this.option(\"tabIndex\"),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      observer: this.option(\"observer\"),\n      customizeDateNavigatorText: this.option(\"customizeDateNavigatorText\")\n    });\n\n    this._navigator.$element().appendTo(this.$element());\n  },\n  _renderViewSwitcher: function _renderViewSwitcher() {\n    this._validateViews();\n\n    var $viewSwitcher = $(\"<div>\").addClass(VIEW_SWITCHER_CLASS).appendTo(this.$element());\n    this.option(\"useDropDownViewSwitcher\") ? this._renderViewSwitcherDropDownMenu($viewSwitcher) : this._renderViewSwitcherTabs($viewSwitcher);\n  },\n  _validateViews: function _validateViews() {\n    var views = this.option(\"views\");\n    each(views, function (_, view) {\n      var isViewIsObject = typeUtils.isObject(view);\n      var viewType = isViewIsObject && view.type ? view.type : view;\n\n      if (inArray(viewType, VIEWS) === -1) {\n        errors.log(\"W0008\", viewType);\n      }\n    });\n  },\n  _getCurrentViewType: function _getCurrentViewType() {\n    var currentView = this.option(\"currentView\");\n    return currentView.type || currentView;\n  },\n  _renderViewSwitcherTabs: function _renderViewSwitcherTabs($element) {\n    var that = this;\n    $element.addClass(Tabs.getTabsExpandedClass);\n    this._viewSwitcher = this._createComponent($element, Tabs, {\n      selectionRequired: true,\n      scrollingEnabled: true,\n      onSelectionChanged: this._updateCurrentView.bind(this),\n      items: this.option(\"views\"),\n      itemTemplate: function itemTemplate(item) {\n        return $(\"<span>\").addClass(\"dx-tab-text\").text(that._getItemText(item));\n      },\n      selectedItem: this.option(\"currentView\"),\n      tabIndex: this.option(\"tabIndex\"),\n      focusStateEnabled: this.option(\"focusStateEnabled\")\n    });\n  },\n  _getItemText: function _getItemText(item) {\n    return item.name || messageLocalization.format(\"dxScheduler-switcher\" + camelize(item.type || item, true));\n  },\n  _refreshViewSwitcher: function _refreshViewSwitcher() {\n    this._viewSwitcher._dispose();\n\n    this._viewSwitcher.$element().remove();\n\n    delete this._viewSwitcher;\n\n    this._removeViewSwitcherLabel();\n\n    this._renderViewSwitcher();\n  },\n  _removeViewSwitcherLabel: function _removeViewSwitcherLabel() {\n    if (isDefined(this._$viewSwitcherLabel)) {\n      this._$viewSwitcherLabel.detach();\n\n      this._$viewSwitcherLabel.remove();\n\n      delete this._$viewSwitcherLabel;\n    }\n  },\n  _renderViewSwitcherDropDownMenu: function _renderViewSwitcherDropDownMenu($element) {\n    var that = this;\n    this._$viewSwitcherLabel = $(\"<div>\").addClass(VIEW_SWITCHER_LABEL_CLASS).appendTo(this.$element());\n\n    this._changeViewSwitcherLabelText();\n\n    this._viewSwitcher = this._createComponent($element, DropDownMenu, {\n      onItemClick: this._updateCurrentView.bind(this),\n      buttonIcon: this.option(\"_dropDownButtonIcon\"),\n      items: this.option(\"views\"),\n      selectionMode: this.option(\"isAdaptive\") ? \"single\" : \"none\",\n      selectedItemKeys: [this.option(\"currentView\")],\n      itemTemplate: function itemTemplate(item) {\n        return $(\"<span>\").addClass(\"dx-dropdownmenu-item-text\").text(that._getItemText(item));\n      }\n    });\n  },\n  _changeViewSwitcherLabelText: function _changeViewSwitcherLabelText() {\n    if (!isDefined(this._$viewSwitcherLabel)) {\n      return;\n    }\n\n    var currentView = this.option(\"currentView\");\n\n    var currentViewText = this._getItemText(currentView);\n\n    this._$viewSwitcherLabel.text(currentViewText);\n  },\n  _getCurrentViewName: function _getCurrentViewName(currentView) {\n    return typeUtils.isObject(currentView) ? currentView.name || currentView.type : currentView;\n  },\n  _updateCurrentView: function _updateCurrentView(e) {\n    var selectedItem = e.itemData || e.component.option(\"selectedItem\");\n\n    var viewName = this._getCurrentViewName(selectedItem);\n\n    this.notifyObserver(\"currentViewUpdated\", viewName);\n  },\n  _renderFocusTarget: noop\n}).include(publisherMixin);\nregisterComponent(\"dxSchedulerHeader\", SchedulerHeader);\nmodule.exports = SchedulerHeader;","map":null,"metadata":{},"sourceType":"script"}