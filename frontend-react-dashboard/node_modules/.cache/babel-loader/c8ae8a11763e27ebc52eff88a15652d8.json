{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/ui.scheduler.resource_manager.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _array = require(\"../../core/utils/array\");\n\nvar _array2 = _interopRequireDefault(_array);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _object = require(\"../../core/utils/object\");\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _query = require(\"../../data/query\");\n\nvar _query2 = _interopRequireDefault(_query);\n\nvar _data = require(\"../../core/utils/data\");\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _data_source = require(\"../../data/data_source/data_source\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _utils = require(\"../../data/data_source/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar getValueExpr = function getValueExpr(resource) {\n  return resource.valueExpr || \"id\";\n};\n\nvar getDisplayExpr = function getDisplayExpr(resource) {\n  return resource.displayExpr || \"text\";\n};\n\nvar ResourceManager = function () {\n  function ResourceManager(resources) {\n    _classCallCheck(this, ResourceManager);\n\n    this._resourceLoader = {};\n    this.setResources(resources);\n  }\n\n  _createClass(ResourceManager, [{\n    key: \"_createWrappedDataSource\",\n    value: function value(dataSource) {\n      if (dataSource instanceof _data_source.DataSource) {\n        return dataSource;\n      }\n\n      var result = {\n        store: (0, _utils.normalizeDataSourceOptions)(dataSource).store,\n        pageSize: 0\n      };\n\n      if (!Array.isArray(dataSource)) {\n        result.filter = dataSource.filter;\n      }\n\n      return new _data_source.DataSource(result);\n    }\n  }, {\n    key: \"_mapResourceData\",\n    value: function value(resource, data) {\n      var valueGetter = _data2.default.compileGetter(getValueExpr(resource));\n\n      var displayGetter = _data2.default.compileGetter(getDisplayExpr(resource));\n\n      return _iterator2.default.map(data, function (item) {\n        var result = {\n          id: valueGetter(item),\n          text: displayGetter(item)\n        };\n\n        if (item.color) {\n          result.color = item.color;\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"_isMultipleResource\",\n    value: function value(resourceField) {\n      var result = false;\n\n      _iterator2.default.each(this.getResources(), function (_, resource) {\n        var field = this.getField(resource);\n\n        if (field === resourceField) {\n          result = resource.allowMultiple;\n          return false;\n        }\n      }.bind(this));\n\n      return result;\n    }\n  }, {\n    key: \"getDataAccessors\",\n    value: function value(field, type) {\n      var result = null;\n\n      _iterator2.default.each(this._dataAccessors[type], function (accessorName, accessors) {\n        if (field === accessorName) {\n          result = accessors;\n          return false;\n        }\n      });\n\n      return result;\n    }\n  }, {\n    key: \"getField\",\n    value: function value(resource) {\n      return resource.fieldExpr || resource.field;\n    }\n  }, {\n    key: \"setResources\",\n    value: function value(resources) {\n      this._resources = resources;\n      this._dataAccessors = {\n        getter: {},\n        setter: {}\n      };\n      this._resourceFields = _iterator2.default.map(resources || [], function (resource) {\n        var field = this.getField(resource);\n        this._dataAccessors.getter[field] = _data2.default.compileGetter(field);\n        this._dataAccessors.setter[field] = _data2.default.compileSetter(field);\n        return field;\n      }.bind(this));\n    }\n  }, {\n    key: \"getResources\",\n    value: function value() {\n      return this._resources || [];\n    }\n  }, {\n    key: \"getResourcesData\",\n    value: function value() {\n      return this._resourcesData || [];\n    }\n  }, {\n    key: \"getEditors\",\n    value: function value() {\n      var result = [];\n      var that = this;\n\n      _iterator2.default.each(this.getResources(), function (i, resource) {\n        var field = that.getField(resource);\n\n        var currentResourceItems = that._getResourceDataByField(field);\n\n        result.push({\n          editorOptions: {\n            dataSource: currentResourceItems.length ? currentResourceItems : that._createWrappedDataSource(resource.dataSource),\n            displayExpr: getDisplayExpr(resource),\n            valueExpr: getValueExpr(resource)\n          },\n          dataField: field,\n          editorType: resource.allowMultiple ? \"dxTagBox\" : \"dxSelectBox\",\n          label: {\n            text: resource.label || field\n          }\n        });\n      });\n\n      return result;\n    }\n  }, {\n    key: \"getResourceDataByValue\",\n    value: function value(field, _value) {\n      var that = this;\n      var result = new _deferred.Deferred();\n\n      _iterator2.default.each(this.getResources(), function (_, resource) {\n        var resourceField = that.getField(resource);\n\n        if (resourceField === field) {\n          var dataSource = that._createWrappedDataSource(resource.dataSource);\n\n          var valueExpr = getValueExpr(resource);\n\n          if (!that._resourceLoader[field]) {\n            that._resourceLoader[field] = dataSource.load();\n          }\n\n          that._resourceLoader[field].done(function (data) {\n            var filteredData = (0, _query2.default)(data).filter(valueExpr, _value).toArray();\n            delete that._resourceLoader[field];\n            result.resolve(filteredData[0]);\n          }).fail(function () {\n            delete that._resourceLoader[field];\n            result.reject();\n          });\n\n          return false;\n        }\n      });\n\n      return result.promise();\n    }\n  }, {\n    key: \"setResourcesToItem\",\n    value: function value(itemData, resources) {\n      var resourcesSetter = this._dataAccessors.setter;\n\n      for (var name in resources) {\n        if (Object.prototype.hasOwnProperty.call(resources, name)) {\n          var resourceData = resources[name];\n          resourcesSetter[name](itemData, this._isMultipleResource(name) ? _array2.default.wrapToArray(resourceData) : resourceData);\n        }\n      }\n    }\n  }, {\n    key: \"getResourcesFromItem\",\n    value: function value(itemData, wrapOnlyMultipleResources) {\n      var _this = this;\n\n      var result = null;\n\n      if (!(0, _type.isDefined)(wrapOnlyMultipleResources)) {\n        wrapOnlyMultipleResources = false;\n      }\n\n      this._resourceFields.forEach(function (field) {\n        _iterator2.default.each(itemData, function (fieldName, fieldValue) {\n          var tempObject = {};\n          tempObject[fieldName] = fieldValue;\n\n          var resourceData = _this.getDataAccessors(field, \"getter\")(tempObject);\n\n          if ((0, _type.isDefined)(resourceData)) {\n            if (!result) {\n              result = {};\n            }\n\n            if (1 === resourceData.length) {\n              resourceData = resourceData[0];\n            }\n\n            if (!wrapOnlyMultipleResources || wrapOnlyMultipleResources && _this._isMultipleResource(field)) {\n              _this.getDataAccessors(field, \"setter\")(tempObject, _array2.default.wrapToArray(resourceData));\n            } else {\n              _this.getDataAccessors(field, \"setter\")(tempObject, resourceData);\n            }\n\n            (0, _extend.extend)(result, tempObject);\n            return true;\n          }\n        });\n      });\n\n      return result;\n    }\n  }, {\n    key: \"loadResources\",\n    value: function value(groups) {\n      var result = new _deferred.Deferred();\n      var that = this;\n      var deferreds = [];\n\n      _iterator2.default.each(this.getResourcesByFields(groups), function (i, resource) {\n        var deferred = new _deferred.Deferred();\n        var field = that.getField(resource);\n        deferreds.push(deferred);\n\n        that._createWrappedDataSource(resource.dataSource).load().done(function (data) {\n          deferred.resolve({\n            name: field,\n            items: that._mapResourceData(resource, data),\n            data: data\n          });\n        }).fail(function () {\n          deferred.reject();\n        });\n      });\n\n      if (!deferreds.length) {\n        that._resourcesData = [];\n        return result.resolve([]);\n      }\n\n      _deferred.when.apply(null, deferreds).done(function () {\n        var data = Array.prototype.slice.call(arguments);\n\n        var mapFunction = function mapFunction(obj) {\n          return {\n            name: obj.name,\n            items: obj.items,\n            data: obj.data\n          };\n        };\n\n        that._resourcesData = data;\n        result.resolve(data.map(mapFunction));\n      }).fail(function () {\n        result.reject();\n      });\n\n      return result.promise();\n    }\n  }, {\n    key: \"getResourcesByFields\",\n    value: function value(fields) {\n      return (0, _common.grep)(this.getResources(), function (resource) {\n        var field = this.getField(resource);\n        return (0, _array.inArray)(field, fields) > -1;\n      }.bind(this));\n    }\n  }, {\n    key: \"getResourceByField\",\n    value: function value(field) {\n      return this.getResourcesByFields([field])[0] || {};\n    }\n  }, {\n    key: \"getResourceColor\",\n    value: function value(field, _value2) {\n      var valueExpr = this.getResourceByField(field).valueExpr || \"id\";\n\n      var valueGetter = _data2.default.compileGetter(valueExpr);\n\n      var colorExpr = this.getResourceByField(field).colorExpr || \"color\";\n\n      var colorGetter = _data2.default.compileGetter(colorExpr);\n\n      var result = new _deferred.Deferred();\n\n      var resourceData = this._getResourceDataByField(field);\n\n      var resourceDataLength = resourceData.length;\n      var color;\n\n      if (resourceDataLength) {\n        for (var i = 0; i < resourceDataLength; i++) {\n          if (valueGetter(resourceData[i]) === _value2) {\n            color = colorGetter(resourceData[i]);\n            break;\n          }\n        }\n\n        result.resolve(color);\n      } else {\n        this.getResourceDataByValue(field, _value2).done(function (resourceData) {\n          if (resourceData) {\n            color = colorGetter(resourceData);\n          }\n\n          result.resolve(color);\n        }).fail(function () {\n          result.reject();\n        });\n      }\n\n      return result.promise();\n    }\n  }, {\n    key: \"getResourceForPainting\",\n    value: function value(groups) {\n      var resources = this.getResources();\n      var result;\n\n      _iterator2.default.each(resources, function (index, resource) {\n        if (resource.useColorAsDefault) {\n          result = resource;\n          return false;\n        }\n      });\n\n      if (!result) {\n        if (Array.isArray(groups) && groups.length) {\n          resources = this.getResourcesByFields(groups);\n        }\n\n        result = resources[resources.length - 1];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"createResourcesTree\",\n    value: function value(groups) {\n      var leafIndex = 0;\n      var groupIndex = groupIndex || 0;\n\n      function make(group, groupIndex, result, parent) {\n        result = result || [];\n\n        for (var i = 0; i < group.items.length; i++) {\n          var currentGroupItem = group.items[i];\n          var resultItem = {\n            name: group.name,\n            value: currentGroupItem.id,\n            title: currentGroupItem.text,\n            data: group.data && group.data[i],\n            children: [],\n            parent: parent ? parent : null\n          };\n          result.push(resultItem);\n          var nextGroupIndex = groupIndex + 1;\n\n          if (groups[nextGroupIndex]) {\n            make.call(this, groups[nextGroupIndex], nextGroupIndex, resultItem.children, resultItem);\n          }\n\n          if (!resultItem.children.length) {\n            resultItem.leafIndex = leafIndex;\n            leafIndex++;\n          }\n        }\n\n        return result;\n      }\n\n      return make.call(this, groups[0], 0);\n    }\n  }, {\n    key: \"_hasGroupItem\",\n    value: function value(appointmentResources, groupName, itemValue) {\n      var group = this.getDataAccessors(groupName, \"getter\")(appointmentResources);\n\n      if (group) {\n        if ((0, _array.inArray)(itemValue, group) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_getResourceDataByField\",\n    value: function value(fieldName) {\n      var loadedResources = this.getResourcesData();\n      var currentResourceData = [];\n\n      for (var i = 0, resourceCount = loadedResources.length; i < resourceCount; i++) {\n        if (loadedResources[i].name === fieldName) {\n          currentResourceData = loadedResources[i].data;\n          break;\n        }\n      }\n\n      return currentResourceData;\n    }\n  }, {\n    key: \"getResourceTreeLeaves\",\n    value: function value(tree, appointmentResources, result) {\n      result = result || [];\n\n      for (var i = 0; i < tree.length; i++) {\n        if (!this._hasGroupItem(appointmentResources, tree[i].name, tree[i].value)) {\n          continue;\n        }\n\n        if ((0, _type.isDefined)(tree[i].leafIndex)) {\n          result.push(tree[i].leafIndex);\n        }\n\n        if (tree[i].children) {\n          this.getResourceTreeLeaves(tree[i].children, appointmentResources, result);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"groupAppointmentsByResources\",\n    value: function value(appointments, resources) {\n      var tree = this.createResourcesTree(resources);\n      var result = {};\n\n      _iterator2.default.each(appointments, function (_, appointment) {\n        var appointmentResources = this.getResourcesFromItem(appointment);\n        var treeLeaves = this.getResourceTreeLeaves(tree, appointmentResources);\n\n        for (var i = 0; i < treeLeaves.length; i++) {\n          if (!result[treeLeaves[i]]) {\n            result[treeLeaves[i]] = [];\n          }\n\n          result[treeLeaves[i]].push(_object2.default.deepExtendArraySafe({}, appointment, true));\n        }\n      }.bind(this));\n\n      return result;\n    }\n  }, {\n    key: \"reduceResourcesTree\",\n    value: function value(tree, existingAppointments, _result) {\n      _result = _result ? _result.children : [];\n      var that = this;\n      tree.forEach(function (node, index) {\n        var ok = false;\n        var resourceName = node.name;\n        var resourceValue = node.value;\n        var resourceTitle = node.title;\n        var resourceData = node.data;\n        var resourceGetter = that.getDataAccessors(resourceName, \"getter\");\n        existingAppointments.forEach(function (appointment) {\n          if (!ok) {\n            var resourceFromAppointment = resourceGetter(appointment);\n\n            if (Array.isArray(resourceFromAppointment)) {\n              if (resourceFromAppointment.indexOf(resourceValue) > -1) {\n                _result.push({\n                  name: resourceName,\n                  value: resourceValue,\n                  title: resourceTitle,\n                  data: resourceData,\n                  children: []\n                });\n\n                ok = true;\n              }\n            } else {\n              if (resourceFromAppointment === resourceValue) {\n                _result.push({\n                  name: resourceName,\n                  value: resourceValue,\n                  title: resourceTitle,\n                  data: resourceData,\n                  children: []\n                });\n\n                ok = true;\n              }\n            }\n          }\n        });\n\n        if (ok && node.children && node.children.length) {\n          that.reduceResourcesTree(node.children, existingAppointments, _result[index]);\n        }\n      });\n      return _result;\n    }\n  }]);\n\n  return ResourceManager;\n}();\n\nexports.default = ResourceManager;","map":null,"metadata":{},"sourceType":"script"}