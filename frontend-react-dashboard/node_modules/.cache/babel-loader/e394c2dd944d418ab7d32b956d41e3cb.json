{"ast":null,"code":"/**\r\n * DevExtreme (ui/tag_box.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _devices = require(\"../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _element_data = require(\"../core/element_data\");\n\nvar _element_data2 = _interopRequireDefault(_element_data);\n\nvar _type = require(\"../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _events_engine = require(\"../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _component_registrator = require(\"../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _browser = require(\"../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _common = require(\"../core/utils/common\");\n\nvar _selection_filter = require(\"../core/utils/selection_filter\");\n\nvar _deferred = require(\"../core/utils/deferred\");\n\nvar _dom = require(\"../core/utils/dom\");\n\nvar _window = require(\"../core/utils/window\");\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _array = require(\"../core/utils/array\");\n\nvar _iterator = require(\"../core/utils/iterator\");\n\nvar _message = require(\"../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _utils = require(\"../events/utils\");\n\nvar _click = require(\"../events/click\");\n\nvar _utils2 = require(\"./text_box/utils.caret\");\n\nvar _utils3 = _interopRequireDefault(_utils2);\n\nvar _utils4 = require(\"../data/data_source/utils\");\n\nvar _select_box = require(\"./select_box\");\n\nvar _select_box2 = _interopRequireDefault(_select_box);\n\nvar _bindable_template = require(\"../core/templates/bindable_template\");\n\nvar _utils5 = require(\"./text_box/utils.scroll\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar TAGBOX_TAG_DATA_KEY = \"dxTagData\";\nvar TAGBOX_CLASS = \"dx-tagbox\";\nvar TAGBOX_TAG_CONTAINER_CLASS = \"dx-tag-container\";\nvar TAGBOX_TAG_CLASS = \"dx-tag\";\nvar TAGBOX_MULTI_TAG_CLASS = \"dx-tagbox-multi-tag\";\nvar TAGBOX_CUSTOM_TAG_CLASS = \"dx-tag-custom\";\nvar TAGBOX_TAG_REMOVE_BUTTON_CLASS = \"dx-tag-remove-button\";\nvar TAGBOX_ONLY_SELECT_CLASS = \"dx-tagbox-only-select\";\nvar TAGBOX_SINGLE_LINE_CLASS = \"dx-tagbox-single-line\";\nvar TAGBOX_POPUP_WRAPPER_CLASS = \"dx-tagbox-popup-wrapper\";\nvar TAGBOX_TAG_CONTENT_CLASS = \"dx-tag-content\";\nvar TAGBOX_DEFAULT_FIELD_TEMPLATE_CLASS = \"dx-tagbox-default-template\";\nvar TAGBOX_CUSTOM_FIELD_TEMPLATE_CLASS = \"dx-tagbox-custom-template\";\nvar NATIVE_CLICK_CLASS = \"dx-native-click\";\nvar TEXTEDITOR_INPUT_CONTAINER_CLASS = \"dx-texteditor-input-container\";\nvar TAGBOX_MOUSE_WHEEL_DELTA_MULTIPLIER = -.3;\n\nvar TagBox = _select_box2.default.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var _this = this;\n\n    var parent = this.callBase();\n\n    var sendToList = function sendToList(options) {\n      return _this._list._keyboardHandler(options);\n    };\n\n    return (0, _extend.extend)({}, parent, {\n      backspace: function backspace(e) {\n        if (!this._isCaretAtTheStart()) {\n          return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n        this._isTagRemoved = true;\n\n        var $tagToDelete = this._$focusedTag || this._tagElements().last();\n\n        if (this._$focusedTag) {\n          this._moveTagFocus(\"prev\", true);\n        }\n\n        if (0 === $tagToDelete.length) {\n          return;\n        }\n\n        this._preserveFocusedTag = true;\n\n        this._removeTagElement($tagToDelete);\n\n        delete this._preserveFocusedTag;\n      },\n      upArrow: function upArrow(e, opts) {\n        return e.altKey || !_this._list ? parent.upArrow.call(_this, e) : sendToList(opts);\n      },\n      downArrow: function downArrow(e, opts) {\n        return e.altKey || !_this._list ? parent.downArrow.call(_this, e) : sendToList(opts);\n      },\n      del: function del(e) {\n        if (!this._$focusedTag || !this._isCaretAtTheStart()) {\n          return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n        this._isTagRemoved = true;\n        var $tagToDelete = this._$focusedTag;\n\n        this._moveTagFocus(\"next\", true);\n\n        this._preserveFocusedTag = true;\n\n        this._removeTagElement($tagToDelete);\n\n        delete this._preserveFocusedTag;\n      },\n      enter: function enter(e, options) {\n        var isListItemFocused = this._list && null !== this._list.option(\"focusedElement\");\n\n        var isCustomItem = this.option(\"acceptCustomValue\") && !isListItemFocused;\n\n        if (isCustomItem) {\n          e.preventDefault();\n          \"\" !== this._searchValue() && this._customItemAddedHandler(e);\n          return;\n        }\n\n        if (this.option(\"opened\")) {\n          sendToList(options);\n          e.preventDefault();\n        }\n      },\n      space: function space(e, options) {\n        var isOpened = this.option(\"opened\");\n\n        var isInputActive = this._shouldRenderSearchEvent();\n\n        if (isOpened && !isInputActive) {\n          sendToList(options);\n          e.preventDefault();\n        }\n      },\n      leftArrow: function leftArrow(e) {\n        if (!this._isCaretAtTheStart()) {\n          return;\n        }\n\n        var rtlEnabled = this.option(\"rtlEnabled\");\n\n        if (this._isEditable() && rtlEnabled && !this._$focusedTag) {\n          return;\n        }\n\n        e.preventDefault();\n        var direction = rtlEnabled ? \"next\" : \"prev\";\n\n        this._moveTagFocus(direction);\n\n        !this.option(\"multiline\") && this._scrollContainer(direction);\n      },\n      rightArrow: function rightArrow(e) {\n        if (!this._isCaretAtTheStart()) {\n          return;\n        }\n\n        var rtlEnabled = this.option(\"rtlEnabled\");\n\n        if (this._isEditable() && !rtlEnabled && !this._$focusedTag) {\n          return;\n        }\n\n        e.preventDefault();\n        var direction = rtlEnabled ? \"prev\" : \"next\";\n\n        this._moveTagFocus(direction);\n\n        !this.option(\"multiline\") && this._scrollContainer(direction);\n      }\n    });\n  },\n  _updateTagsContainer: function _updateTagsContainer($element) {\n    this._$tagsContainer = $element.addClass(TAGBOX_TAG_CONTAINER_CLASS).addClass(NATIVE_CLICK_CLASS);\n\n    this._$tagsContainer.parent().addClass(NATIVE_CLICK_CLASS);\n  },\n  _allowSelectItemByTab: function _allowSelectItemByTab() {\n    return false;\n  },\n  _isCaretAtTheStart: function _isCaretAtTheStart() {\n    var position = (0, _utils3.default)(this._input());\n    return 0 === position.start && 0 === position.end;\n  },\n  _moveTagFocus: function _moveTagFocus(direction, clearOnBoundary) {\n    if (!this._$focusedTag) {\n      var tagElements = this._tagElements();\n\n      this._$focusedTag = \"next\" === direction ? tagElements.first() : tagElements.last();\n\n      this._toggleFocusClass(true, this._$focusedTag);\n\n      return;\n    }\n\n    var $nextFocusedTag = this._$focusedTag[direction](\".\".concat(TAGBOX_TAG_CLASS));\n\n    if ($nextFocusedTag.length > 0) {\n      this._replaceFocusedTag($nextFocusedTag);\n    } else {\n      if (clearOnBoundary || \"next\" === direction && this._isEditable()) {\n        this._clearTagFocus();\n      }\n    }\n  },\n  _replaceFocusedTag: function _replaceFocusedTag($nextFocusedTag) {\n    this._toggleFocusClass(false, this._$focusedTag);\n\n    this._$focusedTag = $nextFocusedTag;\n\n    this._toggleFocusClass(true, this._$focusedTag);\n  },\n  _clearTagFocus: function _clearTagFocus() {\n    if (!this._$focusedTag) {\n      return;\n    }\n\n    this._toggleFocusClass(false, this._$focusedTag);\n\n    delete this._$focusedTag;\n  },\n  _focusClassTarget: function _focusClassTarget($element) {\n    if ($element && $element.length && $element[0] !== this._focusTarget()[0]) {\n      return $element;\n    }\n\n    return this.callBase();\n  },\n  _scrollContainer: function _scrollContainer(direction) {\n    if (this.option(\"multiline\") || !(0, _window.hasWindow)()) {\n      return;\n    }\n\n    if (!this._$tagsContainer) {\n      return;\n    }\n\n    var scrollPosition = this._getScrollPosition(direction);\n\n    this._$tagsContainer.scrollLeft(scrollPosition);\n  },\n  _getScrollPosition: function _getScrollPosition(direction) {\n    if (\"start\" === direction || \"end\" === direction) {\n      return this._getBorderPosition(direction);\n    }\n\n    return this._$focusedTag ? this._getFocusedTagPosition(direction) : this._getBorderPosition(\"end\");\n  },\n  _getBorderPosition: function _getBorderPosition(direction) {\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    var isScrollLeft = \"end\" === direction ^ rtlEnabled;\n    var isScrollReverted = rtlEnabled && !_browser2.default.webkit;\n    var scrollSign = !rtlEnabled || _browser2.default.webkit || _browser2.default.msie ? 1 : -1;\n    return isScrollLeft ^ !isScrollReverted ? 0 : scrollSign * (this._$tagsContainer.get(0).scrollWidth - this._$tagsContainer.outerWidth());\n  },\n  _getFocusedTagPosition: function _getFocusedTagPosition(direction) {\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    var isScrollLeft = \"next\" === direction ^ rtlEnabled;\n\n    var _this$_$focusedTag$po = this._$focusedTag.position(),\n        scrollOffset = _this$_$focusedTag$po.left;\n\n    var scrollLeft = this._$tagsContainer.scrollLeft();\n\n    if (isScrollLeft) {\n      scrollOffset += this._$focusedTag.outerWidth(true) - this._$tagsContainer.outerWidth();\n    }\n\n    if (isScrollLeft ^ scrollOffset < 0) {\n      var scrollCorrection = rtlEnabled && _browser2.default.msie ? -1 : 1;\n      scrollLeft += scrollOffset * scrollCorrection;\n    }\n\n    return scrollLeft;\n  },\n  _setNextValue: _common.noop,\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      value: [],\n      showDropDownButton: false,\n      maxFilterLength: 1500,\n      tagTemplate: \"tag\",\n      selectAllText: _message2.default.format(\"dxList-selectAll\"),\n      hideSelectedItems: false,\n      selectedItems: [],\n      selectAllMode: \"page\",\n      onSelectAllValueChanged: null,\n      maxDisplayedTags: void 0,\n      showMultiTagOnly: true,\n      onMultiTagPreparing: null,\n      multiline: true,\n      useSubmitBehavior: true\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n    this._selectedItems = [];\n\n    this._initSelectAllValueChangedAction();\n  },\n  _initActions: function _initActions() {\n    this.callBase();\n\n    this._initMultiTagPreparingAction();\n  },\n  _initMultiTagPreparingAction: function _initMultiTagPreparingAction() {\n    this._multiTagPreparingAction = this._createActionByOption(\"onMultiTagPreparing\", {\n      beforeExecute: function (e) {\n        this._multiTagPreparingHandler(e.args[0]);\n      }.bind(this),\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _multiTagPreparingHandler: function _multiTagPreparingHandler(args) {\n    var _this$_getValue = this._getValue(),\n        selectedCount = _this$_getValue.length;\n\n    if (!this.option(\"showMultiTagOnly\")) {\n      args.text = _message2.default.getFormatter(\"dxTagBox-moreSelected\")(selectedCount - this.option(\"maxDisplayedTags\") + 1);\n    } else {\n      args.text = _message2.default.getFormatter(\"dxTagBox-selected\")(selectedCount);\n    }\n  },\n  _initDynamicTemplates: function _initDynamicTemplates() {\n    this.callBase();\n\n    this._templateManager.addDefaultTemplates({\n      tag: new _bindable_template.BindableTemplate(function ($container, data) {\n        var $tagContent = (0, _renderer2.default)(\"<div>\").addClass(TAGBOX_TAG_CONTENT_CLASS);\n        (0, _renderer2.default)(\"<span>\").text(data.text || data).appendTo($tagContent);\n        (0, _renderer2.default)(\"<div>\").addClass(TAGBOX_TAG_REMOVE_BUTTON_CLASS).appendTo($tagContent);\n        $container.append($tagContent);\n      }, [\"text\"], this.option(\"integrationOptions.watchMethod\"), {\n        text: this._displayGetter\n      })\n    });\n  },\n  _toggleSubmitElement: function _toggleSubmitElement(enabled) {\n    if (enabled) {\n      this._renderSubmitElement();\n\n      this._setSubmitValue();\n    } else {\n      this._$submitElement && this._$submitElement.remove();\n      delete this._$submitElement;\n    }\n  },\n  _renderSubmitElement: function _renderSubmitElement() {\n    if (!this.option(\"useSubmitBehavior\")) {\n      return;\n    }\n\n    this._$submitElement = (0, _renderer2.default)(\"<select>\").attr(\"multiple\", \"multiple\").css(\"display\", \"none\").appendTo(this.$element());\n  },\n  _setSubmitValue: function _setSubmitValue() {\n    if (!this.option(\"useSubmitBehavior\")) {\n      return;\n    }\n\n    var value = this._getValue();\n\n    var $options = [];\n\n    for (var i = 0, n = value.length; i < n; i++) {\n      var useDisplayText = this._shouldUseDisplayValue(value[i]);\n\n      $options.push((0, _renderer2.default)(\"<option>\").val(useDisplayText ? this._displayGetter(value[i]) : value[i]).attr(\"selected\", \"selected\"));\n    }\n\n    this._getSubmitElement().empty().append($options);\n  },\n  _initMarkup: function _initMarkup() {\n    this._tagElementsCache = (0, _renderer2.default)();\n    var isSingleLineMode = !this.option(\"multiline\");\n    this.$element().addClass(TAGBOX_CLASS).toggleClass(TAGBOX_ONLY_SELECT_CLASS, !(this.option(\"searchEnabled\") || this.option(\"acceptCustomValue\"))).toggleClass(TAGBOX_SINGLE_LINE_CLASS, isSingleLineMode);\n\n    this._initTagTemplate();\n\n    this.callBase();\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._renderTagRemoveAction();\n\n    this._renderSingleLineScroll();\n\n    this._scrollContainer(\"start\");\n  },\n  _initTagTemplate: function _initTagTemplate() {\n    this._tagTemplate = this._getTemplateByOption(\"tagTemplate\");\n  },\n  _renderField: function _renderField() {\n    var isDefaultFieldTemplate = !(0, _type.isDefined)(this.option(\"fieldTemplate\"));\n    this.$element().toggleClass(TAGBOX_DEFAULT_FIELD_TEMPLATE_CLASS, isDefaultFieldTemplate).toggleClass(TAGBOX_CUSTOM_FIELD_TEMPLATE_CLASS, !isDefaultFieldTemplate);\n    this.callBase();\n  },\n  _renderTagRemoveAction: function _renderTagRemoveAction() {\n    var tagRemoveAction = this._createAction(this._removeTagHandler.bind(this));\n\n    var eventName = (0, _utils.addNamespace)(_click.name, \"dxTagBoxTagRemove\");\n\n    _events_engine2.default.off(this._$tagsContainer, eventName);\n\n    _events_engine2.default.on(this._$tagsContainer, eventName, \".\".concat(TAGBOX_TAG_REMOVE_BUTTON_CLASS), function (event) {\n      tagRemoveAction({\n        event: event\n      });\n    });\n\n    this._renderTypingEvent();\n  },\n  _renderSingleLineScroll: function _renderSingleLineScroll() {\n    var mouseWheelEvent = (0, _utils.addNamespace)(\"dxmousewheel\", this.NAME);\n    var $element = this.$element();\n    var isMultiline = this.option(\"multiline\");\n\n    _events_engine2.default.off($element, mouseWheelEvent);\n\n    if (\"desktop\" !== _devices2.default.real().deviceType) {\n      this._$tagsContainer && this._$tagsContainer.css(\"overflowX\", isMultiline ? \"\" : \"auto\");\n      return;\n    }\n\n    if (isMultiline) {\n      return;\n    }\n\n    _events_engine2.default.on($element, mouseWheelEvent, this._tagContainerMouseWheelHandler.bind(this));\n  },\n  _tagContainerMouseWheelHandler: function _tagContainerMouseWheelHandler(e) {\n    var scrollLeft = this._$tagsContainer.scrollLeft();\n\n    var delta = e.delta * TAGBOX_MOUSE_WHEEL_DELTA_MULTIPLIER;\n\n    if ((0, _utils5.allowScroll)(this._$tagsContainer, delta, true)) {\n      this._$tagsContainer.scrollLeft(scrollLeft + delta);\n\n      return false;\n    }\n  },\n  _renderTypingEvent: function _renderTypingEvent() {\n    var _this2 = this;\n\n    _events_engine2.default.on(this._input(), (0, _utils.addNamespace)(\"keydown\", this.NAME), function (e) {\n      var keyName = (0, _utils.normalizeKeyName)(e);\n\n      if (!_this2._isControlKey(keyName) && _this2._isEditable()) {\n        _this2._clearTagFocus();\n      }\n    });\n  },\n  _popupWrapperClass: function _popupWrapperClass() {\n    return this.callBase() + \" \" + TAGBOX_POPUP_WRAPPER_CLASS;\n  },\n  _renderInput: function _renderInput() {\n    this.callBase();\n\n    this._renderPreventBlur(this._inputWrapper());\n  },\n  _renderInputValueImpl: function _renderInputValueImpl() {\n    return this._renderMultiSelect();\n  },\n  _loadInputValue: function _loadInputValue() {\n    return (0, _deferred.when)();\n  },\n  _clearTextValue: function _clearTextValue() {\n    this._input().val(\"\");\n\n    this._toggleEmptinessEventHandler();\n  },\n  _focusInHandler: function _focusInHandler(e) {\n    if (!this._preventNestedFocusEvent(e)) {\n      this._scrollContainer(\"end\");\n    }\n\n    this.callBase(e);\n  },\n  _restoreInputText: function _restoreInputText(saveEditingValue) {\n    if (!saveEditingValue) {\n      this._clearTextValue();\n    }\n  },\n  _focusOutHandler: function _focusOutHandler(e) {\n    if (!this._preventNestedFocusEvent(e)) {\n      this._clearTagFocus();\n\n      this._scrollContainer(\"start\");\n    }\n\n    this.callBase(e);\n  },\n  _getFirstPopupElement: function _getFirstPopupElement() {\n    return this.option(\"showSelectionControls\") ? this._list.$element() : this.callBase();\n  },\n  _initSelectAllValueChangedAction: function _initSelectAllValueChangedAction() {\n    this._selectAllValueChangeAction = this._createActionByOption(\"onSelectAllValueChanged\");\n  },\n  _renderList: function _renderList() {\n    var _this3 = this;\n\n    this.callBase();\n\n    this._setListDataSourceFilter();\n\n    if (this.option(\"showSelectionControls\")) {\n      this._list.registerKeyHandler(\"tab\", function (e) {\n        return _this3._popupElementTabHandler(e);\n      });\n\n      this._list.registerKeyHandler(\"escape\", function (e) {\n        return _this3._popupElementEscHandler(e);\n      });\n    }\n  },\n  _canListHaveFocus: function _canListHaveFocus() {\n    return \"useButtons\" === this.option(\"applyValueMode\");\n  },\n  _listConfig: function _listConfig() {\n    var _this4 = this;\n\n    var selectionMode = this.option(\"showSelectionControls\") ? \"all\" : \"multiple\";\n    return (0, _extend.extend)(this.callBase(), {\n      selectionMode: selectionMode,\n      selectAllText: this.option(\"selectAllText\"),\n      onSelectAllValueChanged: function onSelectAllValueChanged(_ref) {\n        var value = _ref.value;\n\n        _this4._selectAllValueChangeAction({\n          value: value\n        });\n      },\n      selectAllMode: this.option(\"selectAllMode\"),\n      selectedItems: this._selectedItems,\n      onFocusedItemChanged: null\n    });\n  },\n  _renderMultiSelect: function _renderMultiSelect() {\n    var _this5 = this;\n\n    var d = new _deferred.Deferred();\n\n    this._updateTagsContainer(this._$textEditorInputContainer);\n\n    this._renderInputSize();\n\n    this._renderTags().done(function () {\n      _this5._popup && _this5._popup.refreshPosition();\n      d.resolve();\n    }).fail(d.reject);\n\n    return d.promise();\n  },\n  _listItemClickHandler: function _listItemClickHandler(e) {\n    !this.option(\"showSelectionControls\") && this._clearTextValue();\n\n    if (\"useButtons\" === this.option(\"applyValueMode\")) {\n      return;\n    }\n\n    this.callBase(e);\n  },\n  _shouldClearFilter: function _shouldClearFilter() {\n    var shouldClearFilter = this.callBase();\n    var showSelectionControls = this.option(\"showSelectionControls\");\n    return !showSelectionControls && shouldClearFilter;\n  },\n  _renderInputSize: function _renderInputSize() {\n    var $input = this._input();\n\n    var value = $input.val();\n    var isEmptyInput = (0, _type.isString)(value) && value;\n    var cursorWidth = 5;\n    var width = \"\";\n    var size = \"\";\n    var canTypeText = this.option(\"searchEnabled\") || this.option(\"acceptCustomValue\");\n\n    if (isEmptyInput && canTypeText) {\n      var $calculationElement = (0, _dom.createTextElementHiddenCopy)($input, value, {\n        includePaddings: true\n      });\n      $calculationElement.insertAfter($input);\n      width = $calculationElement.outerWidth() + cursorWidth;\n      $calculationElement.remove();\n    } else {\n      if (!value) {\n        size = 1;\n      }\n    }\n\n    $input.css(\"width\", width);\n    $input.attr(\"size\", size);\n  },\n  _renderInputSubstitution: function _renderInputSubstitution() {\n    this.callBase();\n\n    this._renderInputSize();\n  },\n  _getValue: function _getValue() {\n    return this.option(\"value\") || [];\n  },\n  _multiTagRequired: function _multiTagRequired() {\n    var values = this._getValue();\n\n    var maxDisplayedTags = this.option(\"maxDisplayedTags\");\n    return (0, _type.isDefined)(maxDisplayedTags) && values.length > maxDisplayedTags;\n  },\n  _renderMultiTag: function _renderMultiTag($input) {\n    var $tag = (0, _renderer2.default)(\"<div>\").addClass(TAGBOX_TAG_CLASS).addClass(TAGBOX_MULTI_TAG_CLASS);\n    var args = {\n      multiTagElement: (0, _dom.getPublicElement)($tag),\n      selectedItems: this.option(\"selectedItems\")\n    };\n\n    this._multiTagPreparingAction(args);\n\n    if (args.cancel) {\n      return false;\n    }\n\n    $tag.data(TAGBOX_TAG_DATA_KEY, args.text);\n    $tag.insertBefore($input);\n\n    this._tagTemplate.render({\n      model: args.text,\n      container: (0, _dom.getPublicElement)($tag)\n    });\n\n    return $tag;\n  },\n  _getFilteredItems: function _getFilteredItems(values) {\n    var _this6 = this;\n\n    var creator = new _selection_filter.SelectionFilterCreator(values);\n    var selectedItems = this._list && this._list.option(\"selectedItems\") || this.option(\"selectedItems\");\n    var clientFilterFunction = creator.getLocalFilter(this._valueGetter);\n    var filteredItems = selectedItems.filter(clientFilterFunction);\n    var selectedItemsAlreadyLoaded = filteredItems.length === values.length;\n    var d = new _deferred.Deferred();\n\n    if (!this._isDataSourceChanged && selectedItemsAlreadyLoaded) {\n      return d.resolve(filteredItems).promise();\n    } else {\n      var dataSource = this._dataSource;\n      var dataSourceFilter = dataSource.filter();\n      var filterExpr = creator.getCombinedFilter(this.option(\"valueExpr\"), dataSourceFilter);\n      var filterLength = encodeURI(JSON.stringify(filterExpr)).length;\n      var filter = filterLength > this.option(\"maxFilterLength\") ? void 0 : filterExpr;\n\n      var _dataSource$loadOptio = dataSource.loadOptions(),\n          customQueryParams = _dataSource$loadOptio.customQueryParams,\n          expand = _dataSource$loadOptio.expand;\n\n      dataSource.store().load({\n        filter: filter,\n        customQueryParams: customQueryParams,\n        expand: expand\n      }).done(function (data, extra) {\n        _this6._isDataSourceChanged = false;\n\n        if (_this6._disposed) {\n          d.reject();\n          return;\n        }\n\n        var _normalizeLoadResult = (0, _utils4.normalizeLoadResult)(data, extra),\n            items = _normalizeLoadResult.data;\n\n        var mappedItems = dataSource._applyMapFunction(items);\n\n        d.resolve(mappedItems.filter(clientFilterFunction));\n      }).fail(d.reject);\n      return d.promise();\n    }\n  },\n  _createTagsData: function _createTagsData(values, filteredItems) {\n    var _this7 = this;\n\n    var items = [];\n    var cache = {};\n\n    var isValueExprSpecified = \"this\" === this._valueGetterExpr();\n\n    var filteredValues = {};\n    filteredItems.forEach(function (filteredItem) {\n      var filteredItemValue = isValueExprSpecified ? JSON.stringify(filteredItem) : _this7._valueGetter(filteredItem);\n      filteredValues[filteredItemValue] = filteredItem;\n    });\n    var loadItemPromises = [];\n    values.forEach(function (value, index) {\n      var currentItem = filteredValues[isValueExprSpecified ? JSON.stringify(value) : value];\n\n      if (isValueExprSpecified && !(0, _type.isDefined)(currentItem)) {\n        loadItemPromises.push(_this7._loadItem(value, cache).always(function (item) {\n          var newItem = _this7._createTagData(items, item, value, index);\n\n          items.splice(index, 0, newItem);\n        }));\n      } else {\n        var newItem = _this7._createTagData(items, currentItem, value, index);\n\n        items.splice(index, 0, newItem);\n      }\n    });\n    var d = new _deferred.Deferred();\n\n    _deferred.when.apply(this, loadItemPromises).always(function () {\n      d.resolve(items);\n    });\n\n    return d.promise();\n  },\n  _createTagData: function _createTagData(items, item, value, valueIndex) {\n    if ((0, _type.isDefined)(item)) {\n      this._selectedItems.push(item);\n\n      return item;\n    } else {\n      var selectedItem = this.option(\"selectedItem\");\n      var customItem = this._valueGetter(selectedItem) === value ? selectedItem : value;\n      return customItem;\n    }\n  },\n  _isGroupedData: function _isGroupedData() {\n    return this.option(\"grouped\") && !this._dataSource.group();\n  },\n  _getItemsByValues: function _getItemsByValues(values) {\n    var resultItems = [];\n    values.forEach(function (value) {\n      var item = this._getItemFromPlain(value);\n\n      if ((0, _type.isDefined)(item)) {\n        resultItems.push(item);\n      }\n    }.bind(this));\n    return resultItems;\n  },\n  _getFilteredGroupedItems: function _getFilteredGroupedItems(values) {\n    var selectedItems = new _deferred.Deferred();\n\n    if (!this._dataSource.items().length) {\n      this._dataSource.load().done(function () {\n        selectedItems.resolve(this._getItemsByValues(values));\n      }.bind(this)).fail(selectedItems.resolve([]));\n    } else {\n      selectedItems.resolve(this._getItemsByValues(values));\n    }\n\n    return selectedItems.promise();\n  },\n  _loadTagsData: function _loadTagsData() {\n    var _this8 = this;\n\n    var values = this._getValue();\n\n    var tagData = new _deferred.Deferred();\n    this._selectedItems = [];\n    var filteredItemsPromise = this._isGroupedData() ? this._getFilteredGroupedItems(values) : this._getFilteredItems(values);\n    filteredItemsPromise.done(function (filteredItems) {\n      var items = _this8._createTagsData(values, filteredItems);\n\n      items.always(function (data) {\n        tagData.resolve(data);\n      });\n    }).fail(tagData.reject.bind(this));\n    return tagData.promise();\n  },\n  _renderTags: function _renderTags() {\n    var _this9 = this;\n\n    var d = new _deferred.Deferred();\n    var isPlainDataUsed = false;\n\n    if (this._shouldGetItemsFromPlain(this._valuesToUpdate)) {\n      this._selectedItems = this._getItemsFromPlain(this._valuesToUpdate);\n\n      if (this._selectedItems.length === this._valuesToUpdate.length) {\n        this._renderTagsImpl(this._selectedItems);\n\n        isPlainDataUsed = true;\n        d.resolve();\n      }\n    }\n\n    if (!isPlainDataUsed) {\n      this._loadTagsData().done(function (items) {\n        if (_this9._disposed) {\n          d.reject();\n          return;\n        }\n\n        _this9._renderTagsImpl(items);\n\n        d.resolve();\n      }).fail(d.reject);\n    }\n\n    return d.promise();\n  },\n  _renderTagsImpl: function _renderTagsImpl(items) {\n    this._renderTagsCore(items);\n\n    this._renderEmptyState();\n\n    if (!this._preserveFocusedTag) {\n      this._clearTagFocus();\n    }\n  },\n  _shouldGetItemsFromPlain: function _shouldGetItemsFromPlain(values) {\n    return values && this._dataSource.isLoaded() && !this._wasSearch() && values.length <= this._getPlainItems().length;\n  },\n  _getItemsFromPlain: function _getItemsFromPlain(values) {\n    var _this10 = this;\n\n    var plainItems = this._getPlainItems();\n\n    var selectedItems = plainItems.filter(function (dataItem) {\n      var currentValue;\n\n      for (var i = 0; i < values.length; i++) {\n        currentValue = values[i];\n\n        if (_type2.default.isObject(currentValue)) {\n          if (_this10._isValueEquals(dataItem, currentValue)) {\n            return true;\n          }\n        } else {\n          if (_this10._isValueEquals(_this10._valueGetter(dataItem), currentValue)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }, this);\n    return selectedItems;\n  },\n  _integrateInput: function _integrateInput() {\n    this.callBase();\n\n    this._updateTagsContainer((0, _renderer2.default)(\".\".concat(TEXTEDITOR_INPUT_CONTAINER_CLASS)));\n\n    this._renderTagRemoveAction();\n  },\n  _renderTagsCore: function _renderTagsCore(items) {\n    var _this11 = this;\n\n    this._renderField();\n\n    this.option(\"selectedItems\", this._selectedItems.slice());\n\n    this._cleanTags();\n\n    var $multiTag = this._multiTagRequired() && this._renderMultiTag(this._input());\n\n    var showMultiTagOnly = this.option(\"showMultiTagOnly\");\n    var maxDisplayedTags = this.option(\"maxDisplayedTags\");\n    items.forEach(function (item, index) {\n      if ($multiTag && showMultiTagOnly || $multiTag && !showMultiTagOnly && index - maxDisplayedTags >= -1) {\n        return false;\n      }\n\n      _this11._renderTag(item, $multiTag || _this11._input());\n    });\n\n    if (this._isFocused()) {\n      this._scrollContainer(\"end\");\n    }\n\n    this._refreshTagElements();\n  },\n  _cleanTags: function _cleanTags() {\n    if (this._multiTagRequired()) {\n      this._tagElements().remove();\n    } else {\n      var $tags = this._tagElements();\n\n      var values = this._getValue();\n\n      (0, _iterator.each)($tags, function (_, tag) {\n        var $tag = (0, _renderer2.default)(tag);\n        var index = (0, _array.inArray)($tag.data(TAGBOX_TAG_DATA_KEY), values);\n\n        if (index < 0) {\n          $tag.remove();\n        }\n      });\n    }\n  },\n  _renderEmptyState: function _renderEmptyState() {\n    var isEmpty = !(this._getValue().length || this._selectedItems.length || this._searchValue());\n\n    this._toggleEmptiness(isEmpty);\n\n    this._renderDisplayText();\n  },\n  _renderDisplayText: function _renderDisplayText() {\n    this._renderInputSize();\n  },\n  _refreshTagElements: function _refreshTagElements() {\n    this._tagElementsCache = this.$element().find(\".\".concat(TAGBOX_TAG_CLASS));\n  },\n  _tagElements: function _tagElements() {\n    return this._tagElementsCache;\n  },\n  _applyTagTemplate: function _applyTagTemplate(item, $tag) {\n    this._tagTemplate.render({\n      model: item,\n      container: (0, _dom.getPublicElement)($tag)\n    });\n  },\n  _renderTag: function _renderTag(item, $input) {\n    var value = this._valueGetter(item);\n\n    if (!(0, _type.isDefined)(value)) {\n      return;\n    }\n\n    var $tag = this._getTag(value);\n\n    var displayValue = this._displayGetter(item);\n\n    var itemModel = this._getItemModel(item, displayValue);\n\n    if ($tag) {\n      if ((0, _type.isDefined)(displayValue)) {\n        $tag.empty();\n\n        this._applyTagTemplate(itemModel, $tag);\n      }\n\n      $tag.removeClass(TAGBOX_CUSTOM_TAG_CLASS);\n    } else {\n      $tag = this._createTag(value, $input);\n\n      if ((0, _type.isDefined)(item)) {\n        this._applyTagTemplate(itemModel, $tag);\n      } else {\n        $tag.addClass(TAGBOX_CUSTOM_TAG_CLASS);\n\n        this._applyTagTemplate(value, $tag);\n      }\n    }\n  },\n  _getItemModel: function _getItemModel(item, displayValue) {\n    if ((0, _type.isObject)(item) && displayValue) {\n      return item;\n    } else {\n      return (0, _common.ensureDefined)(displayValue, \"\");\n    }\n  },\n  _getTag: function _getTag(value) {\n    var $tags = this._tagElements();\n\n    var tagsLength = $tags.length;\n    var result = false;\n\n    for (var i = 0; i < tagsLength; i++) {\n      var $tag = $tags[i];\n\n      var tagData = _element_data2.default.data($tag, TAGBOX_TAG_DATA_KEY);\n\n      if (value === tagData || (0, _common.equalByValue)(value, tagData)) {\n        result = (0, _renderer2.default)($tag);\n        break;\n      }\n    }\n\n    return result;\n  },\n  _createTag: function _createTag(value, $input) {\n    return (0, _renderer2.default)(\"<div>\").addClass(TAGBOX_TAG_CLASS).data(TAGBOX_TAG_DATA_KEY, value).insertBefore($input);\n  },\n  _toggleEmptinessEventHandler: function _toggleEmptinessEventHandler() {\n    this._toggleEmptiness(!this._getValue().length && !this._searchValue().length);\n  },\n  _customItemAddedHandler: function _customItemAddedHandler(e) {\n    this.callBase(e);\n\n    this._input().val(\"\");\n  },\n  _removeTagHandler: function _removeTagHandler(args) {\n    var e = args.event;\n    e.stopPropagation();\n\n    this._saveValueChangeEvent(e);\n\n    var $tag = (0, _renderer2.default)(e.target).closest(\".\".concat(TAGBOX_TAG_CLASS));\n\n    this._removeTagElement($tag);\n  },\n  _removeTagElement: function _removeTagElement($tag) {\n    if ($tag.hasClass(TAGBOX_MULTI_TAG_CLASS)) {\n      if (!this.option(\"showMultiTagOnly\")) {\n        this.option(\"value\", this._getValue().slice(0, this.option(\"maxDisplayedTags\")));\n      } else {\n        this.reset();\n      }\n\n      return;\n    }\n\n    var itemValue = $tag.data(TAGBOX_TAG_DATA_KEY);\n\n    this._removeTagWithUpdate(itemValue);\n\n    this._refreshTagElements();\n  },\n  _updateField: _common.noop,\n  _removeTagWithUpdate: function _removeTagWithUpdate(itemValue) {\n    var value = this._getValue().slice();\n\n    this._removeTag(value, itemValue);\n\n    this.option(\"value\", value);\n\n    if (0 === value.length) {\n      this._clearTagFocus();\n    }\n  },\n  _getCurrentValue: function _getCurrentValue() {\n    return this._lastValue();\n  },\n  _selectionChangeHandler: function _selectionChangeHandler(e) {\n    var _this12 = this;\n\n    if (\"useButtons\" === this.option(\"applyValueMode\")) {\n      return;\n    }\n\n    var value = this._getValue().slice();\n\n    (0, _iterator.each)(e.removedItems || [], function (_, removedItem) {\n      _this12._removeTag(value, _this12._valueGetter(removedItem));\n    });\n    (0, _iterator.each)(e.addedItems || [], function (_, addedItem) {\n      _this12._addTag(value, _this12._valueGetter(addedItem));\n    });\n\n    this._updateWidgetHeight();\n\n    if (!(0, _common.equalByValue)(this._list.option(\"selectedItemKeys\"), this.option(\"value\"))) {\n      this.option(\"value\", value);\n    }\n  },\n  _removeTag: function _removeTag(value, item) {\n    var index = this._valueIndex(item, value);\n\n    if (index >= 0) {\n      value.splice(index, 1);\n    }\n  },\n  _addTag: function _addTag(value, item) {\n    var index = this._valueIndex(item);\n\n    if (index < 0) {\n      value.push(item);\n    }\n  },\n  _fieldRenderData: function _fieldRenderData() {\n    return this._selectedItems.slice();\n  },\n  _completeSelection: function _completeSelection(value) {\n    if (!this.option(\"showSelectionControls\")) {\n      this._setValue(value);\n    }\n  },\n  _setValue: function _setValue(value) {\n    if (null === value) {\n      return;\n    }\n\n    var useButtons = \"useButtons\" === this.option(\"applyValueMode\");\n\n    var valueIndex = this._valueIndex(value);\n\n    var values = (useButtons ? this._list.option(\"selectedItemKeys\") : this._getValue()).slice();\n\n    if (valueIndex >= 0) {\n      values.splice(valueIndex, 1);\n    } else {\n      values.push(value);\n    }\n\n    if (\"useButtons\" === this.option(\"applyValueMode\")) {\n      this._list.option(\"selectedItemKeys\", values);\n    } else {\n      this.option(\"value\", values);\n    }\n  },\n  _isSelectedValue: function _isSelectedValue(value, cache) {\n    return this._valueIndex(value, null, cache) > -1;\n  },\n  _valueIndex: function _valueIndex(value, values, cache) {\n    var _this13 = this;\n\n    var result = -1;\n\n    if (cache && \"object\" !== _typeof(value)) {\n      if (!cache.indexByValues) {\n        cache.indexByValues = {};\n        values = values || this._getValue();\n        values.forEach(function (value, index) {\n          cache.indexByValues[value] = index;\n        });\n      }\n\n      if (value in cache.indexByValues) {\n        return cache.indexByValues[value];\n      }\n    }\n\n    values = values || this._getValue();\n    (0, _iterator.each)(values, function (index, selectedValue) {\n      if (_this13._isValueEquals(value, selectedValue)) {\n        result = index;\n        return false;\n      }\n    });\n    return result;\n  },\n  _lastValue: function _lastValue() {\n    var values = this._getValue();\n\n    var lastValue = values[values.length - 1];\n    return (0, _type.isDefined)(lastValue) ? lastValue : null;\n  },\n  _valueChangeEventHandler: _common.noop,\n  _shouldRenderSearchEvent: function _shouldRenderSearchEvent() {\n    return this.option(\"searchEnabled\") || this.option(\"acceptCustomValue\");\n  },\n  _searchHandler: function _searchHandler(e) {\n    if (this.option(\"searchEnabled\") && !!e && !this._isTagRemoved) {\n      this.callBase(e);\n    }\n\n    this._updateWidgetHeight();\n\n    delete this._isTagRemoved;\n  },\n  _updateWidgetHeight: function _updateWidgetHeight() {\n    var element = this.$element();\n    var originalHeight = element.height();\n\n    this._renderInputSize();\n\n    var currentHeight = element.height();\n\n    if (this._popup && this.option(\"opened\") && this._isEditable() && currentHeight !== originalHeight) {\n      this._popup.repaint();\n    }\n  },\n  _refreshSelected: function _refreshSelected() {\n    this._list && this._list.option(\"selectedItems\", this._selectedItems);\n  },\n  _resetListDataSourceFilter: function _resetListDataSourceFilter() {\n    var dataSource = this._getDataSource();\n\n    if (!dataSource) {\n      return;\n    }\n\n    delete this._userFilter;\n    dataSource.filter(null);\n    dataSource.reload();\n  },\n  _setListDataSourceFilter: function _setListDataSourceFilter() {\n    if (!this.option(\"hideSelectedItems\") || !this._list) {\n      return;\n    }\n\n    var dataSource = this._getDataSource();\n\n    if (!dataSource) {\n      return;\n    }\n\n    var valueGetterExpr = this._valueGetterExpr();\n\n    if ((0, _type.isString)(valueGetterExpr) && \"this\" !== valueGetterExpr) {\n      var filter = this._dataSourceFilterExpr();\n\n      if (void 0 === this._userFilter) {\n        this._userFilter = dataSource.filter() || null;\n      }\n\n      this._userFilter && filter.push(this._userFilter);\n      filter.length ? dataSource.filter(filter) : dataSource.filter(null);\n    } else {\n      dataSource.filter(this._dataSourceFilterFunction.bind(this));\n    }\n\n    dataSource.load();\n  },\n  _dataSourceFilterExpr: function _dataSourceFilterExpr() {\n    var _this14 = this;\n\n    var filter = [];\n    (0, _iterator.each)(this._getValue(), function (index, value) {\n      filter.push([\"!\", [_this14._valueGetterExpr(), value]]);\n    });\n    return filter;\n  },\n  _dataSourceFilterFunction: function _dataSourceFilterFunction(itemData) {\n    var _this15 = this;\n\n    var itemValue = this._valueGetter(itemData);\n\n    var result = true;\n    (0, _iterator.each)(this._getValue(), function (index, value) {\n      if (_this15._isValueEquals(value, itemValue)) {\n        result = false;\n        return false;\n      }\n    });\n    return result;\n  },\n  _dataSourceChangedHandler: function _dataSourceChangedHandler() {\n    if (this._list) {\n      this._isDataSourceChanged = true;\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _applyButtonHandler: function _applyButtonHandler() {\n    this.option(\"value\", this._getSortedListValues());\n\n    this._clearTextValue();\n\n    this._clearFilter();\n\n    this.callBase();\n  },\n  _getSortedListValues: function _getSortedListValues() {\n    var listValues = this._getListValues();\n\n    var currentValue = this.option(\"value\") || [];\n    var existedItems = listValues.length ? currentValue.filter(function (item) {\n      return listValues.indexOf(item) !== -1;\n    }) : [];\n    var newItems = existedItems.length ? listValues.filter(function (item) {\n      return currentValue.indexOf(item) === -1;\n    }) : listValues;\n    return existedItems.concat(newItems);\n  },\n  _getListValues: function _getListValues() {\n    var _this16 = this;\n\n    if (!this._list) {\n      return [];\n    }\n\n    var selectedItems = this._getPlainItems(this._list.option(\"selectedItems\"));\n\n    var result = [];\n    (0, _iterator.each)(selectedItems, function (index, item) {\n      result[index] = _this16._valueGetter(item);\n    });\n    return result;\n  },\n  _setListDataSource: function _setListDataSource() {\n    this.callBase();\n\n    this._refreshSelected();\n  },\n  _renderOpenedState: function _renderOpenedState() {\n    this.callBase();\n\n    if (\"useButtons\" === this.option(\"applyValueMode\") && !this.option(\"opened\")) {\n      this._refreshSelected();\n    }\n  },\n  reset: function reset() {\n    this._restoreInputText();\n\n    var defaultValue = this._getDefaultOptions().value;\n\n    var currentValue = this.option(\"value\");\n\n    if (defaultValue && 0 === defaultValue.length && currentValue && defaultValue.length === currentValue.length) {\n      return;\n    }\n\n    this.callBase();\n  },\n  _clean: function _clean() {\n    this.callBase();\n    delete this._defaultTagTemplate;\n    delete this._valuesToUpdate;\n    delete this._tagTemplate;\n  },\n  _removeDuplicates: function _removeDuplicates(from, what) {\n    var _this17 = this;\n\n    var result = [];\n    (0, _iterator.each)(from, function (_, value) {\n      var filteredItems = what.filter(function (item) {\n        return _this17._valueGetter(value) === _this17._valueGetter(item);\n      });\n\n      if (!filteredItems.length) {\n        result.push(value);\n      }\n    });\n    return result;\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"onSelectAllValueChanged\":\n        this._initSelectAllValueChangedAction();\n\n        break;\n\n      case \"onMultiTagPreparing\":\n        this._initMultiTagPreparingAction();\n\n        this._renderTags();\n\n        break;\n\n      case \"hideSelectedItems\":\n        if (args.value) {\n          this._setListDataSourceFilter();\n        } else {\n          this._resetListDataSourceFilter();\n        }\n\n        break;\n\n      case \"useSubmitBehavior\":\n        this._toggleSubmitElement(args.value);\n\n        break;\n\n      case \"displayExpr\":\n        this.callBase(args);\n\n        this._initTemplates();\n\n        this._invalidate();\n\n        break;\n\n      case \"tagTemplate\":\n        this._initTagTemplate();\n\n        this._invalidate();\n\n        break;\n\n      case \"selectAllText\":\n        this._setListOption(\"selectAllText\", this.option(\"selectAllText\"));\n\n        break;\n\n      case \"value\":\n        this._valuesToUpdate = null === args || void 0 === args ? void 0 : args.value;\n        this.callBase(args);\n        this._valuesToUpdate = void 0;\n\n        this._setListDataSourceFilter();\n\n        break;\n\n      case \"maxDisplayedTags\":\n      case \"showMultiTagOnly\":\n        this._renderTags();\n\n        break;\n\n      case \"selectAllMode\":\n        this._setListOption(args.name, args.value);\n\n        break;\n\n      case \"selectedItem\":\n        break;\n\n      case \"selectedItems\":\n        this._selectionChangedAction({\n          addedItems: this._removeDuplicates(args.value, args.previousValue),\n          removedItems: this._removeDuplicates(args.previousValue, args.value)\n        });\n\n        break;\n\n      case \"multiline\":\n        this.$element().toggleClass(TAGBOX_SINGLE_LINE_CLASS, !args.value);\n\n        this._renderSingleLineScroll();\n\n        break;\n\n      case \"maxFilterLength\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _getActualSearchValue: function _getActualSearchValue() {\n    return this.callBase() || this._searchValue();\n  },\n  _popupHidingHandler: function _popupHidingHandler() {\n    this.callBase();\n\n    this._clearFilter();\n  }\n});\n\n(0, _component_registrator2.default)(\"dxTagBox\", TagBox);\nmodule.exports = TagBox;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}