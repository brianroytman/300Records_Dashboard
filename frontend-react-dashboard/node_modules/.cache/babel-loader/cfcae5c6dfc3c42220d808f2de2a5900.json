{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/ui.scheduler.appointments.layout_manager.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _uiSchedulerAppointmentsStrategy = require(\"./rendering_strategies/ui.scheduler.appointments.strategy.vertical\");\n\nvar _uiSchedulerAppointmentsStrategy2 = _interopRequireDefault(_uiSchedulerAppointmentsStrategy);\n\nvar _uiSchedulerAppointmentsStrategy3 = require(\"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal\");\n\nvar _uiSchedulerAppointmentsStrategy4 = _interopRequireDefault(_uiSchedulerAppointmentsStrategy3);\n\nvar _uiSchedulerAppointmentsStrategy5 = require(\"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month_line\");\n\nvar _uiSchedulerAppointmentsStrategy6 = _interopRequireDefault(_uiSchedulerAppointmentsStrategy5);\n\nvar _uiSchedulerAppointmentsStrategy7 = require(\"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month\");\n\nvar _uiSchedulerAppointmentsStrategy8 = _interopRequireDefault(_uiSchedulerAppointmentsStrategy7);\n\nvar _uiSchedulerAppointmentsStrategy9 = require(\"./rendering_strategies/ui.scheduler.appointments.strategy.agenda\");\n\nvar _uiSchedulerAppointmentsStrategy10 = _interopRequireDefault(_uiSchedulerAppointmentsStrategy9);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar RENDERING_STRATEGIES = {\n  horizontal: _uiSchedulerAppointmentsStrategy4.default,\n  horizontalMonth: _uiSchedulerAppointmentsStrategy8.default,\n  horizontalMonthLine: _uiSchedulerAppointmentsStrategy6.default,\n  vertical: _uiSchedulerAppointmentsStrategy2.default,\n  agenda: _uiSchedulerAppointmentsStrategy10.default\n};\n\nvar AppointmentLayoutManager = function () {\n  function AppointmentLayoutManager(instance, renderingStrategy) {\n    _classCallCheck(this, AppointmentLayoutManager);\n\n    this.instance = instance;\n    renderingStrategy && this.initRenderingStrategy(renderingStrategy);\n  }\n\n  _createClass(AppointmentLayoutManager, [{\n    key: \"getCellDimensions\",\n    value: function value(options) {\n      if (this.instance._workSpace) {\n        return {\n          width: this.instance._workSpace.getCellWidth(),\n          height: this.instance._workSpace.getCellHeight(),\n          allDayHeight: this.instance._workSpace.getAllDayHeight()\n        };\n      }\n    }\n  }, {\n    key: \"getGroupOrientation\",\n    value: function value(options) {\n      if (this.instance._workSpace) {\n        options.callback(this.instance._workSpace._getRealGroupOrientation());\n      }\n    }\n  }, {\n    key: \"initRenderingStrategy\",\n    value: function value(renderingStrategy) {\n      var Strategy = RENDERING_STRATEGIES[renderingStrategy];\n      this._renderingStrategyInstance = new Strategy(this.instance);\n      this.renderingStrategy = renderingStrategy;\n    }\n  }, {\n    key: \"createAppointmentsMap\",\n    value: function value(items) {\n      var _this = this;\n\n      var _this$getCellDimensio = this.getCellDimensions(),\n          width = _this$getCellDimensio.width,\n          height = _this$getCellDimensio.height,\n          allDayHeight = _this$getCellDimensio.allDayHeight;\n\n      this.instance._cellWidth = width;\n      this.instance._cellHeight = height;\n      this.instance._allDayCellHeight = allDayHeight;\n      this.getGroupOrientation({\n        callback: function callback(groupOrientation) {\n          return _this.instance._groupOrientation = groupOrientation;\n        }\n      });\n      this._positionMap = this._renderingStrategyInstance.createTaskPositionMap(items);\n      return this._createAppointmentsMapCore(items || [], this._positionMap);\n    }\n  }, {\n    key: \"_createAppointmentsMapCore\",\n    value: function value(list, positionMap) {\n      var _this2 = this;\n\n      return list.map(function (data, index) {\n        if (!_this2._renderingStrategyInstance.keepAppointmentSettings()) {\n          delete data.settings;\n        }\n\n        var appointmentSettings = positionMap[index];\n        appointmentSettings.forEach(function (settings) {\n          settings.direction = \"vertical\" === _this2.renderingStrategy && !settings.allDay ? \"vertical\" : \"horizontal\";\n        });\n        return {\n          itemData: data,\n          settings: appointmentSettings,\n          needRepaint: true,\n          needRemove: false\n        };\n      });\n    }\n  }, {\n    key: \"_isDataChanged\",\n    value: function value(data) {\n      var updatedData = this.instance.getUpdatedAppointment();\n      return updatedData === data || this.instance.getUpdatedAppointmentKeys().some(function (item) {\n        return data[item.key] === item.value;\n      });\n    }\n  }, {\n    key: \"_isAppointmentShouldAppear\",\n    value: function value(currentAppointment, sourceAppointment) {\n      return currentAppointment.needRepaint && sourceAppointment.needRemove;\n    }\n  }, {\n    key: \"_isSettingChanged\",\n    value: function value(settings, sourceSetting) {\n      if (settings.length !== sourceSetting.length) {\n        return true;\n      }\n\n      for (var i = 0; i < settings.length; i++) {\n        var newSettings = settings[i];\n        var oldSettings = sourceSetting[i];\n\n        if (oldSettings) {\n          oldSettings.sortedIndex = newSettings.sortedIndex;\n        }\n\n        if (!(0, _common.equalByValue)(newSettings, oldSettings)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_getAssociatedSourceAppointment\",\n    value: function value(currentAppointment, sourceAppointments) {\n      for (var i = 0; i < sourceAppointments.length; i++) {\n        var item = sourceAppointments[i];\n\n        if (item.itemData === currentAppointment.itemData) {\n          return item;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getDeletedAppointments\",\n    value: function value(currentAppointments, sourceAppointments) {\n      var result = [];\n\n      for (var i = 0; i < sourceAppointments.length; i++) {\n        var sourceAppointment = sourceAppointments[i];\n\n        var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\n\n        if (!currentAppointment) {\n          sourceAppointment.needRemove = true;\n          result.push(sourceAppointment);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getRepaintedAppointments\",\n    value: function value(currentAppointments, sourceAppointments) {\n      var _this3 = this;\n\n      if (0 === sourceAppointments.length || \"agenda\" === this.renderingStrategy) {\n        return currentAppointments;\n      }\n\n      currentAppointments.forEach(function (appointment) {\n        var sourceAppointment = _this3._getAssociatedSourceAppointment(appointment, sourceAppointments);\n\n        if (sourceAppointment) {\n          appointment.needRepaint = _this3._isDataChanged(appointment.itemData) || _this3._isSettingChanged(appointment.settings, sourceAppointment.settings) || _this3._isAppointmentShouldAppear(appointment, sourceAppointment);\n        }\n      });\n      return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments));\n    }\n  }, {\n    key: \"getRenderingStrategyInstance\",\n    value: function value() {\n      return this._renderingStrategyInstance;\n    }\n  }]);\n\n  return AppointmentLayoutManager;\n}();\n\nmodule.exports = AppointmentLayoutManager;","map":null,"metadata":{},"sourceType":"script"}