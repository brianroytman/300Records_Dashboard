{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _uiScheduler = require(\"./ui.scheduler.work_space\");\n\nvar _uiScheduler2 = _interopRequireDefault(_uiScheduler);\n\nvar _component_registrator = require(\"../../../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _date = require(\"../../../core/utils/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _extend = require(\"../../../core/utils/extend\");\n\nvar _position = require(\"../../../core/utils/position\");\n\nvar _window = require(\"../../../core/utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar toMs = _date2.default.dateToMilliseconds;\nvar SCHEDULER_DATE_TIME_INDICATOR_CLASS = \"dx-scheduler-date-time-indicator\";\nvar TIME_PANEL_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-time-panel-current-time-cell\";\nvar HEADER_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-header-panel-current-time-cell\";\n\nvar SchedulerWorkSpaceIndicator = _uiScheduler2.default.inherit({\n  _getToday: function _getToday() {\n    var date = this.option(\"indicatorTime\") || new Date();\n    return this.invoke(\"convertDateByTimezone\", date) || date;\n  },\n  _needRenderDateTimeIndicator: function _needRenderDateTimeIndicator() {\n    var today = this._getToday();\n\n    var endViewDate = _date2.default.trimTime(this.getEndViewDate());\n\n    return _date2.default.dateInRange(today, this._firstViewDate, new Date(endViewDate.getTime() + toMs(\"day\")));\n  },\n  needRenderDateTimeIndication: function needRenderDateTimeIndication() {\n    if (!_window2.default.hasWindow()) {\n      return false;\n    }\n\n    var today = this._getToday();\n\n    return today >= _date2.default.trimTime(new Date(this.getStartViewDate()));\n  },\n  _renderDateTimeIndication: function _renderDateTimeIndication() {\n    if (this.needRenderDateTimeIndication()) {\n      if (this.option(\"shadeUntilCurrentTime\")) {\n        this._shader.render();\n      }\n\n      if (this.option(\"showCurrentTimeIndicator\") && this._needRenderDateTimeIndicator()) {\n        var groupCount = this._getGroupCount() || 1;\n\n        var $container = this._dateTableScrollable.$content();\n\n        var height = this.getIndicationHeight();\n\n        var rtlOffset = this._getRtlOffset(this.getCellWidth());\n\n        if (height > 0) {\n          this._renderIndicator(height, rtlOffset, $container, groupCount);\n        }\n      }\n    }\n  },\n  _renderIndicator: function _renderIndicator(height, rtlOffset, $container, groupCount) {\n    var groupedByDate = this.isGroupedByDate();\n    var repeatCount = groupedByDate ? 1 : groupCount;\n\n    for (var i = 0; i < repeatCount; i++) {\n      var $indicator = this._createIndicator($container);\n\n      $indicator.width(groupedByDate ? this.getCellWidth() * groupCount : this.getCellWidth());\n\n      this._groupedStrategy.shiftIndicator($indicator, height, rtlOffset, i);\n    }\n  },\n  _createIndicator: function _createIndicator($container) {\n    var $indicator = (0, _renderer2.default)(\"<div>\").addClass(SCHEDULER_DATE_TIME_INDICATOR_CLASS);\n    $container.append($indicator);\n    return $indicator;\n  },\n  _getRtlOffset: function _getRtlOffset(width) {\n    return this.option(\"rtlEnabled\") ? (0, _position.getBoundingRect)(this._dateTableScrollable.$content().get(0)).width - this.getTimePanelWidth() - width : 0;\n  },\n  _setIndicationUpdateInterval: function _setIndicationUpdateInterval() {\n    if (!this.option(\"showCurrentTimeIndicator\") || 0 === this.option(\"indicatorUpdateInterval\")) {\n      return;\n    }\n\n    this._clearIndicatorUpdateInterval();\n\n    this._indicatorInterval = setInterval(function () {\n      this._refreshDateTimeIndication();\n    }.bind(this), this.option(\"indicatorUpdateInterval\"));\n  },\n  _clearIndicatorUpdateInterval: function _clearIndicatorUpdateInterval() {\n    if (this._indicatorInterval) {\n      clearInterval(this._indicatorInterval);\n      delete this._indicatorInterval;\n    }\n  },\n  _isVerticalShader: function _isVerticalShader() {\n    return true;\n  },\n  getIndicationWidth: function getIndicationWidth(groupIndex) {\n    var maxWidth = this.getCellWidth() * this._getCellCount();\n\n    var difference = this._getIndicatorDuration();\n\n    if (difference > this._getCellCount()) {\n      difference = this._getCellCount();\n    }\n\n    var width = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\n    return maxWidth < width ? maxWidth : width;\n  },\n  getIndicatorOffset: function getIndicatorOffset(groupIndex) {\n    var difference = this._getIndicatorDuration() - 1;\n    var offset = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\n    return offset;\n  },\n  _getIndicatorDuration: function _getIndicatorDuration() {\n    var today = this._getToday();\n\n    var firstViewDate = new Date(this._firstViewDate);\n    var timeDiff = today.getTime() - firstViewDate.getTime();\n\n    if (\"workWeek\" === this.option(\"type\")) {\n      timeDiff -= this._getWeekendsCount(Math.round(timeDiff / toMs(\"day\"))) * toMs(\"day\");\n    }\n\n    return Math.ceil((timeDiff + 1) / toMs(\"day\"));\n  },\n  getIndicationHeight: function getIndicationHeight() {\n    var today = this._getToday();\n\n    var cellHeight = this.getCellHeight();\n    var date = new Date(this._firstViewDate);\n\n    if (this._needRenderDateTimeIndicator()) {\n      date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n    }\n\n    var duration = today.getTime() - date.getTime();\n    var cellCount = duration / this.getCellDuration();\n    return cellCount * cellHeight;\n  },\n  _dispose: function _dispose() {\n    this._clearIndicatorUpdateInterval();\n\n    this.callBase.apply(this, arguments);\n  },\n  _refreshDateTimeIndication: function _refreshDateTimeIndication() {\n    this._cleanDateTimeIndicator();\n\n    this._shader && this._shader.clean();\n\n    this._renderDateTimeIndication();\n  },\n  _isCurrentTime: function _isCurrentTime(date) {\n    if (this.option(\"showCurrentTimeIndicator\") && this._needRenderDateTimeIndicator()) {\n      var today = this._getToday();\n\n      var result = false;\n      date = new Date(date);\n      date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n      var startCellDate = new Date(date);\n      var endCellDate = new Date(date);\n\n      if (_date2.default.sameDate(today, date)) {\n        startCellDate = startCellDate.setMilliseconds(date.getMilliseconds() - this.getCellDuration() + 1);\n        endCellDate = endCellDate.setMilliseconds(date.getMilliseconds() + this.getCellDuration());\n        result = _date2.default.dateInRange(today, startCellDate, endCellDate);\n      }\n\n      return result;\n    }\n  },\n  _isCurrentTimeHeaderCell: function _isCurrentTimeHeaderCell(headerIndex) {\n    var result = false;\n\n    if (this.option(\"showCurrentTimeIndicator\") && this._needRenderDateTimeIndicator()) {\n      var date = this._getDateByIndex(headerIndex);\n\n      var now = this.option(\"indicatorTime\") || new Date();\n      result = _date2.default.sameDate(date, now);\n    }\n\n    return result;\n  },\n  _getTimeCellClass: function _getTimeCellClass(i) {\n    var startViewDate = this._getTimeCellDate(i);\n\n    var cellClass = this.callBase(i);\n\n    if (this._isCurrentTime(startViewDate)) {\n      return cellClass + \" \" + TIME_PANEL_CURRENT_TIME_CELL_CLASS;\n    }\n\n    return cellClass;\n  },\n  _getHeaderPanelCellClass: function _getHeaderPanelCellClass(i) {\n    var cellClass = this.callBase(i);\n\n    if (this._isCurrentTimeHeaderCell(i)) {\n      return cellClass + \" \" + HEADER_CURRENT_TIME_CELL_CLASS;\n    }\n\n    return cellClass;\n  },\n  _cleanView: function _cleanView() {\n    this.callBase();\n\n    this._cleanDateTimeIndicator();\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this.callBase();\n\n    this._refreshDateTimeIndication();\n  },\n  _cleanDateTimeIndicator: function _cleanDateTimeIndicator() {\n    this.$element().find(\".\" + SCHEDULER_DATE_TIME_INDICATOR_CLASS).remove();\n  },\n  _cleanWorkSpace: function _cleanWorkSpace() {\n    this.callBase();\n\n    this._renderDateTimeIndication();\n\n    this._setIndicationUpdateInterval();\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"showCurrentTimeIndicator\":\n      case \"indicatorTime\":\n        this._cleanWorkSpace();\n\n        break;\n\n      case \"indicatorUpdateInterval\":\n        this._setIndicationUpdateInterval();\n\n        break;\n\n      case \"showAllDayPanel\":\n        this.callBase(args);\n\n        this._refreshDateTimeIndication();\n\n        break;\n\n      case \"allDayExpanded\":\n        this.callBase(args);\n\n        this._refreshDateTimeIndication();\n\n        break;\n\n      case \"crossScrollingEnabled\":\n        this.callBase(args);\n\n        this._refreshDateTimeIndication();\n\n        break;\n\n      case \"shadeUntilCurrentTime\":\n        this._refreshDateTimeIndication();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      showCurrentTimeIndicator: true,\n      indicatorTime: new Date(),\n      indicatorUpdateInterval: 5 * toMs(\"minute\"),\n      shadeUntilCurrentTime: true\n    });\n  }\n});\n\n(0, _component_registrator2.default)(\"dxSchedulerWorkSpace\", SchedulerWorkSpaceIndicator);\nmodule.exports = SchedulerWorkSpaceIndicator;","map":null,"metadata":{},"sourceType":"script"}