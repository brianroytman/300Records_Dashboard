{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/compactAppointmentsHelper.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompactAppointmentsHelper = void 0;\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _button = require(\"../button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _translator = require(\"../../animation/translator\");\n\nvar _translator2 = _interopRequireDefault(_translator);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _function_template = require(\"../../core/templates/function_template\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _deferred2 = _interopRequireDefault(_deferred);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _position = require(\"../../core/utils/position\");\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar APPOINTMENT_COLLECTOR_CLASS = \"dx-scheduler-appointment-collector\";\nvar COMPACT_APPOINTMENT_COLLECTOR_CLASS = APPOINTMENT_COLLECTOR_CLASS + \"-compact\";\nvar APPOINTMENT_COLLECTOR_CONTENT_CLASS = APPOINTMENT_COLLECTOR_CLASS + \"-content\";\nvar WEEK_VIEW_COLLECTOR_OFFSET = 5;\nvar COMPACT_THEME_WEEK_VIEW_COLLECTOR_OFFSET = 1;\n\nvar CompactAppointmentsHelper = exports.CompactAppointmentsHelper = function () {\n  function CompactAppointmentsHelper(instance) {\n    _classCallCheck(this, CompactAppointmentsHelper);\n\n    this.instance = instance;\n    this.elements = [];\n  }\n\n  _createClass(CompactAppointmentsHelper, [{\n    key: \"render\",\n    value: function value(options) {\n      var isCompact = options.isCompact,\n          items = options.items,\n          buttonColor = options.buttonColor;\n\n      var template = this._createTemplate(items.data.length, isCompact);\n\n      var button = this._createCompactButton(template, options);\n\n      var $button = button.$element();\n\n      this._makeBackgroundColor($button, items.colors, buttonColor);\n\n      this._makeBackgroundDarker($button);\n\n      this.elements.push($button);\n      $button.data(\"items\", this._createAppointmentsData(items));\n      return $button;\n    }\n  }, {\n    key: \"clear\",\n    value: function value() {\n      this.elements.forEach(function (button) {\n        button.detach();\n        button.remove();\n      });\n      this.elements = [];\n    }\n  }, {\n    key: \"_createAppointmentsData\",\n    value: function value(items) {\n      return items.data.map(function (item, index) {\n        return {\n          data: item,\n          color: items.colors[index],\n          settings: items.settings[index]\n        };\n      });\n    }\n  }, {\n    key: \"_onButtonClick\",\n    value: function value(e, options) {\n      var $button = (0, _renderer2.default)(e.element);\n      this.instance.showAppointmentTooltipCore($button, $button.data(\"items\"), this._getExtraOptionsForTooltip(options));\n    }\n  }, {\n    key: \"_getExtraOptionsForTooltip\",\n    value: function value(options) {\n      return {\n        clickEvent: this._clickEvent(options.onAppointmentClick).bind(this),\n        dragBehavior: options.allowDrag && this._createTooltipDragBehavior(options).bind(this),\n        dropDownAppointmentTemplate: this.instance.option().dropDownAppointmentTemplate,\n        isButtonClick: true\n      };\n    }\n  }, {\n    key: \"_clickEvent\",\n    value: function value(onAppointmentClick) {\n      var _this = this;\n\n      return function (e) {\n        var config = {\n          itemData: e.itemData.data,\n          itemElement: e.itemElement\n        };\n        var createClickEvent = (0, _extend.extendFromObject)(_this.instance.fire(\"mapAppointmentFields\", config), e, false);\n        delete createClickEvent.itemData;\n        delete createClickEvent.itemIndex;\n        delete createClickEvent.itemElement;\n        onAppointmentClick(createClickEvent);\n      };\n    }\n  }, {\n    key: \"_createTooltipDragBehavior\",\n    value: function value(options) {\n      var _this2 = this;\n\n      return function (e) {\n        var dragElement;\n        var $element = (0, _renderer2.default)(e.element);\n\n        var dragBehavior = _this2.instance.getWorkSpace().dragBehavior;\n\n        dragBehavior.addTo($element, {\n          filter: \".\".concat(_constants.LIST_ITEM_CLASS),\n          container: _this2.instance.$element().find(\".\".concat(_constants.FIXED_CONTAINER_CLASS)),\n          cursorOffset: function cursorOffset() {\n            var $dragElement = (0, _renderer2.default)(dragElement);\n            return {\n              x: $dragElement.width() / 2,\n              y: $dragElement.height() / 2\n            };\n          },\n          dragTemplate: function dragTemplate() {\n            return dragElement;\n          },\n          onDragStart: function onDragStart(e) {\n            var event = e.event;\n            var itemData = (0, _renderer2.default)(e.itemElement).data(_constants.LIST_ITEM_DATA_KEY);\n\n            if (itemData && !itemData.data.disabled) {\n              event.data = event.data || {};\n              event.data.itemElement = dragElement = _this2._createDragAppointment(itemData.data, itemData.settings);\n              dragBehavior.onDragStart(event.data);\n\n              _translator2.default.resetPosition((0, _renderer2.default)(dragElement));\n            }\n          },\n          onDragEnd: function onDragEnd(e) {\n            var itemData = (0, _renderer2.default)(e.itemElement).data(_constants.LIST_ITEM_DATA_KEY);\n\n            if (itemData && !itemData.data.disabled) {\n              dragBehavior.onDragEnd(e);\n            }\n          }\n        });\n      };\n    }\n  }, {\n    key: \"_createDragAppointment\",\n    value: function value(itemData, settings) {\n      var appointments = this.instance.getAppointmentsInstance();\n      var appointmentIndex = appointments.option(\"items\").length;\n      settings.isCompact = false;\n      settings.virtual = false;\n\n      appointments._renderItem(appointmentIndex, {\n        itemData: itemData,\n        settings: [settings]\n      });\n\n      return appointments._findItemElementByItem(itemData)[0];\n    }\n  }, {\n    key: \"_getCollectorOffset\",\n    value: function value(width, cellWidth) {\n      return cellWidth - width - this._getCollectorRightOffset();\n    }\n  }, {\n    key: \"_getCollectorRightOffset\",\n    value: function value() {\n      return this.instance.getRenderingStrategyInstance()._isCompactTheme() ? COMPACT_THEME_WEEK_VIEW_COLLECTOR_OFFSET : WEEK_VIEW_COLLECTOR_OFFSET;\n    }\n  }, {\n    key: \"_makeBackgroundDarker\",\n    value: function value(button) {\n      button.css(\"boxShadow\", \"inset \".concat((0, _position.getBoundingRect)(button.get(0)).width, \"px 0 0 0 rgba(0, 0, 0, 0.3)\"));\n    }\n  }, {\n    key: \"_makeBackgroundColor\",\n    value: function value($button, colors, color) {\n      _deferred2.default.when.apply(null, colors).done(function () {\n        this._makeBackgroundColorCore($button, color, arguments);\n      }.bind(this));\n    }\n  }, {\n    key: \"_makeBackgroundColorCore\",\n    value: function value($button, color, itemsColors) {\n      var paintButton = true;\n      var currentItemColor;\n      color && color.done(function (color) {\n        if (itemsColors.length) {\n          currentItemColor = itemsColors[0];\n\n          for (var i = 1; i < itemsColors.length; i++) {\n            if (currentItemColor !== itemsColors[i]) {\n              paintButton = false;\n              break;\n            }\n\n            currentItemColor = color;\n          }\n        }\n\n        color && paintButton && $button.css(\"backgroundColor\", color);\n      }.bind(this));\n    }\n  }, {\n    key: \"_setPosition\",\n    value: function value(element, position) {\n      _translator2.default.move(element, {\n        top: position.top,\n        left: position.left\n      });\n    }\n  }, {\n    key: \"_createCompactButton\",\n    value: function value(template, options) {\n      var _this3 = this;\n\n      var $button = this._createCompactButtonElement(options);\n\n      return this.instance._createComponent($button, _button2.default, {\n        type: \"default\",\n        width: options.width,\n        height: options.height,\n        onClick: function onClick(e) {\n          return _this3._onButtonClick(e, options);\n        },\n        template: this._renderTemplate(template, options.items, options.isCompact)\n      });\n    }\n  }, {\n    key: \"_createCompactButtonElement\",\n    value: function value(_ref) {\n      var isCompact = _ref.isCompact,\n          $container = _ref.$container,\n          width = _ref.width,\n          coordinates = _ref.coordinates,\n          applyOffset = _ref.applyOffset,\n          cellWidth = _ref.cellWidth;\n      var result = (0, _renderer2.default)(\"<div>\").addClass(APPOINTMENT_COLLECTOR_CLASS).toggleClass(COMPACT_APPOINTMENT_COLLECTOR_CLASS, isCompact).appendTo($container);\n      var offset = applyOffset ? this._getCollectorOffset(width, cellWidth) : 0;\n\n      this._setPosition(result, {\n        top: coordinates.top,\n        left: coordinates.left + offset\n      });\n\n      return result;\n    }\n  }, {\n    key: \"_renderTemplate\",\n    value: function value(template, items, isCompact) {\n      return new _function_template.FunctionTemplate(function (options) {\n        return template.render({\n          model: {\n            appointmentCount: items.data.length,\n            isCompact: isCompact\n          },\n          container: options.container\n        });\n      });\n    }\n  }, {\n    key: \"_createTemplate\",\n    value: function value(count, isCompact) {\n      this._initButtonTemplate(count, isCompact);\n\n      return this.instance._getAppointmentTemplate(\"appointmentCollectorTemplate\");\n    }\n  }, {\n    key: \"_initButtonTemplate\",\n    value: function value(count, isCompact) {\n      var _this4 = this;\n\n      this.instance._templateManager.addDefaultTemplates({\n        appointmentCollector: new _function_template.FunctionTemplate(function (options) {\n          return _this4._createButtonTemplate(count, (0, _renderer2.default)(options.container), isCompact);\n        })\n      });\n    }\n  }, {\n    key: \"_createButtonTemplate\",\n    value: function value(appointmentCount, element, isCompact) {\n      var text = isCompact ? appointmentCount : _message2.default.getFormatter(\"dxScheduler-moreAppointments\")(appointmentCount);\n      return element.append((0, _renderer2.default)(\"<span>\").text(text)).addClass(APPOINTMENT_COLLECTOR_CONTENT_CLASS);\n    }\n  }]);\n\n  return CompactAppointmentsHelper;\n}();","map":null,"metadata":{},"sourceType":"script"}