{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/ui.scheduler.navigator.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _date = require(\"../../core/utils/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _component_registrator = require(\"../../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _devices = require(\"../../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _ui3 = require(\"../widget/ui.widget\");\n\nvar _ui4 = _interopRequireDefault(_ui3);\n\nvar _button = require(\"../button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _calendar = require(\"../calendar\");\n\nvar _calendar2 = _interopRequireDefault(_calendar);\n\nvar _popover = require(\"../popover\");\n\nvar _popover2 = _interopRequireDefault(_popover);\n\nvar _popup = require(\"../popup\");\n\nvar _popup2 = _interopRequireDefault(_popup);\n\nvar _uiScheduler = require(\"./ui.scheduler.publisher_mixin\");\n\nvar _uiScheduler2 = _interopRequireDefault(_uiScheduler);\n\nvar _date3 = require(\"../../localization/date\");\n\nvar _date4 = _interopRequireDefault(_date3);\n\nvar _ui5 = require(\"../scroll_view/ui.scrollable\");\n\nvar _ui6 = _interopRequireDefault(_ui5);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ELEMENT_CLASS = \"dx-scheduler-navigator\";\nvar CALENDAR_CLASS = \"dx-scheduler-navigator-calendar\";\nvar NEXT_BUTTON_CLASS = \"dx-scheduler-navigator-next\";\nvar CAPTION_BUTTON_CLASS = \"dx-scheduler-navigator-caption\";\nvar PREVIOUS_BUTTON_CLASS = \"dx-scheduler-navigator-previous\";\nvar CALENDAR_POPOVER_CLASS = \"dx-scheduler-navigator-calendar-popover\";\nvar MONDAY_INDEX = 1;\n\nvar getDefaultFirstDayOfWeekIndex = function getDefaultFirstDayOfWeekIndex(shift) {\n  return shift ? MONDAY_INDEX : _date4.default.firstDayOfWeekIndex();\n};\n\nvar getDateMonthFormat = function getDateMonthFormat(short) {\n  return function (date) {\n    var monthName = _date4.default.getMonthNames(short ? \"abbreviated\" : \"wide\")[date.getMonth()];\n\n    return [_date4.default.format(date, \"day\"), monthName].join(\" \");\n  };\n};\n\nvar getMonthYearFormat = function getMonthYearFormat(date) {\n  return _date4.default.getMonthNames(\"abbreviated\")[date.getMonth()] + \" \" + _date4.default.format(date, \"year\");\n};\n\nvar getCaptionFormat = function getCaptionFormat(short, intervalCount, duration) {\n  var dateMonthFormat = getDateMonthFormat(short);\n  return function (date) {\n    if (intervalCount > 1) {\n      var lastIntervalDate = new Date(date);\n      var defaultViewDuration = duration;\n      lastIntervalDate.setDate(date.getDate() + defaultViewDuration - 1);\n      var isDifferentMonthDates = date.getMonth() !== lastIntervalDate.getMonth();\n      var useShortFormat = isDifferentMonthDates || short;\n\n      var firstWeekDateText = _date4.default.format(date, isDifferentMonthDates ? getDateMonthFormat(useShortFormat) : \"d\");\n\n      var lastWeekDateText = _date4.default.format(lastIntervalDate, getCaptionFormat(useShortFormat));\n\n      return firstWeekDateText + \"-\" + lastWeekDateText;\n    }\n\n    return [dateMonthFormat(date), _date4.default.format(date, \"year\")].join(\" \");\n  };\n};\n\nvar getWeekCaption = function getWeekCaption(date, shift, rejectWeekend) {\n  var firstDayOfWeek = this.option(\"firstDayOfWeek\");\n  var firstDayOfWeekIndex = (0, _type.isDefined)(firstDayOfWeek) ? firstDayOfWeek : getDefaultFirstDayOfWeekIndex(shift);\n\n  if (0 === firstDayOfWeekIndex && rejectWeekend) {\n    firstDayOfWeekIndex = MONDAY_INDEX;\n  }\n\n  var firstWeekDate = _date2.default.getFirstWeekDate(date, firstDayOfWeekIndex);\n\n  var weekendDuration = 2;\n\n  if (rejectWeekend) {\n    firstWeekDate = _date2.default.normalizeDateByWeek(firstWeekDate, date);\n  }\n\n  if (firstDayOfWeek >= 6 && rejectWeekend) {\n    firstWeekDate.setDate(firstWeekDate.getDate() + (7 - firstDayOfWeek + 1));\n  }\n\n  var lastWeekDate = new Date(firstWeekDate);\n  var intervalCount = this.option(\"intervalCount\");\n  shift = shift || 6;\n  lastWeekDate = new Date(lastWeekDate.setDate(lastWeekDate.getDate() + (intervalCount > 1 ? 7 * (intervalCount - 1) + shift : shift)));\n\n  if (lastWeekDate.getDay() % 6 === 0 && rejectWeekend) {\n    lastWeekDate.setDate(lastWeekDate.getDate() + weekendDuration);\n  }\n\n  return {\n    text: formatCaptionByMonths.call(this, lastWeekDate, firstWeekDate),\n    startDate: firstWeekDate,\n    endDate: lastWeekDate\n  };\n};\n\nvar formatCaptionByMonths = function formatCaptionByMonths(lastDate, firstDate) {\n  var isDifferentMonthDates = firstDate.getMonth() !== lastDate.getMonth();\n  var isDifferentYears = firstDate.getFullYear() !== lastDate.getFullYear();\n  var useShortFormat = isDifferentMonthDates || this.option(\"_useShortDateFormat\");\n  var lastDateText;\n  var firstDateText;\n\n  if (isDifferentYears) {\n    firstDateText = _date4.default.format(firstDate, getCaptionFormat(true));\n    lastDateText = _date4.default.format(lastDate, getCaptionFormat(true));\n  } else {\n    firstDateText = _date4.default.format(firstDate, isDifferentMonthDates ? getDateMonthFormat(useShortFormat) : \"d\");\n    lastDateText = _date4.default.format(lastDate, getCaptionFormat(useShortFormat));\n  }\n\n  return firstDateText + \"-\" + lastDateText;\n};\n\nvar getMonthCaption = function getMonthCaption(date) {\n  var firstDate = new Date(_date2.default.getFirstMonthDate(date));\n  var lastDate = new Date(_date2.default.getLastMonthDate(firstDate));\n  var text;\n\n  if (this.option(\"intervalCount\") > 1) {\n    lastDate = new Date(firstDate);\n    lastDate.setMonth(firstDate.getMonth() + this.option(\"intervalCount\") - 1);\n    lastDate = new Date(_date2.default.getLastMonthDate(lastDate));\n    var isSameYear = firstDate.getYear() === lastDate.getYear();\n    var lastDateText = getMonthYearFormat(lastDate);\n    var firstDateText = isSameYear ? _date4.default.getMonthNames(\"abbreviated\")[firstDate.getMonth()] : getMonthYearFormat(firstDate);\n    text = firstDateText + \"-\" + lastDateText;\n  } else {\n    text = _date4.default.format(date, \"monthandyear\");\n  }\n\n  return {\n    text: text,\n    startDate: firstDate,\n    endDate: lastDate\n  };\n};\n\nvar dateGetter = function dateGetter(date, offset) {\n  return new Date(date[this.setter](date[this.getter]() + offset));\n};\n\nvar getConfig = function getConfig(step) {\n  var agendaDuration;\n\n  switch (step) {\n    case \"day\":\n      return {\n        duration: 1 * this.option(\"intervalCount\"),\n        setter: \"setDate\",\n        getter: \"getDate\",\n        getDate: dateGetter,\n        getCaption: function getCaption(date) {\n          var format = getCaptionFormat(false, this.option(\"intervalCount\"), this._getConfig().duration);\n          return {\n            text: _date4.default.format(date, format),\n            startDate: date,\n            endDate: date\n          };\n        }\n      };\n\n    case \"week\":\n      return {\n        duration: 7 * this.option(\"intervalCount\"),\n        setter: \"setDate\",\n        getter: \"getDate\",\n        getDate: dateGetter,\n        getCaption: getWeekCaption\n      };\n\n    case \"workWeek\":\n      return {\n        duration: 7 * this.option(\"intervalCount\"),\n        setter: \"setDate\",\n        getter: \"getDate\",\n        getDate: dateGetter,\n        getCaption: function getCaption(date) {\n          return getWeekCaption.call(this, date, 4, true);\n        }\n      };\n\n    case \"month\":\n      return {\n        duration: 1 * this.option(\"intervalCount\"),\n        setter: \"setMonth\",\n        getter: \"getMonth\",\n        getDate: function getDate(date, offset) {\n          var currentDate = date.getDate();\n          date.setDate(1);\n          date = dateGetter.call(this, date, offset);\n\n          var lastDate = _date2.default.getLastMonthDay(date);\n\n          date.setDate(currentDate < lastDate ? currentDate : lastDate);\n          return date;\n        },\n        getCaption: getMonthCaption\n      };\n\n    case \"agenda\":\n      agendaDuration = this.invoke(\"getAgendaDuration\");\n      agendaDuration = (0, _type.isNumeric)(agendaDuration) && agendaDuration > 0 ? agendaDuration : 7;\n      return {\n        duration: agendaDuration,\n        setter: \"setDate\",\n        getter: \"getDate\",\n        getDate: dateGetter,\n        getCaption: function getCaption(date) {\n          var format = getCaptionFormat(this.option(\"_useShortDateFormat\"));\n          var firstDate = new Date(date);\n          var lastDate = new Date(date);\n          var text;\n\n          if (agendaDuration > 1) {\n            lastDate.setDate(lastDate.getDate() + agendaDuration - 1);\n            text = formatCaptionByMonths.call(this, lastDate, date);\n          } else {\n            text = _date4.default.format(date, format);\n          }\n\n          return {\n            text: text,\n            startDate: firstDate,\n            endDate: lastDate\n          };\n        }\n      };\n  }\n};\n\nvar SchedulerNavigator = _ui4.default.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      date: new Date(),\n      displayedDate: void 0,\n      step: \"day\",\n      intervalCount: 1,\n      min: void 0,\n      max: void 0,\n      firstDayOfWeek: void 0,\n      _useShortDateFormat: false\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return !_devices2.default.real().generic || _devices2.default.isSimulator();\n      },\n      options: {\n        _useShortDateFormat: true\n      }\n    }]);\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"step\":\n      case \"date\":\n      case \"intervalCount\":\n      case \"displayedDate\":\n        this._updateButtonsState();\n\n        this._renderCaption();\n\n        this._setCalendarOption(\"value\", this.option(\"date\"));\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        this._updateButtonsState();\n\n        this._setCalendarOption(args.name, args.value);\n\n        break;\n\n      case \"firstDayOfWeek\":\n        this._setCalendarOption(args.name, args.value);\n\n        break;\n\n      case \"customizeDateNavigatorText\":\n        this._renderCaption();\n\n        break;\n\n      case \"tabIndex\":\n      case \"focusStateEnabled\":\n        this._next.option(args.name, args.value);\n\n        this._caption.option(args.name, args.value);\n\n        this._prev.option(args.name, args.value);\n\n        this._setCalendarOption(args.name, args.value);\n\n        this.callBase(args);\n        break;\n\n      case \"_useShortDateFormat\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _init: function _init() {\n    this.callBase();\n    this.$element().addClass(ELEMENT_CLASS);\n\n    this._initButtons();\n  },\n  _initButtons: function _initButtons() {\n    var $next = (0, _renderer2.default)(\"<div>\").addClass(NEXT_BUTTON_CLASS);\n    this._next = this._createComponent($next, _button2.default, {\n      icon: \"chevronnext\",\n      onClick: this._updateCurrentDate.bind(this, 1),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      tabIndex: this.option(\"tabIndex\"),\n      integrationOptions: {}\n    });\n    var $caption = (0, _renderer2.default)(\"<div>\").addClass(CAPTION_BUTTON_CLASS);\n    this._caption = this._createComponent($caption, _button2.default, {\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      tabIndex: this.option(\"tabIndex\"),\n      integrationOptions: {}\n    });\n    var $prev = (0, _renderer2.default)(\"<div>\").addClass(PREVIOUS_BUTTON_CLASS);\n    this._prev = this._createComponent($prev, _button2.default, {\n      icon: \"chevronprev\",\n      onClick: this._updateCurrentDate.bind(this, -1),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      tabIndex: this.option(\"tabIndex\"),\n      integrationOptions: {}\n    });\n    this.setAria(\"label\", \"Next period\", $next);\n    this.setAria(\"label\", \"Previous period\", $prev);\n\n    this._updateButtonsState();\n\n    this.$element().append($prev, $caption, $next);\n  },\n  _updateButtonsState: function _updateButtonsState() {\n    var min = this.option(\"min\");\n    var max = this.option(\"max\");\n\n    var caption = this._getConfig().getCaption.call(this, this.option(\"displayedDate\") || this.option(\"date\"));\n\n    min = min ? _date2.default.trimTime(min) : min;\n    max = max ? _date2.default.trimTime(max) : max;\n    max && max.setHours(23, 59, 59);\n\n    this._prev.option(\"disabled\", min && !isNaN(min.getTime()) && this._getNextDate(-1, caption.endDate) < min);\n\n    this._next.option(\"disabled\", max && !isNaN(max.getTime()) && this._getNextDate(1, caption.startDate) > max);\n  },\n  _updateCurrentDate: function _updateCurrentDate(direction) {\n    var date = this._getNextDate(direction);\n\n    _date2.default.normalizeDate(date, this.option(\"min\"), this.option(\"max\"));\n\n    this.notifyObserver(\"currentDateUpdated\", date);\n  },\n  _getNextDate: function _getNextDate(direction) {\n    var initialDate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\n\n    var stepConfig = this._getConfig();\n\n    var offset = stepConfig.duration * direction;\n    var date = stepConfig.getDate(new Date(initialDate || this.option(\"date\")), offset);\n    return date;\n  },\n  _renderFocusTarget: _common.noop,\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n\n    this._renderCaption();\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._renderPopover();\n\n    this._renderCaptionKeys();\n  },\n  _isMobileLayout: function _isMobileLayout() {\n    return !_devices2.default.current().generic;\n  },\n  _renderPopover: function _renderPopover() {\n    var _this = this;\n\n    var overlayType = this._isMobileLayout() ? _popup2.default : _popover2.default;\n    var popoverContainer = (0, _renderer2.default)(\"<div>\").addClass(CALENDAR_POPOVER_CLASS);\n    this._popover = this._createComponent(popoverContainer, overlayType, {\n      contentTemplate: function contentTemplate() {\n        return _this._createPopupContent();\n      },\n      defaultOptionsRules: [{\n        device: function device() {\n          return !_devices2.default.current().generic;\n        },\n        options: {\n          fullScreen: true,\n          showCloseButton: false,\n          toolbarItems: [{\n            shortcut: \"cancel\"\n          }]\n        }\n      }, {\n        device: function device() {\n          return _devices2.default.current().generic;\n        },\n        options: {\n          target: this._caption.$element()\n        }\n      }]\n    });\n\n    this._popover.$element().appendTo(this.$element());\n  },\n  _createScrollable: function _createScrollable(content) {\n    var result = this._createComponent((0, _renderer2.default)(\"<div>\"), _ui6.default, {\n      direction: \"vertical\"\n    });\n\n    result.$content().append(content);\n    return result;\n  },\n  _createPopupContent: function _createPopupContent() {\n    var result = (0, _renderer2.default)(\"<div>\").addClass(CALENDAR_CLASS);\n    this._calendar = this._createComponent(result, _calendar2.default, this._calendarOptions());\n\n    if (this._isMobileLayout()) {\n      var scrollable = this._createScrollable(result);\n\n      return scrollable.$element();\n    }\n\n    return result;\n  },\n  _calendarOptions: function _calendarOptions() {\n    return {\n      min: this.option(\"min\"),\n      max: this.option(\"max\"),\n      firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n      value: this.option(\"date\"),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      onValueChanged: function (e) {\n        if (!this.option(\"visible\")) {\n          return;\n        }\n\n        this.notifyObserver(\"currentDateUpdated\", e.value);\n\n        this._popover.hide();\n      }.bind(this),\n      hasFocus: function hasFocus() {\n        return true;\n      },\n      tabIndex: null\n    };\n  },\n  _renderCaption: function _renderCaption() {\n    var _this2 = this;\n\n    var date = this.option(\"displayedDate\") || this.option(\"date\");\n\n    var captionConfig = this._getConfig().getCaption.call(this, date);\n\n    var customizationFunction = this.option(\"customizeDateNavigatorText\");\n    var caption = _type2.default.isFunction(customizationFunction) ? customizationFunction(captionConfig) : captionConfig.text;\n\n    this._caption.option({\n      text: caption,\n      onKeyboardHandled: function onKeyboardHandled(opts) {\n        _this2.option(\"focusStateEnabled\") && !_this2.option(\"disabled\") && _this2._calendar._keyboardHandler(opts);\n      },\n      onClick: function onClick() {\n        return _this2._popover.toggle();\n      }\n    });\n  },\n  _renderCaptionKeys: function _renderCaptionKeys() {\n    if (!this.option(\"focusStateEnabled\") || this.option(\"disabled\")) {\n      return;\n    }\n\n    var that = this;\n\n    var executeHandler = function executeHandler() {\n      if (that._popover.$content().is(\":hidden\")) {\n        that._popover.show();\n      } else {\n        return true;\n      }\n    };\n\n    var tabHandler = function tabHandler() {\n      that._popover.hide();\n    };\n\n    this._caption.registerKeyHandler(\"enter\", executeHandler);\n\n    this._caption.registerKeyHandler(\"space\", executeHandler);\n\n    this._caption.registerKeyHandler(\"tab\", tabHandler);\n  },\n  _setCalendarOption: function _setCalendarOption(name, value) {\n    if (this._calendar) {\n      this._calendar.option(name, value);\n    }\n  },\n  _getConfig: function _getConfig() {\n    var step = this.option(\"step\");\n    var config = getConfig.call(this, step);\n\n    if (!config) {\n      throw _ui2.default.Error(\"E1033\", step);\n    }\n\n    return config;\n  }\n}).include(_uiScheduler2.default);\n\n(0, _component_registrator2.default)(\"dxSchedulerNavigator\", SchedulerNavigator);\nmodule.exports = SchedulerNavigator;","map":null,"metadata":{},"sourceType":"script"}